import { Writer, Reader } from "protobufjs/minimal";
import * as Long from "long";
import { CEngineGotvSyncPacket } from "./engine_gcmessages";
export declare const protobufPackage = "";
export declare enum ECsgoGCMsg {
    k_EMsgGCCStrike15_v2_Base = 9100,
    k_EMsgGCCStrike15_v2_MatchmakingStart = 9101,
    k_EMsgGCCStrike15_v2_MatchmakingStop = 9102,
    k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing = 9103,
    k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = 9104,
    k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse = 9106,
    k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = 9107,
    k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello = 9109,
    k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello = 9110,
    k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = 9112,
    k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats = 9115,
    k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = 9117,
    k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty = 9118,
    k_EMsgGCCStrike15_v2_ClientReportPlayer = 9119,
    k_EMsgGCCStrike15_v2_ClientReportServer = 9120,
    k_EMsgGCCStrike15_v2_ClientCommendPlayer = 9121,
    k_EMsgGCCStrike15_v2_ClientReportResponse = 9122,
    k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery = 9123,
    k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse = 9124,
    k_EMsgGCCStrike15_v2_WatchInfoUsers = 9126,
    k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile = 9127,
    k_EMsgGCCStrike15_v2_PlayersProfile = 9128,
    k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = 9131,
    k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = 9132,
    k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = 9133,
    k_EMsgGCCStrike15_v2_GC2ClientTextMsg = 9134,
    k_EMsgGCCStrike15_v2_Client2GCTextMsg = 9135,
    k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops = 9136,
    k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification = 9137,
    k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2 = 9138,
    k_EMsgGCCStrike15_v2_MatchList = 9139,
    k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = 9140,
    k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames = 9141,
    k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate = 9142,
    k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo = 9144,
    k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames = 9146,
    k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo = 9147,
    k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest = 9148,
    k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse = 9149,
    k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo = 9150,
    k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote = 9152,
    k_EMsgGCCStrike15_v2_Server2GCClientValidate = 9153,
    k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = 9154,
    k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = 9156,
    k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = 9157,
    k_EMsgGCCStrike15_v2_AccountPrivacySettings = 9158,
    k_EMsgGCCStrike15_v2_SetMyActivityInfo = 9159,
    k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions = 9160,
    k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions = 9161,
    k_EMsgGCCStrike15_v2_DraftSummary = 9162,
    k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData = 9163,
    k_EMsgGCCStrike15_v2_ClientRequestJoinServerData = 9164,
    k_EMsgGCCStrike15_v2_ClientRequestNewMission = 9165,
    k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo = 9167,
    k_EMsgGC_GlobalGame_Subscribe = 9168,
    k_EMsgGC_GlobalGame_Unsubscribe = 9169,
    k_EMsgGC_GlobalGame_Play = 9170,
    k_EMsgGCCStrike15_v2_AcknowledgePenalty = 9171,
    k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin = 9172,
    k_EMsgGCCStrike15_v2_GC2ClientGlobalStats = 9173,
    k_EMsgGCCStrike15_v2_Client2GCStreamUnlock = 9174,
    k_EMsgGCCStrike15_v2_FantasyRequestClientData = 9175,
    k_EMsgGCCStrike15_v2_FantasyUpdateClientData = 9176,
    k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket = 9177,
    k_EMsgGCCStrike15_v2_ClientToGCRequestTicket = 9178,
    k_EMsgGCCStrike15_v2_ClientToGCRequestElevate = 9179,
    k_EMsgGCCStrike15_v2_GlobalChat = 9180,
    k_EMsgGCCStrike15_v2_GlobalChat_Subscribe = 9181,
    k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe = 9182,
    k_EMsgGCCStrike15_v2_ClientAuthKeyCode = 9183,
    k_EMsgGCCStrike15_v2_GotvSyncPacket = 9184,
    k_EMsgGCCStrike15_v2_ClientPlayerDecalSign = 9185,
    k_EMsgGCCStrike15_v2_ClientLogonFatalError = 9187,
    k_EMsgGCCStrike15_v2_ClientPollState = 9188,
    k_EMsgGCCStrike15_v2_Party_Register = 9189,
    k_EMsgGCCStrike15_v2_Party_Unregister = 9190,
    k_EMsgGCCStrike15_v2_Party_Search = 9191,
    k_EMsgGCCStrike15_v2_Party_Invite = 9192,
    k_EMsgGCCStrike15_v2_Account_RequestCoPlays = 9193,
    k_EMsgGCCStrike15_v2_ClientGCRankUpdate = 9194,
    k_EMsgGCCStrike15_v2_ClientRequestOffers = 9195,
    k_EMsgGCCStrike15_v2_ClientAccountBalance = 9196,
    k_EMsgGCCStrike15_v2_ClientPartyJoinRelay = 9197,
    k_EMsgGCCStrike15_v2_ClientPartyWarning = 9198,
    k_EMsgGCCStrike15_v2_SetEventFavorite = 9200,
    k_EMsgGCCStrike15_v2_GetEventFavorites_Request = 9201,
    k_EMsgGCCStrike15_v2_ClientPerfReport = 9202,
    k_EMsgGCCStrike15_v2_GetEventFavorites_Response = 9203,
    k_EMsgGCCStrike15_v2_ClientRequestSouvenir = 9204,
    k_EMsgGCCStrike15_v2_ClientReportValidation = 9205,
    k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode = 9206,
    k_EMsgGCCStrike15_v2_GC2ClientRequestValidation = 9207,
    k_EMsgGCCStrike15_v2_ClientRedeemMissionReward = 9209,
    k_EMsgGCCStrike15_ClientDeepStats = 9210,
    k_EMsgGCCStrike15_StartAgreementSessionInGame = 9211,
    k_EMsgGCCStrike15_v2_GC2ClientInitSystem = 9212,
    k_EMsgGCCStrike15_v2_GC2ClientInitSystem_Response = 9213,
    k_EMsgGCCStrike15_v2_PrivateQueues = 9214,
    k_EMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt = 9215
}
export declare enum ECsgoSteamUserStat {
    k_ECsgoSteamUserStat_XpEarnedGames = 1,
    k_ECsgoSteamUserStat_MatchWinsCompetitive = 2,
    k_ECsgoSteamUserStat_SurvivedDangerZone = 3
}
export declare enum EClientReportingVersion {
    k_EClientReportingVersion_OldVersion = 0,
    k_EClientReportingVersion_BetaVersion = 1,
    k_EClientReportingVersion_SupportsTrustedMode = 2
}
export declare enum EInitSystemResult {
    k_EInitSystemResult_Invalid = 0,
    k_EInitSystemResult_Success = 1,
    k_EInitSystemResult_None = 2,
    k_EInitSystemResult_NotFound = 3,
    k_EInitSystemResult_Existing = 4,
    k_EInitSystemResult_FailedOpen = 5,
    k_EInitSystemResult_Mismatch = 6,
    k_EInitSystemResult_FailedInit = 7,
    k_EInitSystemResult_Max = 8
}
export interface GameServerPing {
    ping: number;
    ip: number;
    instances: number;
}
export interface DataCenterPing {
    dataCenterId: number;
    ping: number;
}
export interface DetailedSearchStatistic {
    gameType: number;
    searchTimeAvg: number;
    playersSearching: number;
}
export interface TournamentPlayer {
    accountId: number;
    playerNick: string;
    playerName: string;
    playerDob: number;
    playerFlag: string;
    playerLocation: string;
    playerDesc: string;
}
export interface TournamentTeam {
    teamId: number;
    teamTag: string;
    teamFlag: string;
    teamName: string;
    players: TournamentPlayer[];
}
export interface TournamentEvent {
    eventId: number;
    eventTag: string;
    eventName: string;
    eventTimeStart: number;
    eventTimeEnd: number;
    eventPublic: number;
    eventStageId: number;
    eventStageName: string;
    activeSectionId: number;
}
export interface GlobalStatistics {
    playersOnline: number;
    serversOnline: number;
    playersSearching: number;
    serversAvailable: number;
    ongoingMatches: number;
    searchTimeAvg: number;
    searchStatistics: DetailedSearchStatistic[];
    mainPostUrl: string;
    requiredAppidVersion: number;
    pricesheetVersion: number;
    twitchStreamsVersion: number;
    activeTournamentEventid: number;
    activeSurveyId: number;
    rtime32Cur: number;
    rtime32EventStart: number;
}
export interface OperationalStatisticDescription {
    name: string;
    idkey: number;
}
export interface OperationalStatisticElement {
    idkey: number;
    values: number[];
}
export interface OperationalStatisticsPacket {
    packetid: number;
    mstimestamp: number;
    values: OperationalStatisticElement[];
}
export interface PlayerRankingInfo {
    accountId: number;
    rankId: number;
    wins: number;
    rankChange: number;
    rankTypeId: number;
    tvControl: number;
}
export interface PlayerCommendationInfo {
    cmdFriendly: number;
    cmdTeaching: number;
    cmdLeader: number;
}
export interface PlayerMedalsInfo {
    displayItemsDefidx: number[];
    featuredDisplayItemDefidx: number;
}
export interface AccountActivity {
    activity: number;
    mode: number;
    map: number;
    matchid: Long;
}
export interface TournamentMatchSetup {
    eventId: number;
    teamIdCt: number;
    teamIdT: number;
    eventStageId: number;
}
export interface ServerHltvInfo {
    tvUdpPort: number;
    tvWatchKey: Long;
    tvSlots: number;
    tvClients: number;
    tvProxies: number;
    tvTime: number;
    gameType: number;
    gameMapgroup: string;
    gameMap: string;
    tvMasterSteamid: Long;
    tvLocalSlots: number;
    tvLocalClients: number;
    tvLocalProxies: number;
    tvRelaySlots: number;
    tvRelayClients: number;
    tvRelayProxies: number;
    tvRelayAddress: number;
    tvRelayPort: number;
    tvRelaySteamid: Long;
    flags: number;
}
export interface IpAddressMask {
    a: number;
    b: number;
    c: number;
    d: number;
    bits: number;
    token: number;
}
export interface CMsgCsgoSteamUserStatChange {
    ecsgosteamuserstat: number;
    delta: number;
    absolute: boolean;
}
export interface XpProgressData {
    xpPoints: number;
    xpCategory: number;
}
export interface MatchEndItemUpdates {
    itemId: Long;
    itemAttrDefidx: number;
    itemAttrDeltaValue: number;
}
export interface ScoreLeaderboardData {
    questId: Long;
    score: number;
    accountentries: ScoreLeaderboardData_AccountEntries[];
    matchentries: ScoreLeaderboardData_Entry[];
}
export interface ScoreLeaderboardData_Entry {
    tag: number;
    val: number;
}
export interface ScoreLeaderboardData_AccountEntries {
    accountid: number;
    entries: ScoreLeaderboardData_Entry[];
}
export interface PlayerQuestData {
    questerAccountId: number;
    questItemData: PlayerQuestData_QuestItemData[];
    xpProgressData: XpProgressData[];
    timePlayed: number;
    mmGameMode: number;
    itemUpdates: MatchEndItemUpdates[];
    operationPointsEligible: boolean;
    userstatchanges: CMsgCsgoSteamUserStatChange[];
}
export interface PlayerQuestData_QuestItemData {
    questId: Long;
    questNormalPointsEarned: number;
    questBonusPointsEarned: number;
}
export interface DeepPlayerStatsEntry {
    accountid: number;
    matchId: Long;
    mmGameMode: number;
    mapid: number;
    bStartingCt: boolean;
    matchOutcome: number;
    roundsWon: number;
    roundsLost: number;
    statScore: number;
    statDeaths: number;
    statMvps: number;
    enemyKills: number;
    enemyHeadshots: number;
    enemy2ks: number;
    enemy3ks: number;
    enemy4ks: number;
    totalDamage: number;
    engagementsEntryCount: number;
    engagementsEntryWins: number;
    engagements1v1Count: number;
    engagements1v1Wins: number;
    engagements1v2Count: number;
    engagements1v2Wins: number;
    utilityCount: number;
    utilitySuccess: number;
    flashCount: number;
    flashSuccess: number;
    mates: number[];
}
export interface DeepPlayerMatchEvent {
    accountid: number;
    matchId: Long;
    eventId: number;
    eventType: number;
    bPlayingCt: boolean;
    userPosX: number;
    userPosY: number;
    userPosZ: number;
    userDefidx: number;
    otherPosX: number;
    otherPosY: number;
    otherPosZ: number;
    otherDefidx: number;
    eventData: number;
}
export interface CMsgGCServerQuestUpdateData {
    playerQuestData: PlayerQuestData[];
    binaryData: Uint8Array;
    mmGameMode: number;
    missionlbsdata: ScoreLeaderboardData | undefined;
}
export interface CMsgGCCStrike15V2MatchmakingGCOperationalStats {
    packetid: number;
    namekeys: OperationalStatisticDescription[];
    packets: OperationalStatisticsPacket[];
}
export interface CMsgGCCStrike15V2MatchmakingGC2ServerConfirm {
    token: number;
    stamp: number;
    exchange: Long;
}
export interface CMsgGCCStrike15V2GC2ServerReservationUpdate {
    viewersExternalTotal: number;
    viewersExternalSteam: number;
}
export interface CMsgGCCStrike15V2MatchmakingStart {
    accountIds: number[];
    gameType: number;
    ticketData: string;
    clientVersion: number;
    tournamentMatch: TournamentMatchSetup | undefined;
    primeOnly: boolean;
    tvControl: number;
    lobbyId: Long;
}
export interface CMsgGCCStrike15V2MatchmakingStop {
    abandon: number;
}
export interface CMsgGCCStrike15V2MatchmakingClient2ServerPing {
    gameserverpings: GameServerPing[];
    offsetIndex: number;
    finalBatch: number;
    dataCenterPings: DataCenterPing[];
    maxPing: number;
    testToken: number;
}
export interface CMsgGCCStrike15V2MatchmakingGC2ClientUpdate {
    matchmaking: number;
    waitingAccountIdSessions: number[];
    error: string;
    ongoingmatchAccountIdSessions: number[];
    globalStats: GlobalStatistics | undefined;
    failpingAccountIdSessions: number[];
    penaltyAccountIdSessions: number[];
    failreadyAccountIdSessions: number[];
    vacbannedAccountIdSessions: number[];
    serverIpaddressMask: IpAddressMask | undefined;
    notes: CMsgGCCStrike15V2MatchmakingGC2ClientUpdate_Note[];
    penaltyAccountIdSessionsGreen: number[];
    insufficientlevelSessions: number[];
    vsncheckAccountIdSessions: number[];
    launcherMismatchSessions: number[];
    insecureAccountIdSessions: number[];
}
export interface CMsgGCCStrike15V2MatchmakingGC2ClientUpdate_Note {
    type: number;
    regionId: number;
    regionR: number;
    distance: number;
}
export interface CDataGCCStrike15V2TournamentMatchDraft {
    eventId: number;
    eventStageId: number;
    teamId0: number;
    teamId1: number;
    mapsCount: number;
    mapsCurrent: number;
    teamIdStart: number;
    teamIdVeto1: number;
    teamIdPickn: number;
    drafts: CDataGCCStrike15V2TournamentMatchDraft_Entry[];
}
export interface CDataGCCStrike15V2TournamentMatchDraft_Entry {
    mapid: number;
    teamIdCt: number;
}
export interface CPreMatchInfoData {
    predictionsPct: number;
    draft: CDataGCCStrike15V2TournamentMatchDraft | undefined;
    stats: CPreMatchInfoData_TeamStats[];
    wins: number[];
}
export interface CPreMatchInfoData_TeamStats {
    matchInfoIdxtxt: number;
    matchInfoTxt: string;
    matchInfoTeams: string[];
}
export interface CMsgGCCStrike15V2MatchmakingGC2ServerReserve {
    accountIds: number[];
    gameType: number;
    matchId: Long;
    serverVersion: number;
    flags: number;
    rankings: PlayerRankingInfo[];
    encryptionKey: Long;
    encryptionKeyPub: Long;
    partyIds: number[];
    whitelist: IpAddressMask[];
    tvMasterSteamid: Long;
    tournamentEvent: TournamentEvent | undefined;
    tournamentTeams: TournamentTeam[];
    tournamentCastersAccountIds: number[];
    tvRelaySteamid: Long;
    preMatchData: CPreMatchInfoData | undefined;
    rtime32EventStart: number;
    tvControl: number;
}
export interface CMsgGCCStrike15V2MatchmakingServerReservationResponse {
    reservationid: Long;
    reservation: CMsgGCCStrike15V2MatchmakingGC2ServerReserve | undefined;
    map: string;
    gcReservationSent: Long;
    serverVersion: number;
    tvInfo: ServerHltvInfo | undefined;
    rewardPlayerAccounts: number[];
    idlePlayerAccounts: number[];
    rewardItemAttrDefIdx: number;
    rewardItemAttrValue: number;
    rewardItemAttrRewardIdx: number;
    rewardDropList: number;
    tournamentTag: string;
    legacySteamdatagramPort: number;
    steamdatagramRouting: number;
    testToken: number;
    flags: number;
}
export interface CMsgGCCStrike15V2MatchmakingGC2ClientReserve {
    serverid: Long;
    directUdpIp: number;
    directUdpPort: number;
    reservationid: Long;
    reservation: CMsgGCCStrike15V2MatchmakingGC2ServerReserve | undefined;
    map: string;
    serverAddress: string;
}
export interface CMsgGCCStrike15V2MatchmakingServerRoundStats {
    reservationid: Long;
    reservation: CMsgGCCStrike15V2MatchmakingGC2ServerReserve | undefined;
    map: string;
    round: number;
    kills: number[];
    assists: number[];
    deaths: number[];
    scores: number[];
    pings: number[];
    roundResult: number;
    matchResult: number;
    teamScores: number[];
    confirm: CMsgGCCStrike15V2MatchmakingGC2ServerConfirm | undefined;
    reservationStage: number;
    matchDuration: number;
    enemyKills: number[];
    enemyHeadshots: number[];
    enemy3ks: number[];
    enemy4ks: number[];
    enemy5ks: number[];
    mvps: number[];
    spectatorsCount: number;
    spectatorsCountTv: number;
    spectatorsCountLnk: number;
    enemyKillsAgg: number[];
    dropInfo: CMsgGCCStrike15V2MatchmakingServerRoundStats_DropInfo | undefined;
    bSwitchedTeams: boolean;
    enemy2ks: number[];
    playerSpawned: number[];
    teamSpawnCount: number[];
    maxRounds: number;
}
export interface CMsgGCCStrike15V2MatchmakingServerRoundStats_DropInfo {
    accountMvp: number;
}
export interface CMsgGCCStrike15V2MatchmakingClient2GCHello {
}
export interface CMsgGCCStrike15V2MatchmakingGC2ClientHello {
    accountId: number;
    ongoingmatch: CMsgGCCStrike15V2MatchmakingGC2ClientReserve | undefined;
    globalStats: GlobalStatistics | undefined;
    penaltySeconds: number;
    penaltyReason: number;
    vacBanned: number;
    ranking: PlayerRankingInfo | undefined;
    commendation: PlayerCommendationInfo | undefined;
    medals: PlayerMedalsInfo | undefined;
    myCurrentEvent: TournamentEvent | undefined;
    myCurrentEventTeams: TournamentTeam[];
    myCurrentTeam: TournamentTeam | undefined;
    myCurrentEventStages: TournamentEvent[];
    surveyVote: number;
    activity: AccountActivity | undefined;
    playerLevel: number;
    playerCurXp: number;
    playerXpBonusFlags: number;
    rankings: PlayerRankingInfo[];
}
export interface CMsgGCCStrike15V2AccountPrivacySettings {
    settings: CMsgGCCStrike15V2AccountPrivacySettings_Setting[];
}
export interface CMsgGCCStrike15V2AccountPrivacySettings_Setting {
    settingType: number;
    settingValue: number;
}
export interface CMsgGCCStrike15V2MatchmakingGC2ClientAbandon {
    accountId: number;
    abandonedMatch: CMsgGCCStrike15V2MatchmakingGC2ClientReserve | undefined;
    penaltySeconds: number;
    penaltyReason: number;
}
export interface CMsgGCCStrike15V2ClientGCRankUpdate {
    rankings: PlayerRankingInfo[];
}
export interface CMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdate {
    mainPostUrl: string;
}
export interface CMsgGCCStrike15V2ServerNotificationForUserPenalty {
    accountId: number;
    reason: number;
    seconds: number;
    communicationCooldown: boolean;
}
export interface CMsgGCCStrike15V2ClientReportPlayer {
    accountId: number;
    rptAimbot: number;
    rptWallhack: number;
    rptSpeedhack: number;
    rptTeamharm: number;
    rptTextabuse: number;
    rptVoiceabuse: number;
    matchId: Long;
    reportFromDemo: boolean;
}
export interface CMsgGCCStrike15V2ClientCommendPlayer {
    accountId: number;
    matchId: Long;
    commendation: PlayerCommendationInfo | undefined;
    tokens: number;
}
export interface CMsgGCCStrike15V2ClientReportServer {
    rptPoorperf: number;
    rptAbusivemodels: number;
    rptBadmotd: number;
    rptListingabuse: number;
    rptInventoryabuse: number;
    matchId: Long;
}
export interface CMsgGCCStrike15V2ClientReportResponse {
    confirmationId: Long;
    accountId: number;
    serverIp: number;
    responseType: number;
    responseResult: number;
    tokens: number;
}
export interface CMsgGCCStrike15V2ClientRequestWatchInfoFriends {
    requestId: number;
    accountIds: number[];
    serverid: Long;
    matchid: Long;
    clientLauncher: number;
    dataCenterPings: DataCenterPing[];
}
export interface WatchableMatchInfo {
    serverIp: number;
    tvPort: number;
    tvSpectators: number;
    tvTime: number;
    tvWatchPassword: Uint8Array;
    clDecryptdataKey: Long;
    clDecryptdataKeyPub: Long;
    gameType: number;
    gameMapgroup: string;
    gameMap: string;
    serverId: Long;
    matchId: Long;
    reservationId: Long;
}
export interface CMsgGCCStrike15V2ClientRequestJoinFriendData {
    version: number;
    accountId: number;
    joinToken: number;
    joinIpp: number;
    res: CMsgGCCStrike15V2MatchmakingGC2ClientReserve | undefined;
    errormsg: string;
}
export interface CMsgGCCStrike15V2ClientRequestJoinServerData {
    version: number;
    accountId: number;
    serverid: Long;
    serverIp: number;
    serverPort: number;
    res: CMsgGCCStrike15V2MatchmakingGC2ClientReserve | undefined;
    errormsg: string;
}
export interface CMsgGCCstrike15V2ClientRequestNewMission {
    missionId: number;
    campaignId: number;
}
export interface CMsgGCCstrike15V2ClientRedeemMissionReward {
    campaignId: number;
    redeemId: number;
    redeemableBalance: number;
    expectedCost: number;
}
export interface CMsgGCCstrike15V2GC2ServerNotifyXPRewarded {
    xpProgressData: XpProgressData[];
    accountId: number;
    currentXp: number;
    currentLevel: number;
    upgradedDefidx: number;
    operationPointsAwarded: number;
}
export interface CMsgGCCStrike15ClientDeepStats {
    accountId: number;
    range: CMsgGCCStrike15ClientDeepStats_DeepStatsRange | undefined;
    matches: CMsgGCCStrike15ClientDeepStats_DeepStatsMatch[];
}
export interface CMsgGCCStrike15ClientDeepStats_DeepStatsRange {
    begin: number;
    end: number;
    frozen: boolean;
}
export interface CMsgGCCStrike15ClientDeepStats_DeepStatsMatch {
    player: DeepPlayerStatsEntry | undefined;
    events: DeepPlayerMatchEvent[];
}
export interface CMsgGCCStrike15V2WatchInfoUsers {
    requestId: number;
    accountIds: number[];
    watchableMatchInfos: WatchableMatchInfo[];
    extendedTimeout: number;
}
export interface CMsgGCCStrike15V2ClientRequestPlayersProfile {
    requestIdDeprecated: number;
    accountIdsDeprecated: number[];
    accountId: number;
    requestLevel: number;
}
export interface CMsgGCCStrike15V2PlayersProfile {
    requestId: number;
    accountProfiles: CMsgGCCStrike15V2MatchmakingGC2ClientHello[];
}
export interface CMsgGCCStrike15V2PlayerOverwatchCaseUpdate {
    caseid: Long;
    suspectid: number;
    fractionid: number;
    rptAimbot: number;
    rptWallhack: number;
    rptSpeedhack: number;
    rptTeamharm: number;
    reason: number;
}
export interface CMsgGCCStrike15V2PlayerOverwatchCaseAssignment {
    caseid: Long;
    caseurl: string;
    verdict: number;
    timestamp: number;
    throttleseconds: number;
    suspectid: number;
    fractionid: number;
    numrounds: number;
    fractionrounds: number;
    streakconvictions: number;
    reason: number;
}
export interface CMsgGCCStrike15V2PlayerOverwatchCaseStatus {
    caseid: Long;
    statusid: number;
}
export interface CClientHeaderOverwatchEvidence {
    accountid: number;
    caseid: Long;
}
export interface CMsgGCCStrike15V2GC2ClientTextMsg {
    id: number;
    type: number;
    payload: Uint8Array;
}
export interface CMsgGCCStrike15V2Client2GCTextMsg {
    id: number;
    args: Uint8Array[];
}
export interface CMsgGCCStrike15V2MatchEndRunRewardDrops {
    serverinfo: CMsgGCCStrike15V2MatchmakingServerReservationResponse | undefined;
    matchEndQuestData: CMsgGCServerQuestUpdateData | undefined;
}
export interface CEconItemPreviewDataBlock {
    accountid: number;
    itemid: Long;
    defindex: number;
    paintindex: number;
    rarity: number;
    quality: number;
    paintwear: number;
    paintseed: number;
    killeaterscoretype: number;
    killeatervalue: number;
    customname: string;
    stickers: CEconItemPreviewDataBlock_Sticker[];
    inventory: number;
    origin: number;
    questid: number;
    dropreason: number;
    musicindex: number;
    entindex: number;
}
export interface CEconItemPreviewDataBlock_Sticker {
    slot: number;
    stickerId: number;
    wear: number;
    scale: number;
    rotation: number;
    tintId: number;
}
export interface CMsgGCCStrike15V2MatchEndRewardDropsNotification {
    iteminfo: CEconItemPreviewDataBlock | undefined;
}
export interface CMsgItemAcknowledged {
    iteminfo: CEconItemPreviewDataBlock | undefined;
}
export interface CMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequest {
    paramS: Long;
    paramA: Long;
    paramD: Long;
    paramM: Long;
}
export interface CMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponse {
    iteminfo: CEconItemPreviewDataBlock | undefined;
}
export interface CMsgGCCStrike15V2MatchListRequestCurrentLiveGames {
}
export interface CMsgGCCStrike15V2MatchListRequestLiveGameForUser {
    accountid: number;
}
export interface CMsgGCCStrike15V2MatchListRequestRecentUserGames {
    accountid: number;
}
export interface CMsgGCCStrike15V2MatchListRequestTournamentGames {
    eventid: number;
}
export interface CMsgGCCStrike15V2MatchListRequestFullGameInfo {
    matchid: Long;
    outcomeid: Long;
    token: number;
}
export interface CDataGCCStrike15V2MatchInfo {
    matchid: Long;
    matchtime: number;
    watchablematchinfo: WatchableMatchInfo | undefined;
    roundstatsLegacy: CMsgGCCStrike15V2MatchmakingServerRoundStats | undefined;
    roundstatsall: CMsgGCCStrike15V2MatchmakingServerRoundStats[];
}
export interface CDataGCCStrike15V2TournamentGroupTeam {
    teamId: number;
    score: number;
    correctpick: boolean;
}
export interface CDataGCCStrike15V2TournamentGroup {
    groupid: number;
    name: string;
    desc: string;
    picksDeprecated: number;
    teams: CDataGCCStrike15V2TournamentGroupTeam[];
    stageIds: number[];
    picklockuntiltime: number;
    pickableteams: number;
    pointsPerPick: number;
    picks: CDataGCCStrike15V2TournamentGroup_Picks[];
}
export interface CDataGCCStrike15V2TournamentGroup_Picks {
    pickids: number[];
}
export interface CDataGCCStrike15V2TournamentSection {
    sectionid: number;
    name: string;
    desc: string;
    groups: CDataGCCStrike15V2TournamentGroup[];
}
export interface CDataGCCStrike15V2TournamentInfo {
    sections: CDataGCCStrike15V2TournamentSection[];
    tournamentEvent: TournamentEvent | undefined;
    tournamentTeams: TournamentTeam[];
}
export interface CMsgGCCStrike15V2MatchList {
    msgrequestid: number;
    accountid: number;
    servertime: number;
    matches: CDataGCCStrike15V2MatchInfo[];
    streams: TournamentTeam[];
    tournamentinfo: CDataGCCStrike15V2TournamentInfo | undefined;
}
export interface CMsgGCCStrike15V2MatchListTournamentOperatorMgmt {
    eventid: number;
    matches: CDataGCCStrike15V2MatchInfo[];
}
export interface CMsgGCCStrike15V2Predictions {
    eventId: number;
    groupMatchTeamPicks: CMsgGCCStrike15V2Predictions_GroupMatchTeamPick[];
}
export interface CMsgGCCStrike15V2Predictions_GroupMatchTeamPick {
    sectionid: number;
    groupid: number;
    index: number;
    teamid: number;
    itemid: Long;
}
export interface CMsgGCCStrike15V2Fantasy {
    eventId: number;
    teams: CMsgGCCStrike15V2Fantasy_FantasyTeam[];
}
export interface CMsgGCCStrike15V2Fantasy_FantasySlot {
    type: number;
    pick: number;
    itemid: Long;
}
export interface CMsgGCCStrike15V2Fantasy_FantasyTeam {
    sectionid: number;
    slots: CMsgGCCStrike15V2Fantasy_FantasySlot[];
}
export interface CAttributeString {
    value: string;
}
export interface CMsgCStrike15Welcome {
    storeItemHash: number;
    timeplayedconsecutively: number;
    timeFirstPlayed: number;
    lastTimePlayed: number;
    lastIpAddress: number;
    gscookieid: Long;
    uniqueid: Long;
}
export interface CMsgGCCStrike15V2ClientVarValueNotificationInfo {
    valueName: string;
    valueInt: number;
    serverAddr: number;
    serverPort: number;
    chokedBlocks: string[];
}
export interface CMsgGCCStrike15V2ServerVarValueNotificationInfo {
    accountid: number;
    viewangles: number[];
    type: number;
    userdata: number[];
}
export interface CMsgGCCStrike15V2GiftsLeaderboardRequest {
}
export interface CMsgGCCStrike15V2GiftsLeaderboardResponse {
    servertime: number;
    timePeriodSeconds: number;
    totalGiftsGiven: number;
    totalGivers: number;
    entries: CMsgGCCStrike15V2GiftsLeaderboardResponse_GiftLeaderboardEntry[];
}
export interface CMsgGCCStrike15V2GiftsLeaderboardResponse_GiftLeaderboardEntry {
    accountid: number;
    gifts: number;
}
export interface CMsgGCCStrike15V2ClientSubmitSurveyVote {
    surveyId: number;
    vote: number;
}
export interface CMsgGCCStrike15V2Server2GCClientValidate {
    accountid: number;
}
export interface CMsgGCCStrike15V2GC2ClientTournamentInfo {
    eventid: number;
    stageid: number;
    gameType: number;
    teamids: number[];
}
export interface CSOEconCoupon {
    entryid: number;
    defidx: number;
    expirationDate: number;
}
export interface CSOQuestProgress {
    questid: number;
    pointsRemaining: number;
    bonusPoints: number;
}
export interface CSOAccountSeasonalOperation {
    seasonValue: number;
    tierUnlocked: number;
    premiumTiers: number;
    missionId: number;
    missionsCompleted: number;
    redeemableBalance: number;
    seasonPassTime: number;
}
export interface CSOAccountRecurringSubscription {
    timeNextCycle: number;
    timeInitiated: number;
}
export interface CSOPersonaDataPublic {
    playerLevel: number;
    commendation: PlayerCommendationInfo | undefined;
    elevatedState: boolean;
}
export interface CMsgGCGlobalGameSubscribe {
    ticket: Long;
}
export interface CMsgGCGlobalGameUnsubscribe {
    timeleft: number;
}
export interface CMsgGCGlobalGamePlay {
    ticket: Long;
    gametimems: number;
    msperpoint: number;
}
export interface CMsgGCCStrike15V2AcknowledgePenalty {
    acknowledged: number;
}
export interface CMsgGCCStrike15V2Client2GCRequestPrestigeCoin {
    defindex: number;
    upgradeid: Long;
    hours: number;
    prestigetime: number;
}
export interface CMsgGCCStrike15V2Client2GCStreamUnlock {
    ticket: Long;
    os: number;
}
export interface CMsgGCCStrike15V2ClientToGCRequestElevate {
    stage: number;
}
export interface CMsgGCCStrike15V2ClientToGCChat {
    matchId: Long;
    text: string;
}
export interface CMsgGCCStrike15V2GCToClientChat {
    accountId: number;
    text: string;
}
export interface CMsgGCCStrike15V2ClientAuthKeyCode {
    eventid: number;
    code: string;
}
export interface CMsgGCCStrike15GotvSyncPacket {
    data: CEngineGotvSyncPacket | undefined;
}
export interface PlayerDecalDigitalSignature {
    signature: Uint8Array;
    accountid: number;
    rtime: number;
    endpos: number[];
    startpos: number[];
    right: number[];
    txDefidx: number;
    entindex: number;
    hitbox: number;
    creationtime: number;
    equipslot: number;
    traceId: number;
    normal: number[];
    tintId: number;
}
export interface CMsgGCCStrike15V2ClientPlayerDecalSign {
    data: PlayerDecalDigitalSignature | undefined;
    itemid: Long;
}
export interface CMsgGCCStrike15V2ClientLogonFatalError {
    errorcode: number;
    message: string;
    country: string;
}
export interface CMsgGCCStrike15V2ClientPollState {
    pollid: number;
    names: string[];
    values: number[];
}
export interface CMsgGCCStrike15V2PartyRegister {
    id: number;
    ver: number;
    apr: number;
    ark: number;
    nby: number;
    grp: number;
    slots: number;
    launcher: number;
    gameType: number;
}
export interface CMsgGCCStrike15V2PartySearch {
    ver: number;
    apr: number;
    ark: number;
    grps: number[];
    launcher: number;
    gameType: number;
}
export interface CMsgGCCStrike15V2PartySearchResults {
    entries: CMsgGCCStrike15V2PartySearchResults_Entry[];
}
export interface CMsgGCCStrike15V2PartySearchResults_Entry {
    id: number;
    grp: number;
    gameType: number;
    apr: number;
    ark: number;
    loc: number;
    accountid: number;
}
export interface CMsgGCCStrike15V2PartyInvite {
    accountid: number;
    lobbyid: number;
}
export interface CMsgGCCStrike15V2AccountRequestCoPlays {
    players: CMsgGCCStrike15V2AccountRequestCoPlays_Player[];
    servertime: number;
}
export interface CMsgGCCStrike15V2AccountRequestCoPlays_Player {
    accountid: number;
    rtcoplay: number;
    online: boolean;
}
export interface CMsgGCCStrike15V2ClientToGCRequestTicket {
    authorizedSteamId: Long;
    authorizedPublicIp: number;
    gameserverSteamId: Long;
    gameserverSdrRouting: string;
}
export interface CMsgGCToClientSteamDatagramTicket {
    serializedTicket: Uint8Array;
}
export interface CMsgGCCStrike15V2ClientRequestOffers {
}
export interface CMsgGCCStrike15V2ClientRequestSouvenir {
    itemid: Long;
    matchid: Long;
    eventid: number;
}
export interface CMsgGCCStrike15V2ClientAccountBalance {
    amount: Long;
    url: string;
}
export interface CMsgGCCStrike15V2ClientPartyJoinRelay {
    accountid: number;
    lobbyid: Long;
}
export interface CMsgGCCStrike15V2ClientPartyWarning {
    entries: CMsgGCCStrike15V2ClientPartyWarning_Entry[];
}
export interface CMsgGCCStrike15V2ClientPartyWarning_Entry {
    accountid: number;
    warntype: number;
}
export interface CMsgGCCStrike15V2SetEventFavorite {
    eventid: Long;
    isFavorite: boolean;
}
export interface CMsgGCCStrike15V2GetEventFavoritesRequest {
    allEvents: boolean;
}
export interface CMsgGCCStrike15V2GetEventFavoritesResponse {
    allEvents: boolean;
    jsonFavorites: string;
    jsonFeatured: string;
}
export interface CMsgGCCStrike15V2ClientPerfReport {
    entries: CMsgGCCStrike15V2ClientPerfReport_Entry[];
}
export interface CMsgGCCStrike15V2ClientPerfReport_Entry {
    perfcounter: number;
    length: number;
    reference: Uint8Array;
    actual: Uint8Array;
    sourceid: number;
    status: number;
}
export interface CVDiagnostic {
    id: number;
    extended: number;
    value: Long;
    stringValue: string;
}
export interface CMsgGCCStrike15V2ClientReportValidation {
    fileReport: string;
    commandLine: string;
    totalFiles: number;
    internalError: number;
    trustTime: number;
    countPending: number;
    countCompleted: number;
    processId: number;
    osversion: number;
    clientreportversion: number;
    statusId: number;
    diagnostic1: number;
    diagnostic2: Long;
    diagnostic3: Long;
    lastLaunchData: string;
    reportCount: number;
    clientTime: Long;
    diagnostic4: Long;
    diagnostic5: Long;
    diagnostics: CVDiagnostic[];
}
export interface CMsgGCCStrike15V2GC2ClientRefuseSecureMode {
    fileReport: string;
    offerInsecureMode: boolean;
    offerSecureMode: boolean;
    showUnsignedUi: boolean;
    kickUser: boolean;
    showTrustedUi: boolean;
    showWarningNotTrusted: boolean;
    showWarningNotTrusted2: boolean;
    filesPreventedTrusted: string;
}
export interface CMsgGCCStrike15V2GC2ClientRequestValidation {
    fullReport: boolean;
    module: string;
}
export interface CMsgGCCStrike15V2GC2ClientInitSystem {
    load: boolean;
    name: string;
    outputname: string;
    keyData: Uint8Array;
    shaHash: Uint8Array;
    cookie: number;
    manifest: string;
    systemPackage: Uint8Array;
    loadSystem: boolean;
}
export interface CMsgGCCStrike15V2GC2ClientInitSystemResponse {
    success: boolean;
    diagnostic: string;
    shaHash: Uint8Array;
    response: number;
    errorCode1: number;
    errorCode2: number;
    handle: Long;
    einitResult: EInitSystemResult;
    auxSystem1: number;
    auxSystem2: number;
}
export declare const GameServerPing: {
    encode(message: GameServerPing, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): GameServerPing;
    fromPartial<I extends {
        ping?: number | undefined;
        ip?: number | undefined;
        instances?: number | undefined;
    } & {
        ping?: number | undefined;
        ip?: number | undefined;
        instances?: number | undefined;
    } & Record<Exclude<keyof I, keyof GameServerPing>, never>>(object: I): GameServerPing;
};
export declare const DataCenterPing: {
    encode(message: DataCenterPing, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): DataCenterPing;
    fromPartial<I extends {
        dataCenterId?: number | undefined;
        ping?: number | undefined;
    } & {
        dataCenterId?: number | undefined;
        ping?: number | undefined;
    } & Record<Exclude<keyof I, keyof DataCenterPing>, never>>(object: I): DataCenterPing;
};
export declare const DetailedSearchStatistic: {
    encode(message: DetailedSearchStatistic, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): DetailedSearchStatistic;
    fromPartial<I extends {
        gameType?: number | undefined;
        searchTimeAvg?: number | undefined;
        playersSearching?: number | undefined;
    } & {
        gameType?: number | undefined;
        searchTimeAvg?: number | undefined;
        playersSearching?: number | undefined;
    } & Record<Exclude<keyof I, keyof DetailedSearchStatistic>, never>>(object: I): DetailedSearchStatistic;
};
export declare const TournamentPlayer: {
    encode(message: TournamentPlayer, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): TournamentPlayer;
    fromPartial<I extends {
        accountId?: number | undefined;
        playerNick?: string | undefined;
        playerName?: string | undefined;
        playerDob?: number | undefined;
        playerFlag?: string | undefined;
        playerLocation?: string | undefined;
        playerDesc?: string | undefined;
    } & {
        accountId?: number | undefined;
        playerNick?: string | undefined;
        playerName?: string | undefined;
        playerDob?: number | undefined;
        playerFlag?: string | undefined;
        playerLocation?: string | undefined;
        playerDesc?: string | undefined;
    } & Record<Exclude<keyof I, keyof TournamentPlayer>, never>>(object: I): TournamentPlayer;
};
export declare const TournamentTeam: {
    encode(message: TournamentTeam, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): TournamentTeam;
    fromPartial<I extends {
        teamId?: number | undefined;
        teamTag?: string | undefined;
        teamFlag?: string | undefined;
        teamName?: string | undefined;
        players?: {
            accountId?: number | undefined;
            playerNick?: string | undefined;
            playerName?: string | undefined;
            playerDob?: number | undefined;
            playerFlag?: string | undefined;
            playerLocation?: string | undefined;
            playerDesc?: string | undefined;
        }[] | undefined;
    } & {
        teamId?: number | undefined;
        teamTag?: string | undefined;
        teamFlag?: string | undefined;
        teamName?: string | undefined;
        players?: ({
            accountId?: number | undefined;
            playerNick?: string | undefined;
            playerName?: string | undefined;
            playerDob?: number | undefined;
            playerFlag?: string | undefined;
            playerLocation?: string | undefined;
            playerDesc?: string | undefined;
        }[] & ({
            accountId?: number | undefined;
            playerNick?: string | undefined;
            playerName?: string | undefined;
            playerDob?: number | undefined;
            playerFlag?: string | undefined;
            playerLocation?: string | undefined;
            playerDesc?: string | undefined;
        } & {
            accountId?: number | undefined;
            playerNick?: string | undefined;
            playerName?: string | undefined;
            playerDob?: number | undefined;
            playerFlag?: string | undefined;
            playerLocation?: string | undefined;
            playerDesc?: string | undefined;
        } & Record<Exclude<keyof I["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["players"], keyof {
            accountId?: number | undefined;
            playerNick?: string | undefined;
            playerName?: string | undefined;
            playerDob?: number | undefined;
            playerFlag?: string | undefined;
            playerLocation?: string | undefined;
            playerDesc?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof TournamentTeam>, never>>(object: I): TournamentTeam;
};
export declare const TournamentEvent: {
    encode(message: TournamentEvent, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): TournamentEvent;
    fromPartial<I extends {
        eventId?: number | undefined;
        eventTag?: string | undefined;
        eventName?: string | undefined;
        eventTimeStart?: number | undefined;
        eventTimeEnd?: number | undefined;
        eventPublic?: number | undefined;
        eventStageId?: number | undefined;
        eventStageName?: string | undefined;
        activeSectionId?: number | undefined;
    } & {
        eventId?: number | undefined;
        eventTag?: string | undefined;
        eventName?: string | undefined;
        eventTimeStart?: number | undefined;
        eventTimeEnd?: number | undefined;
        eventPublic?: number | undefined;
        eventStageId?: number | undefined;
        eventStageName?: string | undefined;
        activeSectionId?: number | undefined;
    } & Record<Exclude<keyof I, keyof TournamentEvent>, never>>(object: I): TournamentEvent;
};
export declare const GlobalStatistics: {
    encode(message: GlobalStatistics, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): GlobalStatistics;
    fromPartial<I extends {
        playersOnline?: number | undefined;
        serversOnline?: number | undefined;
        playersSearching?: number | undefined;
        serversAvailable?: number | undefined;
        ongoingMatches?: number | undefined;
        searchTimeAvg?: number | undefined;
        searchStatistics?: {
            gameType?: number | undefined;
            searchTimeAvg?: number | undefined;
            playersSearching?: number | undefined;
        }[] | undefined;
        mainPostUrl?: string | undefined;
        requiredAppidVersion?: number | undefined;
        pricesheetVersion?: number | undefined;
        twitchStreamsVersion?: number | undefined;
        activeTournamentEventid?: number | undefined;
        activeSurveyId?: number | undefined;
        rtime32Cur?: number | undefined;
        rtime32EventStart?: number | undefined;
    } & {
        playersOnline?: number | undefined;
        serversOnline?: number | undefined;
        playersSearching?: number | undefined;
        serversAvailable?: number | undefined;
        ongoingMatches?: number | undefined;
        searchTimeAvg?: number | undefined;
        searchStatistics?: ({
            gameType?: number | undefined;
            searchTimeAvg?: number | undefined;
            playersSearching?: number | undefined;
        }[] & ({
            gameType?: number | undefined;
            searchTimeAvg?: number | undefined;
            playersSearching?: number | undefined;
        } & {
            gameType?: number | undefined;
            searchTimeAvg?: number | undefined;
            playersSearching?: number | undefined;
        } & Record<Exclude<keyof I["searchStatistics"][number], keyof DetailedSearchStatistic>, never>)[] & Record<Exclude<keyof I["searchStatistics"], keyof {
            gameType?: number | undefined;
            searchTimeAvg?: number | undefined;
            playersSearching?: number | undefined;
        }[]>, never>) | undefined;
        mainPostUrl?: string | undefined;
        requiredAppidVersion?: number | undefined;
        pricesheetVersion?: number | undefined;
        twitchStreamsVersion?: number | undefined;
        activeTournamentEventid?: number | undefined;
        activeSurveyId?: number | undefined;
        rtime32Cur?: number | undefined;
        rtime32EventStart?: number | undefined;
    } & Record<Exclude<keyof I, keyof GlobalStatistics>, never>>(object: I): GlobalStatistics;
};
export declare const OperationalStatisticDescription: {
    encode(message: OperationalStatisticDescription, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): OperationalStatisticDescription;
    fromPartial<I extends {
        name?: string | undefined;
        idkey?: number | undefined;
    } & {
        name?: string | undefined;
        idkey?: number | undefined;
    } & Record<Exclude<keyof I, keyof OperationalStatisticDescription>, never>>(object: I): OperationalStatisticDescription;
};
export declare const OperationalStatisticElement: {
    encode(message: OperationalStatisticElement, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): OperationalStatisticElement;
    fromPartial<I extends {
        idkey?: number | undefined;
        values?: number[] | undefined;
    } & {
        idkey?: number | undefined;
        values?: (number[] & number[] & Record<Exclude<keyof I["values"], keyof number[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof OperationalStatisticElement>, never>>(object: I): OperationalStatisticElement;
};
export declare const OperationalStatisticsPacket: {
    encode(message: OperationalStatisticsPacket, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): OperationalStatisticsPacket;
    fromPartial<I extends {
        packetid?: number | undefined;
        mstimestamp?: number | undefined;
        values?: {
            idkey?: number | undefined;
            values?: number[] | undefined;
        }[] | undefined;
    } & {
        packetid?: number | undefined;
        mstimestamp?: number | undefined;
        values?: ({
            idkey?: number | undefined;
            values?: number[] | undefined;
        }[] & ({
            idkey?: number | undefined;
            values?: number[] | undefined;
        } & {
            idkey?: number | undefined;
            values?: (number[] & number[] & Record<Exclude<keyof I["values"][number]["values"], keyof number[]>, never>) | undefined;
        } & Record<Exclude<keyof I["values"][number], keyof OperationalStatisticElement>, never>)[] & Record<Exclude<keyof I["values"], keyof {
            idkey?: number | undefined;
            values?: number[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof OperationalStatisticsPacket>, never>>(object: I): OperationalStatisticsPacket;
};
export declare const PlayerRankingInfo: {
    encode(message: PlayerRankingInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): PlayerRankingInfo;
    fromPartial<I extends {
        accountId?: number | undefined;
        rankId?: number | undefined;
        wins?: number | undefined;
        rankChange?: number | undefined;
        rankTypeId?: number | undefined;
        tvControl?: number | undefined;
    } & {
        accountId?: number | undefined;
        rankId?: number | undefined;
        wins?: number | undefined;
        rankChange?: number | undefined;
        rankTypeId?: number | undefined;
        tvControl?: number | undefined;
    } & Record<Exclude<keyof I, keyof PlayerRankingInfo>, never>>(object: I): PlayerRankingInfo;
};
export declare const PlayerCommendationInfo: {
    encode(message: PlayerCommendationInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): PlayerCommendationInfo;
    fromPartial<I extends {
        cmdFriendly?: number | undefined;
        cmdTeaching?: number | undefined;
        cmdLeader?: number | undefined;
    } & {
        cmdFriendly?: number | undefined;
        cmdTeaching?: number | undefined;
        cmdLeader?: number | undefined;
    } & Record<Exclude<keyof I, keyof PlayerCommendationInfo>, never>>(object: I): PlayerCommendationInfo;
};
export declare const PlayerMedalsInfo: {
    encode(message: PlayerMedalsInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): PlayerMedalsInfo;
    fromPartial<I extends {
        displayItemsDefidx?: number[] | undefined;
        featuredDisplayItemDefidx?: number | undefined;
    } & {
        displayItemsDefidx?: (number[] & number[] & Record<Exclude<keyof I["displayItemsDefidx"], keyof number[]>, never>) | undefined;
        featuredDisplayItemDefidx?: number | undefined;
    } & Record<Exclude<keyof I, keyof PlayerMedalsInfo>, never>>(object: I): PlayerMedalsInfo;
};
export declare const AccountActivity: {
    encode(message: AccountActivity, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): AccountActivity;
    fromPartial<I extends {
        activity?: number | undefined;
        mode?: number | undefined;
        map?: number | undefined;
        matchid?: string | number | Long.Long | undefined;
    } & {
        activity?: number | undefined;
        mode?: number | undefined;
        map?: number | undefined;
        matchid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchid"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof AccountActivity>, never>>(object: I): AccountActivity;
};
export declare const TournamentMatchSetup: {
    encode(message: TournamentMatchSetup, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): TournamentMatchSetup;
    fromPartial<I extends {
        eventId?: number | undefined;
        teamIdCt?: number | undefined;
        teamIdT?: number | undefined;
        eventStageId?: number | undefined;
    } & {
        eventId?: number | undefined;
        teamIdCt?: number | undefined;
        teamIdT?: number | undefined;
        eventStageId?: number | undefined;
    } & Record<Exclude<keyof I, keyof TournamentMatchSetup>, never>>(object: I): TournamentMatchSetup;
};
export declare const ServerHltvInfo: {
    encode(message: ServerHltvInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): ServerHltvInfo;
    fromPartial<I extends {
        tvUdpPort?: number | undefined;
        tvWatchKey?: string | number | Long.Long | undefined;
        tvSlots?: number | undefined;
        tvClients?: number | undefined;
        tvProxies?: number | undefined;
        tvTime?: number | undefined;
        gameType?: number | undefined;
        gameMapgroup?: string | undefined;
        gameMap?: string | undefined;
        tvMasterSteamid?: string | number | Long.Long | undefined;
        tvLocalSlots?: number | undefined;
        tvLocalClients?: number | undefined;
        tvLocalProxies?: number | undefined;
        tvRelaySlots?: number | undefined;
        tvRelayClients?: number | undefined;
        tvRelayProxies?: number | undefined;
        tvRelayAddress?: number | undefined;
        tvRelayPort?: number | undefined;
        tvRelaySteamid?: string | number | Long.Long | undefined;
        flags?: number | undefined;
    } & {
        tvUdpPort?: number | undefined;
        tvWatchKey?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["tvWatchKey"], keyof Long.Long>, never>) | undefined;
        tvSlots?: number | undefined;
        tvClients?: number | undefined;
        tvProxies?: number | undefined;
        tvTime?: number | undefined;
        gameType?: number | undefined;
        gameMapgroup?: string | undefined;
        gameMap?: string | undefined;
        tvMasterSteamid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
        tvLocalSlots?: number | undefined;
        tvLocalClients?: number | undefined;
        tvLocalProxies?: number | undefined;
        tvRelaySlots?: number | undefined;
        tvRelayClients?: number | undefined;
        tvRelayProxies?: number | undefined;
        tvRelayAddress?: number | undefined;
        tvRelayPort?: number | undefined;
        tvRelaySteamid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
        flags?: number | undefined;
    } & Record<Exclude<keyof I, keyof ServerHltvInfo>, never>>(object: I): ServerHltvInfo;
};
export declare const IpAddressMask: {
    encode(message: IpAddressMask, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): IpAddressMask;
    fromPartial<I extends {
        a?: number | undefined;
        b?: number | undefined;
        c?: number | undefined;
        d?: number | undefined;
        bits?: number | undefined;
        token?: number | undefined;
    } & {
        a?: number | undefined;
        b?: number | undefined;
        c?: number | undefined;
        d?: number | undefined;
        bits?: number | undefined;
        token?: number | undefined;
    } & Record<Exclude<keyof I, keyof IpAddressMask>, never>>(object: I): IpAddressMask;
};
export declare const CMsgCsgoSteamUserStatChange: {
    encode(message: CMsgCsgoSteamUserStatChange, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgCsgoSteamUserStatChange;
    fromPartial<I extends {
        ecsgosteamuserstat?: number | undefined;
        delta?: number | undefined;
        absolute?: boolean | undefined;
    } & {
        ecsgosteamuserstat?: number | undefined;
        delta?: number | undefined;
        absolute?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CMsgCsgoSteamUserStatChange>, never>>(object: I): CMsgCsgoSteamUserStatChange;
};
export declare const XpProgressData: {
    encode(message: XpProgressData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): XpProgressData;
    fromPartial<I extends {
        xpPoints?: number | undefined;
        xpCategory?: number | undefined;
    } & {
        xpPoints?: number | undefined;
        xpCategory?: number | undefined;
    } & Record<Exclude<keyof I, keyof XpProgressData>, never>>(object: I): XpProgressData;
};
export declare const MatchEndItemUpdates: {
    encode(message: MatchEndItemUpdates, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): MatchEndItemUpdates;
    fromPartial<I extends {
        itemId?: string | number | Long.Long | undefined;
        itemAttrDefidx?: number | undefined;
        itemAttrDeltaValue?: number | undefined;
    } & {
        itemId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["itemId"], keyof Long.Long>, never>) | undefined;
        itemAttrDefidx?: number | undefined;
        itemAttrDeltaValue?: number | undefined;
    } & Record<Exclude<keyof I, keyof MatchEndItemUpdates>, never>>(object: I): MatchEndItemUpdates;
};
export declare const ScoreLeaderboardData: {
    encode(message: ScoreLeaderboardData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): ScoreLeaderboardData;
    fromPartial<I extends {
        questId?: string | number | Long.Long | undefined;
        score?: number | undefined;
        accountentries?: {
            accountid?: number | undefined;
            entries?: {
                tag?: number | undefined;
                val?: number | undefined;
            }[] | undefined;
        }[] | undefined;
        matchentries?: {
            tag?: number | undefined;
            val?: number | undefined;
        }[] | undefined;
    } & {
        questId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["questId"], keyof Long.Long>, never>) | undefined;
        score?: number | undefined;
        accountentries?: ({
            accountid?: number | undefined;
            entries?: {
                tag?: number | undefined;
                val?: number | undefined;
            }[] | undefined;
        }[] & ({
            accountid?: number | undefined;
            entries?: {
                tag?: number | undefined;
                val?: number | undefined;
            }[] | undefined;
        } & {
            accountid?: number | undefined;
            entries?: ({
                tag?: number | undefined;
                val?: number | undefined;
            }[] & ({
                tag?: number | undefined;
                val?: number | undefined;
            } & {
                tag?: number | undefined;
                val?: number | undefined;
            } & Record<Exclude<keyof I["accountentries"][number]["entries"][number], keyof ScoreLeaderboardData_Entry>, never>)[] & Record<Exclude<keyof I["accountentries"][number]["entries"], keyof {
                tag?: number | undefined;
                val?: number | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["accountentries"][number], keyof ScoreLeaderboardData_AccountEntries>, never>)[] & Record<Exclude<keyof I["accountentries"], keyof {
            accountid?: number | undefined;
            entries?: {
                tag?: number | undefined;
                val?: number | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        matchentries?: ({
            tag?: number | undefined;
            val?: number | undefined;
        }[] & ({
            tag?: number | undefined;
            val?: number | undefined;
        } & {
            tag?: number | undefined;
            val?: number | undefined;
        } & Record<Exclude<keyof I["matchentries"][number], keyof ScoreLeaderboardData_Entry>, never>)[] & Record<Exclude<keyof I["matchentries"], keyof {
            tag?: number | undefined;
            val?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof ScoreLeaderboardData>, never>>(object: I): ScoreLeaderboardData;
};
export declare const ScoreLeaderboardData_Entry: {
    encode(message: ScoreLeaderboardData_Entry, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): ScoreLeaderboardData_Entry;
    fromPartial<I extends {
        tag?: number | undefined;
        val?: number | undefined;
    } & {
        tag?: number | undefined;
        val?: number | undefined;
    } & Record<Exclude<keyof I, keyof ScoreLeaderboardData_Entry>, never>>(object: I): ScoreLeaderboardData_Entry;
};
export declare const ScoreLeaderboardData_AccountEntries: {
    encode(message: ScoreLeaderboardData_AccountEntries, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): ScoreLeaderboardData_AccountEntries;
    fromPartial<I extends {
        accountid?: number | undefined;
        entries?: {
            tag?: number | undefined;
            val?: number | undefined;
        }[] | undefined;
    } & {
        accountid?: number | undefined;
        entries?: ({
            tag?: number | undefined;
            val?: number | undefined;
        }[] & ({
            tag?: number | undefined;
            val?: number | undefined;
        } & {
            tag?: number | undefined;
            val?: number | undefined;
        } & Record<Exclude<keyof I["entries"][number], keyof ScoreLeaderboardData_Entry>, never>)[] & Record<Exclude<keyof I["entries"], keyof {
            tag?: number | undefined;
            val?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof ScoreLeaderboardData_AccountEntries>, never>>(object: I): ScoreLeaderboardData_AccountEntries;
};
export declare const PlayerQuestData: {
    encode(message: PlayerQuestData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): PlayerQuestData;
    fromPartial<I extends {
        questerAccountId?: number | undefined;
        questItemData?: {
            questId?: string | number | Long.Long | undefined;
            questNormalPointsEarned?: number | undefined;
            questBonusPointsEarned?: number | undefined;
        }[] | undefined;
        xpProgressData?: {
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        }[] | undefined;
        timePlayed?: number | undefined;
        mmGameMode?: number | undefined;
        itemUpdates?: {
            itemId?: string | number | Long.Long | undefined;
            itemAttrDefidx?: number | undefined;
            itemAttrDeltaValue?: number | undefined;
        }[] | undefined;
        operationPointsEligible?: boolean | undefined;
        userstatchanges?: {
            ecsgosteamuserstat?: number | undefined;
            delta?: number | undefined;
            absolute?: boolean | undefined;
        }[] | undefined;
    } & {
        questerAccountId?: number | undefined;
        questItemData?: ({
            questId?: string | number | Long.Long | undefined;
            questNormalPointsEarned?: number | undefined;
            questBonusPointsEarned?: number | undefined;
        }[] & ({
            questId?: string | number | Long.Long | undefined;
            questNormalPointsEarned?: number | undefined;
            questBonusPointsEarned?: number | undefined;
        } & {
            questId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["questItemData"][number]["questId"], keyof Long.Long>, never>) | undefined;
            questNormalPointsEarned?: number | undefined;
            questBonusPointsEarned?: number | undefined;
        } & Record<Exclude<keyof I["questItemData"][number], keyof PlayerQuestData_QuestItemData>, never>)[] & Record<Exclude<keyof I["questItemData"], keyof {
            questId?: string | number | Long.Long | undefined;
            questNormalPointsEarned?: number | undefined;
            questBonusPointsEarned?: number | undefined;
        }[]>, never>) | undefined;
        xpProgressData?: ({
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        }[] & ({
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        } & {
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        } & Record<Exclude<keyof I["xpProgressData"][number], keyof XpProgressData>, never>)[] & Record<Exclude<keyof I["xpProgressData"], keyof {
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        }[]>, never>) | undefined;
        timePlayed?: number | undefined;
        mmGameMode?: number | undefined;
        itemUpdates?: ({
            itemId?: string | number | Long.Long | undefined;
            itemAttrDefidx?: number | undefined;
            itemAttrDeltaValue?: number | undefined;
        }[] & ({
            itemId?: string | number | Long.Long | undefined;
            itemAttrDefidx?: number | undefined;
            itemAttrDeltaValue?: number | undefined;
        } & {
            itemId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["itemUpdates"][number]["itemId"], keyof Long.Long>, never>) | undefined;
            itemAttrDefidx?: number | undefined;
            itemAttrDeltaValue?: number | undefined;
        } & Record<Exclude<keyof I["itemUpdates"][number], keyof MatchEndItemUpdates>, never>)[] & Record<Exclude<keyof I["itemUpdates"], keyof {
            itemId?: string | number | Long.Long | undefined;
            itemAttrDefidx?: number | undefined;
            itemAttrDeltaValue?: number | undefined;
        }[]>, never>) | undefined;
        operationPointsEligible?: boolean | undefined;
        userstatchanges?: ({
            ecsgosteamuserstat?: number | undefined;
            delta?: number | undefined;
            absolute?: boolean | undefined;
        }[] & ({
            ecsgosteamuserstat?: number | undefined;
            delta?: number | undefined;
            absolute?: boolean | undefined;
        } & {
            ecsgosteamuserstat?: number | undefined;
            delta?: number | undefined;
            absolute?: boolean | undefined;
        } & Record<Exclude<keyof I["userstatchanges"][number], keyof CMsgCsgoSteamUserStatChange>, never>)[] & Record<Exclude<keyof I["userstatchanges"], keyof {
            ecsgosteamuserstat?: number | undefined;
            delta?: number | undefined;
            absolute?: boolean | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PlayerQuestData>, never>>(object: I): PlayerQuestData;
};
export declare const PlayerQuestData_QuestItemData: {
    encode(message: PlayerQuestData_QuestItemData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): PlayerQuestData_QuestItemData;
    fromPartial<I extends {
        questId?: string | number | Long.Long | undefined;
        questNormalPointsEarned?: number | undefined;
        questBonusPointsEarned?: number | undefined;
    } & {
        questId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["questId"], keyof Long.Long>, never>) | undefined;
        questNormalPointsEarned?: number | undefined;
        questBonusPointsEarned?: number | undefined;
    } & Record<Exclude<keyof I, keyof PlayerQuestData_QuestItemData>, never>>(object: I): PlayerQuestData_QuestItemData;
};
export declare const DeepPlayerStatsEntry: {
    encode(message: DeepPlayerStatsEntry, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): DeepPlayerStatsEntry;
    fromPartial<I extends {
        accountid?: number | undefined;
        matchId?: string | number | Long.Long | undefined;
        mmGameMode?: number | undefined;
        mapid?: number | undefined;
        bStartingCt?: boolean | undefined;
        matchOutcome?: number | undefined;
        roundsWon?: number | undefined;
        roundsLost?: number | undefined;
        statScore?: number | undefined;
        statDeaths?: number | undefined;
        statMvps?: number | undefined;
        enemyKills?: number | undefined;
        enemyHeadshots?: number | undefined;
        enemy2ks?: number | undefined;
        enemy3ks?: number | undefined;
        enemy4ks?: number | undefined;
        totalDamage?: number | undefined;
        engagementsEntryCount?: number | undefined;
        engagementsEntryWins?: number | undefined;
        engagements1v1Count?: number | undefined;
        engagements1v1Wins?: number | undefined;
        engagements1v2Count?: number | undefined;
        engagements1v2Wins?: number | undefined;
        utilityCount?: number | undefined;
        utilitySuccess?: number | undefined;
        flashCount?: number | undefined;
        flashSuccess?: number | undefined;
        mates?: number[] | undefined;
    } & {
        accountid?: number | undefined;
        matchId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchId"], keyof Long.Long>, never>) | undefined;
        mmGameMode?: number | undefined;
        mapid?: number | undefined;
        bStartingCt?: boolean | undefined;
        matchOutcome?: number | undefined;
        roundsWon?: number | undefined;
        roundsLost?: number | undefined;
        statScore?: number | undefined;
        statDeaths?: number | undefined;
        statMvps?: number | undefined;
        enemyKills?: number | undefined;
        enemyHeadshots?: number | undefined;
        enemy2ks?: number | undefined;
        enemy3ks?: number | undefined;
        enemy4ks?: number | undefined;
        totalDamage?: number | undefined;
        engagementsEntryCount?: number | undefined;
        engagementsEntryWins?: number | undefined;
        engagements1v1Count?: number | undefined;
        engagements1v1Wins?: number | undefined;
        engagements1v2Count?: number | undefined;
        engagements1v2Wins?: number | undefined;
        utilityCount?: number | undefined;
        utilitySuccess?: number | undefined;
        flashCount?: number | undefined;
        flashSuccess?: number | undefined;
        mates?: (number[] & number[] & Record<Exclude<keyof I["mates"], keyof number[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof DeepPlayerStatsEntry>, never>>(object: I): DeepPlayerStatsEntry;
};
export declare const DeepPlayerMatchEvent: {
    encode(message: DeepPlayerMatchEvent, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): DeepPlayerMatchEvent;
    fromPartial<I extends {
        accountid?: number | undefined;
        matchId?: string | number | Long.Long | undefined;
        eventId?: number | undefined;
        eventType?: number | undefined;
        bPlayingCt?: boolean | undefined;
        userPosX?: number | undefined;
        userPosY?: number | undefined;
        userPosZ?: number | undefined;
        userDefidx?: number | undefined;
        otherPosX?: number | undefined;
        otherPosY?: number | undefined;
        otherPosZ?: number | undefined;
        otherDefidx?: number | undefined;
        eventData?: number | undefined;
    } & {
        accountid?: number | undefined;
        matchId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchId"], keyof Long.Long>, never>) | undefined;
        eventId?: number | undefined;
        eventType?: number | undefined;
        bPlayingCt?: boolean | undefined;
        userPosX?: number | undefined;
        userPosY?: number | undefined;
        userPosZ?: number | undefined;
        userDefidx?: number | undefined;
        otherPosX?: number | undefined;
        otherPosY?: number | undefined;
        otherPosZ?: number | undefined;
        otherDefidx?: number | undefined;
        eventData?: number | undefined;
    } & Record<Exclude<keyof I, keyof DeepPlayerMatchEvent>, never>>(object: I): DeepPlayerMatchEvent;
};
export declare const CMsgGCServerQuestUpdateData: {
    encode(message: CMsgGCServerQuestUpdateData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCServerQuestUpdateData;
    fromPartial<I extends {
        playerQuestData?: {
            questerAccountId?: number | undefined;
            questItemData?: {
                questId?: string | number | Long.Long | undefined;
                questNormalPointsEarned?: number | undefined;
                questBonusPointsEarned?: number | undefined;
            }[] | undefined;
            xpProgressData?: {
                xpPoints?: number | undefined;
                xpCategory?: number | undefined;
            }[] | undefined;
            timePlayed?: number | undefined;
            mmGameMode?: number | undefined;
            itemUpdates?: {
                itemId?: string | number | Long.Long | undefined;
                itemAttrDefidx?: number | undefined;
                itemAttrDeltaValue?: number | undefined;
            }[] | undefined;
            operationPointsEligible?: boolean | undefined;
            userstatchanges?: {
                ecsgosteamuserstat?: number | undefined;
                delta?: number | undefined;
                absolute?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
        binaryData?: Uint8Array | undefined;
        mmGameMode?: number | undefined;
        missionlbsdata?: {
            questId?: string | number | Long.Long | undefined;
            score?: number | undefined;
            accountentries?: {
                accountid?: number | undefined;
                entries?: {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] | undefined;
            }[] | undefined;
            matchentries?: {
                tag?: number | undefined;
                val?: number | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        playerQuestData?: ({
            questerAccountId?: number | undefined;
            questItemData?: {
                questId?: string | number | Long.Long | undefined;
                questNormalPointsEarned?: number | undefined;
                questBonusPointsEarned?: number | undefined;
            }[] | undefined;
            xpProgressData?: {
                xpPoints?: number | undefined;
                xpCategory?: number | undefined;
            }[] | undefined;
            timePlayed?: number | undefined;
            mmGameMode?: number | undefined;
            itemUpdates?: {
                itemId?: string | number | Long.Long | undefined;
                itemAttrDefidx?: number | undefined;
                itemAttrDeltaValue?: number | undefined;
            }[] | undefined;
            operationPointsEligible?: boolean | undefined;
            userstatchanges?: {
                ecsgosteamuserstat?: number | undefined;
                delta?: number | undefined;
                absolute?: boolean | undefined;
            }[] | undefined;
        }[] & ({
            questerAccountId?: number | undefined;
            questItemData?: {
                questId?: string | number | Long.Long | undefined;
                questNormalPointsEarned?: number | undefined;
                questBonusPointsEarned?: number | undefined;
            }[] | undefined;
            xpProgressData?: {
                xpPoints?: number | undefined;
                xpCategory?: number | undefined;
            }[] | undefined;
            timePlayed?: number | undefined;
            mmGameMode?: number | undefined;
            itemUpdates?: {
                itemId?: string | number | Long.Long | undefined;
                itemAttrDefidx?: number | undefined;
                itemAttrDeltaValue?: number | undefined;
            }[] | undefined;
            operationPointsEligible?: boolean | undefined;
            userstatchanges?: {
                ecsgosteamuserstat?: number | undefined;
                delta?: number | undefined;
                absolute?: boolean | undefined;
            }[] | undefined;
        } & {
            questerAccountId?: number | undefined;
            questItemData?: ({
                questId?: string | number | Long.Long | undefined;
                questNormalPointsEarned?: number | undefined;
                questBonusPointsEarned?: number | undefined;
            }[] & ({
                questId?: string | number | Long.Long | undefined;
                questNormalPointsEarned?: number | undefined;
                questBonusPointsEarned?: number | undefined;
            } & {
                questId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["playerQuestData"][number]["questItemData"][number]["questId"], keyof Long.Long>, never>) | undefined;
                questNormalPointsEarned?: number | undefined;
                questBonusPointsEarned?: number | undefined;
            } & Record<Exclude<keyof I["playerQuestData"][number]["questItemData"][number], keyof PlayerQuestData_QuestItemData>, never>)[] & Record<Exclude<keyof I["playerQuestData"][number]["questItemData"], keyof {
                questId?: string | number | Long.Long | undefined;
                questNormalPointsEarned?: number | undefined;
                questBonusPointsEarned?: number | undefined;
            }[]>, never>) | undefined;
            xpProgressData?: ({
                xpPoints?: number | undefined;
                xpCategory?: number | undefined;
            }[] & ({
                xpPoints?: number | undefined;
                xpCategory?: number | undefined;
            } & {
                xpPoints?: number | undefined;
                xpCategory?: number | undefined;
            } & Record<Exclude<keyof I["playerQuestData"][number]["xpProgressData"][number], keyof XpProgressData>, never>)[] & Record<Exclude<keyof I["playerQuestData"][number]["xpProgressData"], keyof {
                xpPoints?: number | undefined;
                xpCategory?: number | undefined;
            }[]>, never>) | undefined;
            timePlayed?: number | undefined;
            mmGameMode?: number | undefined;
            itemUpdates?: ({
                itemId?: string | number | Long.Long | undefined;
                itemAttrDefidx?: number | undefined;
                itemAttrDeltaValue?: number | undefined;
            }[] & ({
                itemId?: string | number | Long.Long | undefined;
                itemAttrDefidx?: number | undefined;
                itemAttrDeltaValue?: number | undefined;
            } & {
                itemId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["playerQuestData"][number]["itemUpdates"][number]["itemId"], keyof Long.Long>, never>) | undefined;
                itemAttrDefidx?: number | undefined;
                itemAttrDeltaValue?: number | undefined;
            } & Record<Exclude<keyof I["playerQuestData"][number]["itemUpdates"][number], keyof MatchEndItemUpdates>, never>)[] & Record<Exclude<keyof I["playerQuestData"][number]["itemUpdates"], keyof {
                itemId?: string | number | Long.Long | undefined;
                itemAttrDefidx?: number | undefined;
                itemAttrDeltaValue?: number | undefined;
            }[]>, never>) | undefined;
            operationPointsEligible?: boolean | undefined;
            userstatchanges?: ({
                ecsgosteamuserstat?: number | undefined;
                delta?: number | undefined;
                absolute?: boolean | undefined;
            }[] & ({
                ecsgosteamuserstat?: number | undefined;
                delta?: number | undefined;
                absolute?: boolean | undefined;
            } & {
                ecsgosteamuserstat?: number | undefined;
                delta?: number | undefined;
                absolute?: boolean | undefined;
            } & Record<Exclude<keyof I["playerQuestData"][number]["userstatchanges"][number], keyof CMsgCsgoSteamUserStatChange>, never>)[] & Record<Exclude<keyof I["playerQuestData"][number]["userstatchanges"], keyof {
                ecsgosteamuserstat?: number | undefined;
                delta?: number | undefined;
                absolute?: boolean | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["playerQuestData"][number], keyof PlayerQuestData>, never>)[] & Record<Exclude<keyof I["playerQuestData"], keyof {
            questerAccountId?: number | undefined;
            questItemData?: {
                questId?: string | number | Long.Long | undefined;
                questNormalPointsEarned?: number | undefined;
                questBonusPointsEarned?: number | undefined;
            }[] | undefined;
            xpProgressData?: {
                xpPoints?: number | undefined;
                xpCategory?: number | undefined;
            }[] | undefined;
            timePlayed?: number | undefined;
            mmGameMode?: number | undefined;
            itemUpdates?: {
                itemId?: string | number | Long.Long | undefined;
                itemAttrDefidx?: number | undefined;
                itemAttrDeltaValue?: number | undefined;
            }[] | undefined;
            operationPointsEligible?: boolean | undefined;
            userstatchanges?: {
                ecsgosteamuserstat?: number | undefined;
                delta?: number | undefined;
                absolute?: boolean | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        binaryData?: Uint8Array | undefined;
        mmGameMode?: number | undefined;
        missionlbsdata?: ({
            questId?: string | number | Long.Long | undefined;
            score?: number | undefined;
            accountentries?: {
                accountid?: number | undefined;
                entries?: {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] | undefined;
            }[] | undefined;
            matchentries?: {
                tag?: number | undefined;
                val?: number | undefined;
            }[] | undefined;
        } & {
            questId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["missionlbsdata"]["questId"], keyof Long.Long>, never>) | undefined;
            score?: number | undefined;
            accountentries?: ({
                accountid?: number | undefined;
                entries?: {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] | undefined;
            }[] & ({
                accountid?: number | undefined;
                entries?: {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] | undefined;
            } & {
                accountid?: number | undefined;
                entries?: ({
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] & ({
                    tag?: number | undefined;
                    val?: number | undefined;
                } & {
                    tag?: number | undefined;
                    val?: number | undefined;
                } & Record<Exclude<keyof I["missionlbsdata"]["accountentries"][number]["entries"][number], keyof ScoreLeaderboardData_Entry>, never>)[] & Record<Exclude<keyof I["missionlbsdata"]["accountentries"][number]["entries"], keyof {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["missionlbsdata"]["accountentries"][number], keyof ScoreLeaderboardData_AccountEntries>, never>)[] & Record<Exclude<keyof I["missionlbsdata"]["accountentries"], keyof {
                accountid?: number | undefined;
                entries?: {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            matchentries?: ({
                tag?: number | undefined;
                val?: number | undefined;
            }[] & ({
                tag?: number | undefined;
                val?: number | undefined;
            } & {
                tag?: number | undefined;
                val?: number | undefined;
            } & Record<Exclude<keyof I["missionlbsdata"]["matchentries"][number], keyof ScoreLeaderboardData_Entry>, never>)[] & Record<Exclude<keyof I["missionlbsdata"]["matchentries"], keyof {
                tag?: number | undefined;
                val?: number | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["missionlbsdata"], keyof ScoreLeaderboardData>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCServerQuestUpdateData>, never>>(object: I): CMsgGCServerQuestUpdateData;
};
export declare const CMsgGCCStrike15V2MatchmakingGCOperationalStats: {
    encode(message: CMsgGCCStrike15V2MatchmakingGCOperationalStats, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingGCOperationalStats;
    fromPartial<I extends {
        packetid?: number | undefined;
        namekeys?: {
            name?: string | undefined;
            idkey?: number | undefined;
        }[] | undefined;
        packets?: {
            packetid?: number | undefined;
            mstimestamp?: number | undefined;
            values?: {
                idkey?: number | undefined;
                values?: number[] | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        packetid?: number | undefined;
        namekeys?: ({
            name?: string | undefined;
            idkey?: number | undefined;
        }[] & ({
            name?: string | undefined;
            idkey?: number | undefined;
        } & {
            name?: string | undefined;
            idkey?: number | undefined;
        } & Record<Exclude<keyof I["namekeys"][number], keyof OperationalStatisticDescription>, never>)[] & Record<Exclude<keyof I["namekeys"], keyof {
            name?: string | undefined;
            idkey?: number | undefined;
        }[]>, never>) | undefined;
        packets?: ({
            packetid?: number | undefined;
            mstimestamp?: number | undefined;
            values?: {
                idkey?: number | undefined;
                values?: number[] | undefined;
            }[] | undefined;
        }[] & ({
            packetid?: number | undefined;
            mstimestamp?: number | undefined;
            values?: {
                idkey?: number | undefined;
                values?: number[] | undefined;
            }[] | undefined;
        } & {
            packetid?: number | undefined;
            mstimestamp?: number | undefined;
            values?: ({
                idkey?: number | undefined;
                values?: number[] | undefined;
            }[] & ({
                idkey?: number | undefined;
                values?: number[] | undefined;
            } & {
                idkey?: number | undefined;
                values?: (number[] & number[] & Record<Exclude<keyof I["packets"][number]["values"][number]["values"], keyof number[]>, never>) | undefined;
            } & Record<Exclude<keyof I["packets"][number]["values"][number], keyof OperationalStatisticElement>, never>)[] & Record<Exclude<keyof I["packets"][number]["values"], keyof {
                idkey?: number | undefined;
                values?: number[] | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["packets"][number], keyof OperationalStatisticsPacket>, never>)[] & Record<Exclude<keyof I["packets"], keyof {
            packetid?: number | undefined;
            mstimestamp?: number | undefined;
            values?: {
                idkey?: number | undefined;
                values?: number[] | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingGCOperationalStats>, never>>(object: I): CMsgGCCStrike15V2MatchmakingGCOperationalStats;
};
export declare const CMsgGCCStrike15V2MatchmakingGC2ServerConfirm: {
    encode(message: CMsgGCCStrike15V2MatchmakingGC2ServerConfirm, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingGC2ServerConfirm;
    fromPartial<I extends {
        token?: number | undefined;
        stamp?: number | undefined;
        exchange?: string | number | Long.Long | undefined;
    } & {
        token?: number | undefined;
        stamp?: number | undefined;
        exchange?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["exchange"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingGC2ServerConfirm>, never>>(object: I): CMsgGCCStrike15V2MatchmakingGC2ServerConfirm;
};
export declare const CMsgGCCStrike15V2GC2ServerReservationUpdate: {
    encode(message: CMsgGCCStrike15V2GC2ServerReservationUpdate, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GC2ServerReservationUpdate;
    fromPartial<I extends {
        viewersExternalTotal?: number | undefined;
        viewersExternalSteam?: number | undefined;
    } & {
        viewersExternalTotal?: number | undefined;
        viewersExternalSteam?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GC2ServerReservationUpdate>, never>>(object: I): CMsgGCCStrike15V2GC2ServerReservationUpdate;
};
export declare const CMsgGCCStrike15V2MatchmakingStart: {
    encode(message: CMsgGCCStrike15V2MatchmakingStart, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingStart;
    fromPartial<I extends {
        accountIds?: number[] | undefined;
        gameType?: number | undefined;
        ticketData?: string | undefined;
        clientVersion?: number | undefined;
        tournamentMatch?: {
            eventId?: number | undefined;
            teamIdCt?: number | undefined;
            teamIdT?: number | undefined;
            eventStageId?: number | undefined;
        } | undefined;
        primeOnly?: boolean | undefined;
        tvControl?: number | undefined;
        lobbyId?: string | number | Long.Long | undefined;
    } & {
        accountIds?: (number[] & number[] & Record<Exclude<keyof I["accountIds"], keyof number[]>, never>) | undefined;
        gameType?: number | undefined;
        ticketData?: string | undefined;
        clientVersion?: number | undefined;
        tournamentMatch?: ({
            eventId?: number | undefined;
            teamIdCt?: number | undefined;
            teamIdT?: number | undefined;
            eventStageId?: number | undefined;
        } & {
            eventId?: number | undefined;
            teamIdCt?: number | undefined;
            teamIdT?: number | undefined;
            eventStageId?: number | undefined;
        } & Record<Exclude<keyof I["tournamentMatch"], keyof TournamentMatchSetup>, never>) | undefined;
        primeOnly?: boolean | undefined;
        tvControl?: number | undefined;
        lobbyId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["lobbyId"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingStart>, never>>(object: I): CMsgGCCStrike15V2MatchmakingStart;
};
export declare const CMsgGCCStrike15V2MatchmakingStop: {
    encode(message: CMsgGCCStrike15V2MatchmakingStop, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingStop;
    fromPartial<I extends {
        abandon?: number | undefined;
    } & {
        abandon?: number | undefined;
    } & Record<Exclude<keyof I, "abandon">, never>>(object: I): CMsgGCCStrike15V2MatchmakingStop;
};
export declare const CMsgGCCStrike15V2MatchmakingClient2ServerPing: {
    encode(message: CMsgGCCStrike15V2MatchmakingClient2ServerPing, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingClient2ServerPing;
    fromPartial<I extends {
        gameserverpings?: {
            ping?: number | undefined;
            ip?: number | undefined;
            instances?: number | undefined;
        }[] | undefined;
        offsetIndex?: number | undefined;
        finalBatch?: number | undefined;
        dataCenterPings?: {
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        }[] | undefined;
        maxPing?: number | undefined;
        testToken?: number | undefined;
    } & {
        gameserverpings?: ({
            ping?: number | undefined;
            ip?: number | undefined;
            instances?: number | undefined;
        }[] & ({
            ping?: number | undefined;
            ip?: number | undefined;
            instances?: number | undefined;
        } & {
            ping?: number | undefined;
            ip?: number | undefined;
            instances?: number | undefined;
        } & Record<Exclude<keyof I["gameserverpings"][number], keyof GameServerPing>, never>)[] & Record<Exclude<keyof I["gameserverpings"], keyof {
            ping?: number | undefined;
            ip?: number | undefined;
            instances?: number | undefined;
        }[]>, never>) | undefined;
        offsetIndex?: number | undefined;
        finalBatch?: number | undefined;
        dataCenterPings?: ({
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        }[] & ({
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        } & {
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        } & Record<Exclude<keyof I["dataCenterPings"][number], keyof DataCenterPing>, never>)[] & Record<Exclude<keyof I["dataCenterPings"], keyof {
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        }[]>, never>) | undefined;
        maxPing?: number | undefined;
        testToken?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingClient2ServerPing>, never>>(object: I): CMsgGCCStrike15V2MatchmakingClient2ServerPing;
};
export declare const CMsgGCCStrike15V2MatchmakingGC2ClientUpdate: {
    encode(message: CMsgGCCStrike15V2MatchmakingGC2ClientUpdate, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingGC2ClientUpdate;
    fromPartial<I extends {
        matchmaking?: number | undefined;
        waitingAccountIdSessions?: number[] | undefined;
        error?: string | undefined;
        ongoingmatchAccountIdSessions?: number[] | undefined;
        globalStats?: {
            playersOnline?: number | undefined;
            serversOnline?: number | undefined;
            playersSearching?: number | undefined;
            serversAvailable?: number | undefined;
            ongoingMatches?: number | undefined;
            searchTimeAvg?: number | undefined;
            searchStatistics?: {
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            }[] | undefined;
            mainPostUrl?: string | undefined;
            requiredAppidVersion?: number | undefined;
            pricesheetVersion?: number | undefined;
            twitchStreamsVersion?: number | undefined;
            activeTournamentEventid?: number | undefined;
            activeSurveyId?: number | undefined;
            rtime32Cur?: number | undefined;
            rtime32EventStart?: number | undefined;
        } | undefined;
        failpingAccountIdSessions?: number[] | undefined;
        penaltyAccountIdSessions?: number[] | undefined;
        failreadyAccountIdSessions?: number[] | undefined;
        vacbannedAccountIdSessions?: number[] | undefined;
        serverIpaddressMask?: {
            a?: number | undefined;
            b?: number | undefined;
            c?: number | undefined;
            d?: number | undefined;
            bits?: number | undefined;
            token?: number | undefined;
        } | undefined;
        notes?: {
            type?: number | undefined;
            regionId?: number | undefined;
            regionR?: number | undefined;
            distance?: number | undefined;
        }[] | undefined;
        penaltyAccountIdSessionsGreen?: number[] | undefined;
        insufficientlevelSessions?: number[] | undefined;
        vsncheckAccountIdSessions?: number[] | undefined;
        launcherMismatchSessions?: number[] | undefined;
        insecureAccountIdSessions?: number[] | undefined;
    } & {
        matchmaking?: number | undefined;
        waitingAccountIdSessions?: (number[] & number[] & Record<Exclude<keyof I["waitingAccountIdSessions"], keyof number[]>, never>) | undefined;
        error?: string | undefined;
        ongoingmatchAccountIdSessions?: (number[] & number[] & Record<Exclude<keyof I["ongoingmatchAccountIdSessions"], keyof number[]>, never>) | undefined;
        globalStats?: ({
            playersOnline?: number | undefined;
            serversOnline?: number | undefined;
            playersSearching?: number | undefined;
            serversAvailable?: number | undefined;
            ongoingMatches?: number | undefined;
            searchTimeAvg?: number | undefined;
            searchStatistics?: {
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            }[] | undefined;
            mainPostUrl?: string | undefined;
            requiredAppidVersion?: number | undefined;
            pricesheetVersion?: number | undefined;
            twitchStreamsVersion?: number | undefined;
            activeTournamentEventid?: number | undefined;
            activeSurveyId?: number | undefined;
            rtime32Cur?: number | undefined;
            rtime32EventStart?: number | undefined;
        } & {
            playersOnline?: number | undefined;
            serversOnline?: number | undefined;
            playersSearching?: number | undefined;
            serversAvailable?: number | undefined;
            ongoingMatches?: number | undefined;
            searchTimeAvg?: number | undefined;
            searchStatistics?: ({
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            }[] & ({
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            } & {
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            } & Record<Exclude<keyof I["globalStats"]["searchStatistics"][number], keyof DetailedSearchStatistic>, never>)[] & Record<Exclude<keyof I["globalStats"]["searchStatistics"], keyof {
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            }[]>, never>) | undefined;
            mainPostUrl?: string | undefined;
            requiredAppidVersion?: number | undefined;
            pricesheetVersion?: number | undefined;
            twitchStreamsVersion?: number | undefined;
            activeTournamentEventid?: number | undefined;
            activeSurveyId?: number | undefined;
            rtime32Cur?: number | undefined;
            rtime32EventStart?: number | undefined;
        } & Record<Exclude<keyof I["globalStats"], keyof GlobalStatistics>, never>) | undefined;
        failpingAccountIdSessions?: (number[] & number[] & Record<Exclude<keyof I["failpingAccountIdSessions"], keyof number[]>, never>) | undefined;
        penaltyAccountIdSessions?: (number[] & number[] & Record<Exclude<keyof I["penaltyAccountIdSessions"], keyof number[]>, never>) | undefined;
        failreadyAccountIdSessions?: (number[] & number[] & Record<Exclude<keyof I["failreadyAccountIdSessions"], keyof number[]>, never>) | undefined;
        vacbannedAccountIdSessions?: (number[] & number[] & Record<Exclude<keyof I["vacbannedAccountIdSessions"], keyof number[]>, never>) | undefined;
        serverIpaddressMask?: ({
            a?: number | undefined;
            b?: number | undefined;
            c?: number | undefined;
            d?: number | undefined;
            bits?: number | undefined;
            token?: number | undefined;
        } & {
            a?: number | undefined;
            b?: number | undefined;
            c?: number | undefined;
            d?: number | undefined;
            bits?: number | undefined;
            token?: number | undefined;
        } & Record<Exclude<keyof I["serverIpaddressMask"], keyof IpAddressMask>, never>) | undefined;
        notes?: ({
            type?: number | undefined;
            regionId?: number | undefined;
            regionR?: number | undefined;
            distance?: number | undefined;
        }[] & ({
            type?: number | undefined;
            regionId?: number | undefined;
            regionR?: number | undefined;
            distance?: number | undefined;
        } & {
            type?: number | undefined;
            regionId?: number | undefined;
            regionR?: number | undefined;
            distance?: number | undefined;
        } & Record<Exclude<keyof I["notes"][number], keyof CMsgGCCStrike15V2MatchmakingGC2ClientUpdate_Note>, never>)[] & Record<Exclude<keyof I["notes"], keyof {
            type?: number | undefined;
            regionId?: number | undefined;
            regionR?: number | undefined;
            distance?: number | undefined;
        }[]>, never>) | undefined;
        penaltyAccountIdSessionsGreen?: (number[] & number[] & Record<Exclude<keyof I["penaltyAccountIdSessionsGreen"], keyof number[]>, never>) | undefined;
        insufficientlevelSessions?: (number[] & number[] & Record<Exclude<keyof I["insufficientlevelSessions"], keyof number[]>, never>) | undefined;
        vsncheckAccountIdSessions?: (number[] & number[] & Record<Exclude<keyof I["vsncheckAccountIdSessions"], keyof number[]>, never>) | undefined;
        launcherMismatchSessions?: (number[] & number[] & Record<Exclude<keyof I["launcherMismatchSessions"], keyof number[]>, never>) | undefined;
        insecureAccountIdSessions?: (number[] & number[] & Record<Exclude<keyof I["insecureAccountIdSessions"], keyof number[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingGC2ClientUpdate>, never>>(object: I): CMsgGCCStrike15V2MatchmakingGC2ClientUpdate;
};
export declare const CMsgGCCStrike15V2MatchmakingGC2ClientUpdate_Note: {
    encode(message: CMsgGCCStrike15V2MatchmakingGC2ClientUpdate_Note, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingGC2ClientUpdate_Note;
    fromPartial<I extends {
        type?: number | undefined;
        regionId?: number | undefined;
        regionR?: number | undefined;
        distance?: number | undefined;
    } & {
        type?: number | undefined;
        regionId?: number | undefined;
        regionR?: number | undefined;
        distance?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingGC2ClientUpdate_Note>, never>>(object: I): CMsgGCCStrike15V2MatchmakingGC2ClientUpdate_Note;
};
export declare const CDataGCCStrike15V2TournamentMatchDraft: {
    encode(message: CDataGCCStrike15V2TournamentMatchDraft, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CDataGCCStrike15V2TournamentMatchDraft;
    fromPartial<I extends {
        eventId?: number | undefined;
        eventStageId?: number | undefined;
        teamId0?: number | undefined;
        teamId1?: number | undefined;
        mapsCount?: number | undefined;
        mapsCurrent?: number | undefined;
        teamIdStart?: number | undefined;
        teamIdVeto1?: number | undefined;
        teamIdPickn?: number | undefined;
        drafts?: {
            mapid?: number | undefined;
            teamIdCt?: number | undefined;
        }[] | undefined;
    } & {
        eventId?: number | undefined;
        eventStageId?: number | undefined;
        teamId0?: number | undefined;
        teamId1?: number | undefined;
        mapsCount?: number | undefined;
        mapsCurrent?: number | undefined;
        teamIdStart?: number | undefined;
        teamIdVeto1?: number | undefined;
        teamIdPickn?: number | undefined;
        drafts?: ({
            mapid?: number | undefined;
            teamIdCt?: number | undefined;
        }[] & ({
            mapid?: number | undefined;
            teamIdCt?: number | undefined;
        } & {
            mapid?: number | undefined;
            teamIdCt?: number | undefined;
        } & Record<Exclude<keyof I["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["drafts"], keyof {
            mapid?: number | undefined;
            teamIdCt?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CDataGCCStrike15V2TournamentMatchDraft>, never>>(object: I): CDataGCCStrike15V2TournamentMatchDraft;
};
export declare const CDataGCCStrike15V2TournamentMatchDraft_Entry: {
    encode(message: CDataGCCStrike15V2TournamentMatchDraft_Entry, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CDataGCCStrike15V2TournamentMatchDraft_Entry;
    fromPartial<I extends {
        mapid?: number | undefined;
        teamIdCt?: number | undefined;
    } & {
        mapid?: number | undefined;
        teamIdCt?: number | undefined;
    } & Record<Exclude<keyof I, keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>>(object: I): CDataGCCStrike15V2TournamentMatchDraft_Entry;
};
export declare const CPreMatchInfoData: {
    encode(message: CPreMatchInfoData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CPreMatchInfoData;
    fromPartial<I extends {
        predictionsPct?: number | undefined;
        draft?: {
            eventId?: number | undefined;
            eventStageId?: number | undefined;
            teamId0?: number | undefined;
            teamId1?: number | undefined;
            mapsCount?: number | undefined;
            mapsCurrent?: number | undefined;
            teamIdStart?: number | undefined;
            teamIdVeto1?: number | undefined;
            teamIdPickn?: number | undefined;
            drafts?: {
                mapid?: number | undefined;
                teamIdCt?: number | undefined;
            }[] | undefined;
        } | undefined;
        stats?: {
            matchInfoIdxtxt?: number | undefined;
            matchInfoTxt?: string | undefined;
            matchInfoTeams?: string[] | undefined;
        }[] | undefined;
        wins?: number[] | undefined;
    } & {
        predictionsPct?: number | undefined;
        draft?: ({
            eventId?: number | undefined;
            eventStageId?: number | undefined;
            teamId0?: number | undefined;
            teamId1?: number | undefined;
            mapsCount?: number | undefined;
            mapsCurrent?: number | undefined;
            teamIdStart?: number | undefined;
            teamIdVeto1?: number | undefined;
            teamIdPickn?: number | undefined;
            drafts?: {
                mapid?: number | undefined;
                teamIdCt?: number | undefined;
            }[] | undefined;
        } & {
            eventId?: number | undefined;
            eventStageId?: number | undefined;
            teamId0?: number | undefined;
            teamId1?: number | undefined;
            mapsCount?: number | undefined;
            mapsCurrent?: number | undefined;
            teamIdStart?: number | undefined;
            teamIdVeto1?: number | undefined;
            teamIdPickn?: number | undefined;
            drafts?: ({
                mapid?: number | undefined;
                teamIdCt?: number | undefined;
            }[] & ({
                mapid?: number | undefined;
                teamIdCt?: number | undefined;
            } & {
                mapid?: number | undefined;
                teamIdCt?: number | undefined;
            } & Record<Exclude<keyof I["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["draft"]["drafts"], keyof {
                mapid?: number | undefined;
                teamIdCt?: number | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
        stats?: ({
            matchInfoIdxtxt?: number | undefined;
            matchInfoTxt?: string | undefined;
            matchInfoTeams?: string[] | undefined;
        }[] & ({
            matchInfoIdxtxt?: number | undefined;
            matchInfoTxt?: string | undefined;
            matchInfoTeams?: string[] | undefined;
        } & {
            matchInfoIdxtxt?: number | undefined;
            matchInfoTxt?: string | undefined;
            matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["stats"], keyof {
            matchInfoIdxtxt?: number | undefined;
            matchInfoTxt?: string | undefined;
            matchInfoTeams?: string[] | undefined;
        }[]>, never>) | undefined;
        wins?: (number[] & number[] & Record<Exclude<keyof I["wins"], keyof number[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CPreMatchInfoData>, never>>(object: I): CPreMatchInfoData;
};
export declare const CPreMatchInfoData_TeamStats: {
    encode(message: CPreMatchInfoData_TeamStats, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CPreMatchInfoData_TeamStats;
    fromPartial<I extends {
        matchInfoIdxtxt?: number | undefined;
        matchInfoTxt?: string | undefined;
        matchInfoTeams?: string[] | undefined;
    } & {
        matchInfoIdxtxt?: number | undefined;
        matchInfoTxt?: string | undefined;
        matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["matchInfoTeams"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CPreMatchInfoData_TeamStats>, never>>(object: I): CPreMatchInfoData_TeamStats;
};
export declare const CMsgGCCStrike15V2MatchmakingGC2ServerReserve: {
    encode(message: CMsgGCCStrike15V2MatchmakingGC2ServerReserve, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingGC2ServerReserve;
    fromPartial<I extends {
        accountIds?: number[] | undefined;
        gameType?: number | undefined;
        matchId?: string | number | Long.Long | undefined;
        serverVersion?: number | undefined;
        flags?: number | undefined;
        rankings?: {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[] | undefined;
        encryptionKey?: string | number | Long.Long | undefined;
        encryptionKeyPub?: string | number | Long.Long | undefined;
        partyIds?: number[] | undefined;
        whitelist?: {
            a?: number | undefined;
            b?: number | undefined;
            c?: number | undefined;
            d?: number | undefined;
            bits?: number | undefined;
            token?: number | undefined;
        }[] | undefined;
        tvMasterSteamid?: string | number | Long.Long | undefined;
        tournamentEvent?: {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } | undefined;
        tournamentTeams?: {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        tournamentCastersAccountIds?: number[] | undefined;
        tvRelaySteamid?: string | number | Long.Long | undefined;
        preMatchData?: {
            predictionsPct?: number | undefined;
            draft?: {
                eventId?: number | undefined;
                eventStageId?: number | undefined;
                teamId0?: number | undefined;
                teamId1?: number | undefined;
                mapsCount?: number | undefined;
                mapsCurrent?: number | undefined;
                teamIdStart?: number | undefined;
                teamIdVeto1?: number | undefined;
                teamIdPickn?: number | undefined;
                drafts?: {
                    mapid?: number | undefined;
                    teamIdCt?: number | undefined;
                }[] | undefined;
            } | undefined;
            stats?: {
                matchInfoIdxtxt?: number | undefined;
                matchInfoTxt?: string | undefined;
                matchInfoTeams?: string[] | undefined;
            }[] | undefined;
            wins?: number[] | undefined;
        } | undefined;
        rtime32EventStart?: number | undefined;
        tvControl?: number | undefined;
    } & {
        accountIds?: (number[] & number[] & Record<Exclude<keyof I["accountIds"], keyof number[]>, never>) | undefined;
        gameType?: number | undefined;
        matchId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchId"], keyof Long.Long>, never>) | undefined;
        serverVersion?: number | undefined;
        flags?: number | undefined;
        rankings?: ({
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[] & ({
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } & {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } & Record<Exclude<keyof I["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["rankings"], keyof {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[]>, never>) | undefined;
        encryptionKey?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["encryptionKey"], keyof Long.Long>, never>) | undefined;
        encryptionKeyPub?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
        partyIds?: (number[] & number[] & Record<Exclude<keyof I["partyIds"], keyof number[]>, never>) | undefined;
        whitelist?: ({
            a?: number | undefined;
            b?: number | undefined;
            c?: number | undefined;
            d?: number | undefined;
            bits?: number | undefined;
            token?: number | undefined;
        }[] & ({
            a?: number | undefined;
            b?: number | undefined;
            c?: number | undefined;
            d?: number | undefined;
            bits?: number | undefined;
            token?: number | undefined;
        } & {
            a?: number | undefined;
            b?: number | undefined;
            c?: number | undefined;
            d?: number | undefined;
            bits?: number | undefined;
            token?: number | undefined;
        } & Record<Exclude<keyof I["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["whitelist"], keyof {
            a?: number | undefined;
            b?: number | undefined;
            c?: number | undefined;
            d?: number | undefined;
            bits?: number | undefined;
            token?: number | undefined;
        }[]>, never>) | undefined;
        tvMasterSteamid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
        tournamentEvent?: ({
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } & {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } & Record<Exclude<keyof I["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
        tournamentTeams?: ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[] & ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        } & {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] & ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & Record<Exclude<keyof I["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["tournamentTeams"][number]["players"], keyof {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["tournamentTeams"], keyof {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
        tvRelaySteamid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
        preMatchData?: ({
            predictionsPct?: number | undefined;
            draft?: {
                eventId?: number | undefined;
                eventStageId?: number | undefined;
                teamId0?: number | undefined;
                teamId1?: number | undefined;
                mapsCount?: number | undefined;
                mapsCurrent?: number | undefined;
                teamIdStart?: number | undefined;
                teamIdVeto1?: number | undefined;
                teamIdPickn?: number | undefined;
                drafts?: {
                    mapid?: number | undefined;
                    teamIdCt?: number | undefined;
                }[] | undefined;
            } | undefined;
            stats?: {
                matchInfoIdxtxt?: number | undefined;
                matchInfoTxt?: string | undefined;
                matchInfoTeams?: string[] | undefined;
            }[] | undefined;
            wins?: number[] | undefined;
        } & {
            predictionsPct?: number | undefined;
            draft?: ({
                eventId?: number | undefined;
                eventStageId?: number | undefined;
                teamId0?: number | undefined;
                teamId1?: number | undefined;
                mapsCount?: number | undefined;
                mapsCurrent?: number | undefined;
                teamIdStart?: number | undefined;
                teamIdVeto1?: number | undefined;
                teamIdPickn?: number | undefined;
                drafts?: {
                    mapid?: number | undefined;
                    teamIdCt?: number | undefined;
                }[] | undefined;
            } & {
                eventId?: number | undefined;
                eventStageId?: number | undefined;
                teamId0?: number | undefined;
                teamId1?: number | undefined;
                mapsCount?: number | undefined;
                mapsCurrent?: number | undefined;
                teamIdStart?: number | undefined;
                teamIdVeto1?: number | undefined;
                teamIdPickn?: number | undefined;
                drafts?: ({
                    mapid?: number | undefined;
                    teamIdCt?: number | undefined;
                }[] & ({
                    mapid?: number | undefined;
                    teamIdCt?: number | undefined;
                } & {
                    mapid?: number | undefined;
                    teamIdCt?: number | undefined;
                } & Record<Exclude<keyof I["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["preMatchData"]["draft"]["drafts"], keyof {
                    mapid?: number | undefined;
                    teamIdCt?: number | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
            stats?: ({
                matchInfoIdxtxt?: number | undefined;
                matchInfoTxt?: string | undefined;
                matchInfoTeams?: string[] | undefined;
            }[] & ({
                matchInfoIdxtxt?: number | undefined;
                matchInfoTxt?: string | undefined;
                matchInfoTeams?: string[] | undefined;
            } & {
                matchInfoIdxtxt?: number | undefined;
                matchInfoTxt?: string | undefined;
                matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["preMatchData"]["stats"], keyof {
                matchInfoIdxtxt?: number | undefined;
                matchInfoTxt?: string | undefined;
                matchInfoTeams?: string[] | undefined;
            }[]>, never>) | undefined;
            wins?: (number[] & number[] & Record<Exclude<keyof I["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
        } & Record<Exclude<keyof I["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
        rtime32EventStart?: number | undefined;
        tvControl?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>>(object: I): CMsgGCCStrike15V2MatchmakingGC2ServerReserve;
};
export declare const CMsgGCCStrike15V2MatchmakingServerReservationResponse: {
    encode(message: CMsgGCCStrike15V2MatchmakingServerReservationResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingServerReservationResponse;
    fromPartial<I extends {
        reservationid?: string | number | Long.Long | undefined;
        reservation?: {
            accountIds?: number[] | undefined;
            gameType?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
            encryptionKey?: string | number | Long.Long | undefined;
            encryptionKeyPub?: string | number | Long.Long | undefined;
            partyIds?: number[] | undefined;
            whitelist?: {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] | undefined;
            tvMasterSteamid?: string | number | Long.Long | undefined;
            tournamentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            tournamentTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            tournamentCastersAccountIds?: number[] | undefined;
            tvRelaySteamid?: string | number | Long.Long | undefined;
            preMatchData?: {
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } | undefined;
        map?: string | undefined;
        gcReservationSent?: string | number | Long.Long | undefined;
        serverVersion?: number | undefined;
        tvInfo?: {
            tvUdpPort?: number | undefined;
            tvWatchKey?: string | number | Long.Long | undefined;
            tvSlots?: number | undefined;
            tvClients?: number | undefined;
            tvProxies?: number | undefined;
            tvTime?: number | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            tvMasterSteamid?: string | number | Long.Long | undefined;
            tvLocalSlots?: number | undefined;
            tvLocalClients?: number | undefined;
            tvLocalProxies?: number | undefined;
            tvRelaySlots?: number | undefined;
            tvRelayClients?: number | undefined;
            tvRelayProxies?: number | undefined;
            tvRelayAddress?: number | undefined;
            tvRelayPort?: number | undefined;
            tvRelaySteamid?: string | number | Long.Long | undefined;
            flags?: number | undefined;
        } | undefined;
        rewardPlayerAccounts?: number[] | undefined;
        idlePlayerAccounts?: number[] | undefined;
        rewardItemAttrDefIdx?: number | undefined;
        rewardItemAttrValue?: number | undefined;
        rewardItemAttrRewardIdx?: number | undefined;
        rewardDropList?: number | undefined;
        tournamentTag?: string | undefined;
        legacySteamdatagramPort?: number | undefined;
        steamdatagramRouting?: number | undefined;
        testToken?: number | undefined;
        flags?: number | undefined;
    } & {
        reservationid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["reservationid"], keyof Long.Long>, never>) | undefined;
        reservation?: ({
            accountIds?: number[] | undefined;
            gameType?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
            encryptionKey?: string | number | Long.Long | undefined;
            encryptionKeyPub?: string | number | Long.Long | undefined;
            partyIds?: number[] | undefined;
            whitelist?: {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] | undefined;
            tvMasterSteamid?: string | number | Long.Long | undefined;
            tournamentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            tournamentTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            tournamentCastersAccountIds?: number[] | undefined;
            tvRelaySteamid?: string | number | Long.Long | undefined;
            preMatchData?: {
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } & {
            accountIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
            gameType?: number | undefined;
            matchId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] & ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["reservation"]["rankings"], keyof {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[]>, never>) | undefined;
            encryptionKey?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
            encryptionKeyPub?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
            partyIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
            whitelist?: ({
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] & ({
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            } & {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["reservation"]["whitelist"], keyof {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[]>, never>) | undefined;
            tvMasterSteamid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
            tournamentEvent?: ({
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
            tournamentTeams?: ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] & ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } & {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number]["players"], keyof {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["reservation"]["tournamentTeams"], keyof {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
            tvRelaySteamid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
            preMatchData?: ({
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } & {
                predictionsPct?: number | undefined;
                draft?: ({
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } & {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: ({
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] & ({
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    } & {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    } & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                stats?: ({
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] & ({
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                } & {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                } & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"], keyof {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[]>, never>) | undefined;
                wins?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
            } & Record<Exclude<keyof I["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } & Record<Exclude<keyof I["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
        map?: string | undefined;
        gcReservationSent?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["gcReservationSent"], keyof Long.Long>, never>) | undefined;
        serverVersion?: number | undefined;
        tvInfo?: ({
            tvUdpPort?: number | undefined;
            tvWatchKey?: string | number | Long.Long | undefined;
            tvSlots?: number | undefined;
            tvClients?: number | undefined;
            tvProxies?: number | undefined;
            tvTime?: number | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            tvMasterSteamid?: string | number | Long.Long | undefined;
            tvLocalSlots?: number | undefined;
            tvLocalClients?: number | undefined;
            tvLocalProxies?: number | undefined;
            tvRelaySlots?: number | undefined;
            tvRelayClients?: number | undefined;
            tvRelayProxies?: number | undefined;
            tvRelayAddress?: number | undefined;
            tvRelayPort?: number | undefined;
            tvRelaySteamid?: string | number | Long.Long | undefined;
            flags?: number | undefined;
        } & {
            tvUdpPort?: number | undefined;
            tvWatchKey?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["tvInfo"]["tvWatchKey"], keyof Long.Long>, never>) | undefined;
            tvSlots?: number | undefined;
            tvClients?: number | undefined;
            tvProxies?: number | undefined;
            tvTime?: number | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            tvMasterSteamid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["tvInfo"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
            tvLocalSlots?: number | undefined;
            tvLocalClients?: number | undefined;
            tvLocalProxies?: number | undefined;
            tvRelaySlots?: number | undefined;
            tvRelayClients?: number | undefined;
            tvRelayProxies?: number | undefined;
            tvRelayAddress?: number | undefined;
            tvRelayPort?: number | undefined;
            tvRelaySteamid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["tvInfo"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
            flags?: number | undefined;
        } & Record<Exclude<keyof I["tvInfo"], keyof ServerHltvInfo>, never>) | undefined;
        rewardPlayerAccounts?: (number[] & number[] & Record<Exclude<keyof I["rewardPlayerAccounts"], keyof number[]>, never>) | undefined;
        idlePlayerAccounts?: (number[] & number[] & Record<Exclude<keyof I["idlePlayerAccounts"], keyof number[]>, never>) | undefined;
        rewardItemAttrDefIdx?: number | undefined;
        rewardItemAttrValue?: number | undefined;
        rewardItemAttrRewardIdx?: number | undefined;
        rewardDropList?: number | undefined;
        tournamentTag?: string | undefined;
        legacySteamdatagramPort?: number | undefined;
        steamdatagramRouting?: number | undefined;
        testToken?: number | undefined;
        flags?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingServerReservationResponse>, never>>(object: I): CMsgGCCStrike15V2MatchmakingServerReservationResponse;
};
export declare const CMsgGCCStrike15V2MatchmakingGC2ClientReserve: {
    encode(message: CMsgGCCStrike15V2MatchmakingGC2ClientReserve, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingGC2ClientReserve;
    fromPartial<I extends {
        serverid?: string | number | Long.Long | undefined;
        directUdpIp?: number | undefined;
        directUdpPort?: number | undefined;
        reservationid?: string | number | Long.Long | undefined;
        reservation?: {
            accountIds?: number[] | undefined;
            gameType?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
            encryptionKey?: string | number | Long.Long | undefined;
            encryptionKeyPub?: string | number | Long.Long | undefined;
            partyIds?: number[] | undefined;
            whitelist?: {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] | undefined;
            tvMasterSteamid?: string | number | Long.Long | undefined;
            tournamentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            tournamentTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            tournamentCastersAccountIds?: number[] | undefined;
            tvRelaySteamid?: string | number | Long.Long | undefined;
            preMatchData?: {
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } | undefined;
        map?: string | undefined;
        serverAddress?: string | undefined;
    } & {
        serverid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["serverid"], keyof Long.Long>, never>) | undefined;
        directUdpIp?: number | undefined;
        directUdpPort?: number | undefined;
        reservationid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["reservationid"], keyof Long.Long>, never>) | undefined;
        reservation?: ({
            accountIds?: number[] | undefined;
            gameType?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
            encryptionKey?: string | number | Long.Long | undefined;
            encryptionKeyPub?: string | number | Long.Long | undefined;
            partyIds?: number[] | undefined;
            whitelist?: {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] | undefined;
            tvMasterSteamid?: string | number | Long.Long | undefined;
            tournamentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            tournamentTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            tournamentCastersAccountIds?: number[] | undefined;
            tvRelaySteamid?: string | number | Long.Long | undefined;
            preMatchData?: {
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } & {
            accountIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
            gameType?: number | undefined;
            matchId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] & ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["reservation"]["rankings"], keyof {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[]>, never>) | undefined;
            encryptionKey?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
            encryptionKeyPub?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
            partyIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
            whitelist?: ({
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] & ({
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            } & {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["reservation"]["whitelist"], keyof {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[]>, never>) | undefined;
            tvMasterSteamid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
            tournamentEvent?: ({
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
            tournamentTeams?: ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] & ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } & {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number]["players"], keyof {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["reservation"]["tournamentTeams"], keyof {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
            tvRelaySteamid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
            preMatchData?: ({
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } & {
                predictionsPct?: number | undefined;
                draft?: ({
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } & {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: ({
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] & ({
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    } & {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    } & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                stats?: ({
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] & ({
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                } & {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                } & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"], keyof {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[]>, never>) | undefined;
                wins?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
            } & Record<Exclude<keyof I["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } & Record<Exclude<keyof I["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
        map?: string | undefined;
        serverAddress?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingGC2ClientReserve>, never>>(object: I): CMsgGCCStrike15V2MatchmakingGC2ClientReserve;
};
export declare const CMsgGCCStrike15V2MatchmakingServerRoundStats: {
    encode(message: CMsgGCCStrike15V2MatchmakingServerRoundStats, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingServerRoundStats;
    fromPartial<I extends {
        reservationid?: string | number | Long.Long | undefined;
        reservation?: {
            accountIds?: number[] | undefined;
            gameType?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
            encryptionKey?: string | number | Long.Long | undefined;
            encryptionKeyPub?: string | number | Long.Long | undefined;
            partyIds?: number[] | undefined;
            whitelist?: {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] | undefined;
            tvMasterSteamid?: string | number | Long.Long | undefined;
            tournamentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            tournamentTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            tournamentCastersAccountIds?: number[] | undefined;
            tvRelaySteamid?: string | number | Long.Long | undefined;
            preMatchData?: {
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } | undefined;
        map?: string | undefined;
        round?: number | undefined;
        kills?: number[] | undefined;
        assists?: number[] | undefined;
        deaths?: number[] | undefined;
        scores?: number[] | undefined;
        pings?: number[] | undefined;
        roundResult?: number | undefined;
        matchResult?: number | undefined;
        teamScores?: number[] | undefined;
        confirm?: {
            token?: number | undefined;
            stamp?: number | undefined;
            exchange?: string | number | Long.Long | undefined;
        } | undefined;
        reservationStage?: number | undefined;
        matchDuration?: number | undefined;
        enemyKills?: number[] | undefined;
        enemyHeadshots?: number[] | undefined;
        enemy3ks?: number[] | undefined;
        enemy4ks?: number[] | undefined;
        enemy5ks?: number[] | undefined;
        mvps?: number[] | undefined;
        spectatorsCount?: number | undefined;
        spectatorsCountTv?: number | undefined;
        spectatorsCountLnk?: number | undefined;
        enemyKillsAgg?: number[] | undefined;
        dropInfo?: {
            accountMvp?: number | undefined;
        } | undefined;
        bSwitchedTeams?: boolean | undefined;
        enemy2ks?: number[] | undefined;
        playerSpawned?: number[] | undefined;
        teamSpawnCount?: number[] | undefined;
        maxRounds?: number | undefined;
    } & {
        reservationid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["reservationid"], keyof Long.Long>, never>) | undefined;
        reservation?: ({
            accountIds?: number[] | undefined;
            gameType?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
            encryptionKey?: string | number | Long.Long | undefined;
            encryptionKeyPub?: string | number | Long.Long | undefined;
            partyIds?: number[] | undefined;
            whitelist?: {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] | undefined;
            tvMasterSteamid?: string | number | Long.Long | undefined;
            tournamentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            tournamentTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            tournamentCastersAccountIds?: number[] | undefined;
            tvRelaySteamid?: string | number | Long.Long | undefined;
            preMatchData?: {
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } & {
            accountIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
            gameType?: number | undefined;
            matchId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
            serverVersion?: number | undefined;
            flags?: number | undefined;
            rankings?: ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] & ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["reservation"]["rankings"], keyof {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[]>, never>) | undefined;
            encryptionKey?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
            encryptionKeyPub?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
            partyIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
            whitelist?: ({
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[] & ({
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            } & {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["reservation"]["whitelist"], keyof {
                a?: number | undefined;
                b?: number | undefined;
                c?: number | undefined;
                d?: number | undefined;
                bits?: number | undefined;
                token?: number | undefined;
            }[]>, never>) | undefined;
            tvMasterSteamid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
            tournamentEvent?: ({
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & Record<Exclude<keyof I["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
            tournamentTeams?: ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] & ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } & {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number]["players"], keyof {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["reservation"]["tournamentTeams"], keyof {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
            tvRelaySteamid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
            preMatchData?: ({
                predictionsPct?: number | undefined;
                draft?: {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } | undefined;
                stats?: {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] | undefined;
                wins?: number[] | undefined;
            } & {
                predictionsPct?: number | undefined;
                draft?: ({
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] | undefined;
                } & {
                    eventId?: number | undefined;
                    eventStageId?: number | undefined;
                    teamId0?: number | undefined;
                    teamId1?: number | undefined;
                    mapsCount?: number | undefined;
                    mapsCurrent?: number | undefined;
                    teamIdStart?: number | undefined;
                    teamIdVeto1?: number | undefined;
                    teamIdPickn?: number | undefined;
                    drafts?: ({
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[] & ({
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    } & {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    } & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                        mapid?: number | undefined;
                        teamIdCt?: number | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                stats?: ({
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[] & ({
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                } & {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                } & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["stats"], keyof {
                    matchInfoIdxtxt?: number | undefined;
                    matchInfoTxt?: string | undefined;
                    matchInfoTeams?: string[] | undefined;
                }[]>, never>) | undefined;
                wins?: (number[] & number[] & Record<Exclude<keyof I["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
            } & Record<Exclude<keyof I["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
            rtime32EventStart?: number | undefined;
            tvControl?: number | undefined;
        } & Record<Exclude<keyof I["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
        map?: string | undefined;
        round?: number | undefined;
        kills?: (number[] & number[] & Record<Exclude<keyof I["kills"], keyof number[]>, never>) | undefined;
        assists?: (number[] & number[] & Record<Exclude<keyof I["assists"], keyof number[]>, never>) | undefined;
        deaths?: (number[] & number[] & Record<Exclude<keyof I["deaths"], keyof number[]>, never>) | undefined;
        scores?: (number[] & number[] & Record<Exclude<keyof I["scores"], keyof number[]>, never>) | undefined;
        pings?: (number[] & number[] & Record<Exclude<keyof I["pings"], keyof number[]>, never>) | undefined;
        roundResult?: number | undefined;
        matchResult?: number | undefined;
        teamScores?: (number[] & number[] & Record<Exclude<keyof I["teamScores"], keyof number[]>, never>) | undefined;
        confirm?: ({
            token?: number | undefined;
            stamp?: number | undefined;
            exchange?: string | number | Long.Long | undefined;
        } & {
            token?: number | undefined;
            stamp?: number | undefined;
            exchange?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["confirm"]["exchange"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["confirm"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerConfirm>, never>) | undefined;
        reservationStage?: number | undefined;
        matchDuration?: number | undefined;
        enemyKills?: (number[] & number[] & Record<Exclude<keyof I["enemyKills"], keyof number[]>, never>) | undefined;
        enemyHeadshots?: (number[] & number[] & Record<Exclude<keyof I["enemyHeadshots"], keyof number[]>, never>) | undefined;
        enemy3ks?: (number[] & number[] & Record<Exclude<keyof I["enemy3ks"], keyof number[]>, never>) | undefined;
        enemy4ks?: (number[] & number[] & Record<Exclude<keyof I["enemy4ks"], keyof number[]>, never>) | undefined;
        enemy5ks?: (number[] & number[] & Record<Exclude<keyof I["enemy5ks"], keyof number[]>, never>) | undefined;
        mvps?: (number[] & number[] & Record<Exclude<keyof I["mvps"], keyof number[]>, never>) | undefined;
        spectatorsCount?: number | undefined;
        spectatorsCountTv?: number | undefined;
        spectatorsCountLnk?: number | undefined;
        enemyKillsAgg?: (number[] & number[] & Record<Exclude<keyof I["enemyKillsAgg"], keyof number[]>, never>) | undefined;
        dropInfo?: ({
            accountMvp?: number | undefined;
        } & {
            accountMvp?: number | undefined;
        } & Record<Exclude<keyof I["dropInfo"], "accountMvp">, never>) | undefined;
        bSwitchedTeams?: boolean | undefined;
        enemy2ks?: (number[] & number[] & Record<Exclude<keyof I["enemy2ks"], keyof number[]>, never>) | undefined;
        playerSpawned?: (number[] & number[] & Record<Exclude<keyof I["playerSpawned"], keyof number[]>, never>) | undefined;
        teamSpawnCount?: (number[] & number[] & Record<Exclude<keyof I["teamSpawnCount"], keyof number[]>, never>) | undefined;
        maxRounds?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingServerRoundStats>, never>>(object: I): CMsgGCCStrike15V2MatchmakingServerRoundStats;
};
export declare const CMsgGCCStrike15V2MatchmakingServerRoundStats_DropInfo: {
    encode(message: CMsgGCCStrike15V2MatchmakingServerRoundStats_DropInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingServerRoundStats_DropInfo;
    fromPartial<I extends {
        accountMvp?: number | undefined;
    } & {
        accountMvp?: number | undefined;
    } & Record<Exclude<keyof I, "accountMvp">, never>>(object: I): CMsgGCCStrike15V2MatchmakingServerRoundStats_DropInfo;
};
export declare const CMsgGCCStrike15V2MatchmakingClient2GCHello: {
    encode(_: CMsgGCCStrike15V2MatchmakingClient2GCHello, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingClient2GCHello;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): CMsgGCCStrike15V2MatchmakingClient2GCHello;
};
export declare const CMsgGCCStrike15V2MatchmakingGC2ClientHello: {
    encode(message: CMsgGCCStrike15V2MatchmakingGC2ClientHello, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingGC2ClientHello;
    fromPartial<I extends {
        accountId?: number | undefined;
        ongoingmatch?: {
            serverid?: string | number | Long.Long | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } | undefined;
        globalStats?: {
            playersOnline?: number | undefined;
            serversOnline?: number | undefined;
            playersSearching?: number | undefined;
            serversAvailable?: number | undefined;
            ongoingMatches?: number | undefined;
            searchTimeAvg?: number | undefined;
            searchStatistics?: {
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            }[] | undefined;
            mainPostUrl?: string | undefined;
            requiredAppidVersion?: number | undefined;
            pricesheetVersion?: number | undefined;
            twitchStreamsVersion?: number | undefined;
            activeTournamentEventid?: number | undefined;
            activeSurveyId?: number | undefined;
            rtime32Cur?: number | undefined;
            rtime32EventStart?: number | undefined;
        } | undefined;
        penaltySeconds?: number | undefined;
        penaltyReason?: number | undefined;
        vacBanned?: number | undefined;
        ranking?: {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } | undefined;
        commendation?: {
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } | undefined;
        medals?: {
            displayItemsDefidx?: number[] | undefined;
            featuredDisplayItemDefidx?: number | undefined;
        } | undefined;
        myCurrentEvent?: {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } | undefined;
        myCurrentEventTeams?: {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        myCurrentTeam?: {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        } | undefined;
        myCurrentEventStages?: {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        }[] | undefined;
        surveyVote?: number | undefined;
        activity?: {
            activity?: number | undefined;
            mode?: number | undefined;
            map?: number | undefined;
            matchid?: string | number | Long.Long | undefined;
        } | undefined;
        playerLevel?: number | undefined;
        playerCurXp?: number | undefined;
        playerXpBonusFlags?: number | undefined;
        rankings?: {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[] | undefined;
    } & {
        accountId?: number | undefined;
        ongoingmatch?: ({
            serverid?: string | number | Long.Long | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } & {
            serverid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["ongoingmatch"]["serverid"], keyof Long.Long>, never>) | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["ongoingmatch"]["reservationid"], keyof Long.Long>, never>) | undefined;
            reservation?: ({
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountIds?: (number[] & number[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                gameType?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["rankings"], keyof {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[]>, never>) | undefined;
                encryptionKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                encryptionKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                partyIds?: (number[] & number[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                whitelist?: ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] & ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["whitelist"], keyof {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[]>, never>) | undefined;
                tvMasterSteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                tournamentEvent?: ({
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                tournamentTeams?: ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] & ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                } & {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["tournamentTeams"], keyof {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                tvRelaySteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                preMatchData?: ({
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } & {
                    predictionsPct?: number | undefined;
                    draft?: ({
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] & ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                    stats?: ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] & ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    } & {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["preMatchData"]["stats"], keyof {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[]>, never>) | undefined;
                    wins?: (number[] & number[] & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                } & Record<Exclude<keyof I["ongoingmatch"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["ongoingmatch"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } & Record<Exclude<keyof I["ongoingmatch"], keyof CMsgGCCStrike15V2MatchmakingGC2ClientReserve>, never>) | undefined;
        globalStats?: ({
            playersOnline?: number | undefined;
            serversOnline?: number | undefined;
            playersSearching?: number | undefined;
            serversAvailable?: number | undefined;
            ongoingMatches?: number | undefined;
            searchTimeAvg?: number | undefined;
            searchStatistics?: {
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            }[] | undefined;
            mainPostUrl?: string | undefined;
            requiredAppidVersion?: number | undefined;
            pricesheetVersion?: number | undefined;
            twitchStreamsVersion?: number | undefined;
            activeTournamentEventid?: number | undefined;
            activeSurveyId?: number | undefined;
            rtime32Cur?: number | undefined;
            rtime32EventStart?: number | undefined;
        } & {
            playersOnline?: number | undefined;
            serversOnline?: number | undefined;
            playersSearching?: number | undefined;
            serversAvailable?: number | undefined;
            ongoingMatches?: number | undefined;
            searchTimeAvg?: number | undefined;
            searchStatistics?: ({
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            }[] & ({
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            } & {
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            } & Record<Exclude<keyof I["globalStats"]["searchStatistics"][number], keyof DetailedSearchStatistic>, never>)[] & Record<Exclude<keyof I["globalStats"]["searchStatistics"], keyof {
                gameType?: number | undefined;
                searchTimeAvg?: number | undefined;
                playersSearching?: number | undefined;
            }[]>, never>) | undefined;
            mainPostUrl?: string | undefined;
            requiredAppidVersion?: number | undefined;
            pricesheetVersion?: number | undefined;
            twitchStreamsVersion?: number | undefined;
            activeTournamentEventid?: number | undefined;
            activeSurveyId?: number | undefined;
            rtime32Cur?: number | undefined;
            rtime32EventStart?: number | undefined;
        } & Record<Exclude<keyof I["globalStats"], keyof GlobalStatistics>, never>) | undefined;
        penaltySeconds?: number | undefined;
        penaltyReason?: number | undefined;
        vacBanned?: number | undefined;
        ranking?: ({
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } & {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } & Record<Exclude<keyof I["ranking"], keyof PlayerRankingInfo>, never>) | undefined;
        commendation?: ({
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } & {
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } & Record<Exclude<keyof I["commendation"], keyof PlayerCommendationInfo>, never>) | undefined;
        medals?: ({
            displayItemsDefidx?: number[] | undefined;
            featuredDisplayItemDefidx?: number | undefined;
        } & {
            displayItemsDefidx?: (number[] & number[] & Record<Exclude<keyof I["medals"]["displayItemsDefidx"], keyof number[]>, never>) | undefined;
            featuredDisplayItemDefidx?: number | undefined;
        } & Record<Exclude<keyof I["medals"], keyof PlayerMedalsInfo>, never>) | undefined;
        myCurrentEvent?: ({
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } & {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } & Record<Exclude<keyof I["myCurrentEvent"], keyof TournamentEvent>, never>) | undefined;
        myCurrentEventTeams?: ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[] & ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        } & {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] & ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & Record<Exclude<keyof I["myCurrentEventTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["myCurrentEventTeams"][number]["players"], keyof {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["myCurrentEventTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["myCurrentEventTeams"], keyof {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        myCurrentTeam?: ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        } & {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] & ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & Record<Exclude<keyof I["myCurrentTeam"]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["myCurrentTeam"]["players"], keyof {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["myCurrentTeam"], keyof TournamentTeam>, never>) | undefined;
        myCurrentEventStages?: ({
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        }[] & ({
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } & {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } & Record<Exclude<keyof I["myCurrentEventStages"][number], keyof TournamentEvent>, never>)[] & Record<Exclude<keyof I["myCurrentEventStages"], keyof {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        }[]>, never>) | undefined;
        surveyVote?: number | undefined;
        activity?: ({
            activity?: number | undefined;
            mode?: number | undefined;
            map?: number | undefined;
            matchid?: string | number | Long.Long | undefined;
        } & {
            activity?: number | undefined;
            mode?: number | undefined;
            map?: number | undefined;
            matchid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["activity"]["matchid"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["activity"], keyof AccountActivity>, never>) | undefined;
        playerLevel?: number | undefined;
        playerCurXp?: number | undefined;
        playerXpBonusFlags?: number | undefined;
        rankings?: ({
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[] & ({
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } & {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } & Record<Exclude<keyof I["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["rankings"], keyof {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingGC2ClientHello>, never>>(object: I): CMsgGCCStrike15V2MatchmakingGC2ClientHello;
};
export declare const CMsgGCCStrike15V2AccountPrivacySettings: {
    encode(message: CMsgGCCStrike15V2AccountPrivacySettings, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2AccountPrivacySettings;
    fromPartial<I extends {
        settings?: {
            settingType?: number | undefined;
            settingValue?: number | undefined;
        }[] | undefined;
    } & {
        settings?: ({
            settingType?: number | undefined;
            settingValue?: number | undefined;
        }[] & ({
            settingType?: number | undefined;
            settingValue?: number | undefined;
        } & {
            settingType?: number | undefined;
            settingValue?: number | undefined;
        } & Record<Exclude<keyof I["settings"][number], keyof CMsgGCCStrike15V2AccountPrivacySettings_Setting>, never>)[] & Record<Exclude<keyof I["settings"], keyof {
            settingType?: number | undefined;
            settingValue?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "settings">, never>>(object: I): CMsgGCCStrike15V2AccountPrivacySettings;
};
export declare const CMsgGCCStrike15V2AccountPrivacySettings_Setting: {
    encode(message: CMsgGCCStrike15V2AccountPrivacySettings_Setting, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2AccountPrivacySettings_Setting;
    fromPartial<I extends {
        settingType?: number | undefined;
        settingValue?: number | undefined;
    } & {
        settingType?: number | undefined;
        settingValue?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2AccountPrivacySettings_Setting>, never>>(object: I): CMsgGCCStrike15V2AccountPrivacySettings_Setting;
};
export declare const CMsgGCCStrike15V2MatchmakingGC2ClientAbandon: {
    encode(message: CMsgGCCStrike15V2MatchmakingGC2ClientAbandon, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingGC2ClientAbandon;
    fromPartial<I extends {
        accountId?: number | undefined;
        abandonedMatch?: {
            serverid?: string | number | Long.Long | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } | undefined;
        penaltySeconds?: number | undefined;
        penaltyReason?: number | undefined;
    } & {
        accountId?: number | undefined;
        abandonedMatch?: ({
            serverid?: string | number | Long.Long | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } & {
            serverid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["abandonedMatch"]["serverid"], keyof Long.Long>, never>) | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["abandonedMatch"]["reservationid"], keyof Long.Long>, never>) | undefined;
            reservation?: ({
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountIds?: (number[] & number[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                gameType?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["rankings"], keyof {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[]>, never>) | undefined;
                encryptionKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                encryptionKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                partyIds?: (number[] & number[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                whitelist?: ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] & ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["whitelist"], keyof {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[]>, never>) | undefined;
                tvMasterSteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                tournamentEvent?: ({
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                tournamentTeams?: ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] & ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                } & {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["tournamentTeams"], keyof {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                tvRelaySteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                preMatchData?: ({
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } & {
                    predictionsPct?: number | undefined;
                    draft?: ({
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] & ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                    stats?: ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] & ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    } & {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["preMatchData"]["stats"], keyof {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[]>, never>) | undefined;
                    wins?: (number[] & number[] & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                } & Record<Exclude<keyof I["abandonedMatch"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["abandonedMatch"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } & Record<Exclude<keyof I["abandonedMatch"], keyof CMsgGCCStrike15V2MatchmakingGC2ClientReserve>, never>) | undefined;
        penaltySeconds?: number | undefined;
        penaltyReason?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchmakingGC2ClientAbandon>, never>>(object: I): CMsgGCCStrike15V2MatchmakingGC2ClientAbandon;
};
export declare const CMsgGCCStrike15V2ClientGCRankUpdate: {
    encode(message: CMsgGCCStrike15V2ClientGCRankUpdate, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientGCRankUpdate;
    fromPartial<I extends {
        rankings?: {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[] | undefined;
    } & {
        rankings?: ({
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[] & ({
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } & {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        } & Record<Exclude<keyof I["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["rankings"], keyof {
            accountId?: number | undefined;
            rankId?: number | undefined;
            wins?: number | undefined;
            rankChange?: number | undefined;
            rankTypeId?: number | undefined;
            tvControl?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "rankings">, never>>(object: I): CMsgGCCStrike15V2ClientGCRankUpdate;
};
export declare const CMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdate: {
    encode(message: CMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdate, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdate;
    fromPartial<I extends {
        mainPostUrl?: string | undefined;
    } & {
        mainPostUrl?: string | undefined;
    } & Record<Exclude<keyof I, "mainPostUrl">, never>>(object: I): CMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdate;
};
export declare const CMsgGCCStrike15V2ServerNotificationForUserPenalty: {
    encode(message: CMsgGCCStrike15V2ServerNotificationForUserPenalty, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ServerNotificationForUserPenalty;
    fromPartial<I extends {
        accountId?: number | undefined;
        reason?: number | undefined;
        seconds?: number | undefined;
        communicationCooldown?: boolean | undefined;
    } & {
        accountId?: number | undefined;
        reason?: number | undefined;
        seconds?: number | undefined;
        communicationCooldown?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ServerNotificationForUserPenalty>, never>>(object: I): CMsgGCCStrike15V2ServerNotificationForUserPenalty;
};
export declare const CMsgGCCStrike15V2ClientReportPlayer: {
    encode(message: CMsgGCCStrike15V2ClientReportPlayer, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientReportPlayer;
    fromPartial<I extends {
        accountId?: number | undefined;
        rptAimbot?: number | undefined;
        rptWallhack?: number | undefined;
        rptSpeedhack?: number | undefined;
        rptTeamharm?: number | undefined;
        rptTextabuse?: number | undefined;
        rptVoiceabuse?: number | undefined;
        matchId?: string | number | Long.Long | undefined;
        reportFromDemo?: boolean | undefined;
    } & {
        accountId?: number | undefined;
        rptAimbot?: number | undefined;
        rptWallhack?: number | undefined;
        rptSpeedhack?: number | undefined;
        rptTeamharm?: number | undefined;
        rptTextabuse?: number | undefined;
        rptVoiceabuse?: number | undefined;
        matchId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchId"], keyof Long.Long>, never>) | undefined;
        reportFromDemo?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientReportPlayer>, never>>(object: I): CMsgGCCStrike15V2ClientReportPlayer;
};
export declare const CMsgGCCStrike15V2ClientCommendPlayer: {
    encode(message: CMsgGCCStrike15V2ClientCommendPlayer, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientCommendPlayer;
    fromPartial<I extends {
        accountId?: number | undefined;
        matchId?: string | number | Long.Long | undefined;
        commendation?: {
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } | undefined;
        tokens?: number | undefined;
    } & {
        accountId?: number | undefined;
        matchId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchId"], keyof Long.Long>, never>) | undefined;
        commendation?: ({
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } & {
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } & Record<Exclude<keyof I["commendation"], keyof PlayerCommendationInfo>, never>) | undefined;
        tokens?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientCommendPlayer>, never>>(object: I): CMsgGCCStrike15V2ClientCommendPlayer;
};
export declare const CMsgGCCStrike15V2ClientReportServer: {
    encode(message: CMsgGCCStrike15V2ClientReportServer, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientReportServer;
    fromPartial<I extends {
        rptPoorperf?: number | undefined;
        rptAbusivemodels?: number | undefined;
        rptBadmotd?: number | undefined;
        rptListingabuse?: number | undefined;
        rptInventoryabuse?: number | undefined;
        matchId?: string | number | Long.Long | undefined;
    } & {
        rptPoorperf?: number | undefined;
        rptAbusivemodels?: number | undefined;
        rptBadmotd?: number | undefined;
        rptListingabuse?: number | undefined;
        rptInventoryabuse?: number | undefined;
        matchId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchId"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientReportServer>, never>>(object: I): CMsgGCCStrike15V2ClientReportServer;
};
export declare const CMsgGCCStrike15V2ClientReportResponse: {
    encode(message: CMsgGCCStrike15V2ClientReportResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientReportResponse;
    fromPartial<I extends {
        confirmationId?: string | number | Long.Long | undefined;
        accountId?: number | undefined;
        serverIp?: number | undefined;
        responseType?: number | undefined;
        responseResult?: number | undefined;
        tokens?: number | undefined;
    } & {
        confirmationId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["confirmationId"], keyof Long.Long>, never>) | undefined;
        accountId?: number | undefined;
        serverIp?: number | undefined;
        responseType?: number | undefined;
        responseResult?: number | undefined;
        tokens?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientReportResponse>, never>>(object: I): CMsgGCCStrike15V2ClientReportResponse;
};
export declare const CMsgGCCStrike15V2ClientRequestWatchInfoFriends: {
    encode(message: CMsgGCCStrike15V2ClientRequestWatchInfoFriends, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientRequestWatchInfoFriends;
    fromPartial<I extends {
        requestId?: number | undefined;
        accountIds?: number[] | undefined;
        serverid?: string | number | Long.Long | undefined;
        matchid?: string | number | Long.Long | undefined;
        clientLauncher?: number | undefined;
        dataCenterPings?: {
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        }[] | undefined;
    } & {
        requestId?: number | undefined;
        accountIds?: (number[] & number[] & Record<Exclude<keyof I["accountIds"], keyof number[]>, never>) | undefined;
        serverid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["serverid"], keyof Long.Long>, never>) | undefined;
        matchid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchid"], keyof Long.Long>, never>) | undefined;
        clientLauncher?: number | undefined;
        dataCenterPings?: ({
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        }[] & ({
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        } & {
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        } & Record<Exclude<keyof I["dataCenterPings"][number], keyof DataCenterPing>, never>)[] & Record<Exclude<keyof I["dataCenterPings"], keyof {
            dataCenterId?: number | undefined;
            ping?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientRequestWatchInfoFriends>, never>>(object: I): CMsgGCCStrike15V2ClientRequestWatchInfoFriends;
};
export declare const WatchableMatchInfo: {
    encode(message: WatchableMatchInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): WatchableMatchInfo;
    fromPartial<I extends {
        serverIp?: number | undefined;
        tvPort?: number | undefined;
        tvSpectators?: number | undefined;
        tvTime?: number | undefined;
        tvWatchPassword?: Uint8Array | undefined;
        clDecryptdataKey?: string | number | Long.Long | undefined;
        clDecryptdataKeyPub?: string | number | Long.Long | undefined;
        gameType?: number | undefined;
        gameMapgroup?: string | undefined;
        gameMap?: string | undefined;
        serverId?: string | number | Long.Long | undefined;
        matchId?: string | number | Long.Long | undefined;
        reservationId?: string | number | Long.Long | undefined;
    } & {
        serverIp?: number | undefined;
        tvPort?: number | undefined;
        tvSpectators?: number | undefined;
        tvTime?: number | undefined;
        tvWatchPassword?: Uint8Array | undefined;
        clDecryptdataKey?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["clDecryptdataKey"], keyof Long.Long>, never>) | undefined;
        clDecryptdataKeyPub?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["clDecryptdataKeyPub"], keyof Long.Long>, never>) | undefined;
        gameType?: number | undefined;
        gameMapgroup?: string | undefined;
        gameMap?: string | undefined;
        serverId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["serverId"], keyof Long.Long>, never>) | undefined;
        matchId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchId"], keyof Long.Long>, never>) | undefined;
        reservationId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["reservationId"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof WatchableMatchInfo>, never>>(object: I): WatchableMatchInfo;
};
export declare const CMsgGCCStrike15V2ClientRequestJoinFriendData: {
    encode(message: CMsgGCCStrike15V2ClientRequestJoinFriendData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientRequestJoinFriendData;
    fromPartial<I extends {
        version?: number | undefined;
        accountId?: number | undefined;
        joinToken?: number | undefined;
        joinIpp?: number | undefined;
        res?: {
            serverid?: string | number | Long.Long | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } | undefined;
        errormsg?: string | undefined;
    } & {
        version?: number | undefined;
        accountId?: number | undefined;
        joinToken?: number | undefined;
        joinIpp?: number | undefined;
        res?: ({
            serverid?: string | number | Long.Long | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } & {
            serverid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["res"]["serverid"], keyof Long.Long>, never>) | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["res"]["reservationid"], keyof Long.Long>, never>) | undefined;
            reservation?: ({
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountIds?: (number[] & number[] & Record<Exclude<keyof I["res"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                gameType?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["rankings"], keyof {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[]>, never>) | undefined;
                encryptionKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                encryptionKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                partyIds?: (number[] & number[] & Record<Exclude<keyof I["res"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                whitelist?: ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] & ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["whitelist"], keyof {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[]>, never>) | undefined;
                tvMasterSteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                tournamentEvent?: ({
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                tournamentTeams?: ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] & ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                } & {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & Record<Exclude<keyof I["res"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["tournamentTeams"], keyof {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["res"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                tvRelaySteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                preMatchData?: ({
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } & {
                    predictionsPct?: number | undefined;
                    draft?: ({
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] & ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                    stats?: ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] & ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    } & {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["stats"], keyof {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[]>, never>) | undefined;
                    wins?: (number[] & number[] & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["res"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } & Record<Exclude<keyof I["res"], keyof CMsgGCCStrike15V2MatchmakingGC2ClientReserve>, never>) | undefined;
        errormsg?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientRequestJoinFriendData>, never>>(object: I): CMsgGCCStrike15V2ClientRequestJoinFriendData;
};
export declare const CMsgGCCStrike15V2ClientRequestJoinServerData: {
    encode(message: CMsgGCCStrike15V2ClientRequestJoinServerData, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientRequestJoinServerData;
    fromPartial<I extends {
        version?: number | undefined;
        accountId?: number | undefined;
        serverid?: string | number | Long.Long | undefined;
        serverIp?: number | undefined;
        serverPort?: number | undefined;
        res?: {
            serverid?: string | number | Long.Long | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } | undefined;
        errormsg?: string | undefined;
    } & {
        version?: number | undefined;
        accountId?: number | undefined;
        serverid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["serverid"], keyof Long.Long>, never>) | undefined;
        serverIp?: number | undefined;
        serverPort?: number | undefined;
        res?: ({
            serverid?: string | number | Long.Long | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } & {
            serverid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["res"]["serverid"], keyof Long.Long>, never>) | undefined;
            directUdpIp?: number | undefined;
            directUdpPort?: number | undefined;
            reservationid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["res"]["reservationid"], keyof Long.Long>, never>) | undefined;
            reservation?: ({
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountIds?: (number[] & number[] & Record<Exclude<keyof I["res"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                gameType?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["rankings"], keyof {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[]>, never>) | undefined;
                encryptionKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                encryptionKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                partyIds?: (number[] & number[] & Record<Exclude<keyof I["res"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                whitelist?: ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] & ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["whitelist"], keyof {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[]>, never>) | undefined;
                tvMasterSteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                tournamentEvent?: ({
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                tournamentTeams?: ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] & ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                } & {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & Record<Exclude<keyof I["res"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["tournamentTeams"], keyof {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["res"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                tvRelaySteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["res"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                preMatchData?: ({
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } & {
                    predictionsPct?: number | undefined;
                    draft?: ({
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] & ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                    stats?: ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] & ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    } & {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["stats"], keyof {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[]>, never>) | undefined;
                    wins?: (number[] & number[] & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                } & Record<Exclude<keyof I["res"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["res"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
            map?: string | undefined;
            serverAddress?: string | undefined;
        } & Record<Exclude<keyof I["res"], keyof CMsgGCCStrike15V2MatchmakingGC2ClientReserve>, never>) | undefined;
        errormsg?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientRequestJoinServerData>, never>>(object: I): CMsgGCCStrike15V2ClientRequestJoinServerData;
};
export declare const CMsgGCCstrike15V2ClientRequestNewMission: {
    encode(message: CMsgGCCstrike15V2ClientRequestNewMission, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCstrike15V2ClientRequestNewMission;
    fromPartial<I extends {
        missionId?: number | undefined;
        campaignId?: number | undefined;
    } & {
        missionId?: number | undefined;
        campaignId?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCstrike15V2ClientRequestNewMission>, never>>(object: I): CMsgGCCstrike15V2ClientRequestNewMission;
};
export declare const CMsgGCCstrike15V2ClientRedeemMissionReward: {
    encode(message: CMsgGCCstrike15V2ClientRedeemMissionReward, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCstrike15V2ClientRedeemMissionReward;
    fromPartial<I extends {
        campaignId?: number | undefined;
        redeemId?: number | undefined;
        redeemableBalance?: number | undefined;
        expectedCost?: number | undefined;
    } & {
        campaignId?: number | undefined;
        redeemId?: number | undefined;
        redeemableBalance?: number | undefined;
        expectedCost?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCstrike15V2ClientRedeemMissionReward>, never>>(object: I): CMsgGCCstrike15V2ClientRedeemMissionReward;
};
export declare const CMsgGCCstrike15V2GC2ServerNotifyXPRewarded: {
    encode(message: CMsgGCCstrike15V2GC2ServerNotifyXPRewarded, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCstrike15V2GC2ServerNotifyXPRewarded;
    fromPartial<I extends {
        xpProgressData?: {
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        }[] | undefined;
        accountId?: number | undefined;
        currentXp?: number | undefined;
        currentLevel?: number | undefined;
        upgradedDefidx?: number | undefined;
        operationPointsAwarded?: number | undefined;
    } & {
        xpProgressData?: ({
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        }[] & ({
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        } & {
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        } & Record<Exclude<keyof I["xpProgressData"][number], keyof XpProgressData>, never>)[] & Record<Exclude<keyof I["xpProgressData"], keyof {
            xpPoints?: number | undefined;
            xpCategory?: number | undefined;
        }[]>, never>) | undefined;
        accountId?: number | undefined;
        currentXp?: number | undefined;
        currentLevel?: number | undefined;
        upgradedDefidx?: number | undefined;
        operationPointsAwarded?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCstrike15V2GC2ServerNotifyXPRewarded>, never>>(object: I): CMsgGCCstrike15V2GC2ServerNotifyXPRewarded;
};
export declare const CMsgGCCStrike15ClientDeepStats: {
    encode(message: CMsgGCCStrike15ClientDeepStats, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15ClientDeepStats;
    fromPartial<I extends {
        accountId?: number | undefined;
        range?: {
            begin?: number | undefined;
            end?: number | undefined;
            frozen?: boolean | undefined;
        } | undefined;
        matches?: {
            player?: {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                mmGameMode?: number | undefined;
                mapid?: number | undefined;
                bStartingCt?: boolean | undefined;
                matchOutcome?: number | undefined;
                roundsWon?: number | undefined;
                roundsLost?: number | undefined;
                statScore?: number | undefined;
                statDeaths?: number | undefined;
                statMvps?: number | undefined;
                enemyKills?: number | undefined;
                enemyHeadshots?: number | undefined;
                enemy2ks?: number | undefined;
                enemy3ks?: number | undefined;
                enemy4ks?: number | undefined;
                totalDamage?: number | undefined;
                engagementsEntryCount?: number | undefined;
                engagementsEntryWins?: number | undefined;
                engagements1v1Count?: number | undefined;
                engagements1v1Wins?: number | undefined;
                engagements1v2Count?: number | undefined;
                engagements1v2Wins?: number | undefined;
                utilityCount?: number | undefined;
                utilitySuccess?: number | undefined;
                flashCount?: number | undefined;
                flashSuccess?: number | undefined;
                mates?: number[] | undefined;
            } | undefined;
            events?: {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                eventId?: number | undefined;
                eventType?: number | undefined;
                bPlayingCt?: boolean | undefined;
                userPosX?: number | undefined;
                userPosY?: number | undefined;
                userPosZ?: number | undefined;
                userDefidx?: number | undefined;
                otherPosX?: number | undefined;
                otherPosY?: number | undefined;
                otherPosZ?: number | undefined;
                otherDefidx?: number | undefined;
                eventData?: number | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        accountId?: number | undefined;
        range?: ({
            begin?: number | undefined;
            end?: number | undefined;
            frozen?: boolean | undefined;
        } & {
            begin?: number | undefined;
            end?: number | undefined;
            frozen?: boolean | undefined;
        } & Record<Exclude<keyof I["range"], keyof CMsgGCCStrike15ClientDeepStats_DeepStatsRange>, never>) | undefined;
        matches?: ({
            player?: {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                mmGameMode?: number | undefined;
                mapid?: number | undefined;
                bStartingCt?: boolean | undefined;
                matchOutcome?: number | undefined;
                roundsWon?: number | undefined;
                roundsLost?: number | undefined;
                statScore?: number | undefined;
                statDeaths?: number | undefined;
                statMvps?: number | undefined;
                enemyKills?: number | undefined;
                enemyHeadshots?: number | undefined;
                enemy2ks?: number | undefined;
                enemy3ks?: number | undefined;
                enemy4ks?: number | undefined;
                totalDamage?: number | undefined;
                engagementsEntryCount?: number | undefined;
                engagementsEntryWins?: number | undefined;
                engagements1v1Count?: number | undefined;
                engagements1v1Wins?: number | undefined;
                engagements1v2Count?: number | undefined;
                engagements1v2Wins?: number | undefined;
                utilityCount?: number | undefined;
                utilitySuccess?: number | undefined;
                flashCount?: number | undefined;
                flashSuccess?: number | undefined;
                mates?: number[] | undefined;
            } | undefined;
            events?: {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                eventId?: number | undefined;
                eventType?: number | undefined;
                bPlayingCt?: boolean | undefined;
                userPosX?: number | undefined;
                userPosY?: number | undefined;
                userPosZ?: number | undefined;
                userDefidx?: number | undefined;
                otherPosX?: number | undefined;
                otherPosY?: number | undefined;
                otherPosZ?: number | undefined;
                otherDefidx?: number | undefined;
                eventData?: number | undefined;
            }[] | undefined;
        }[] & ({
            player?: {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                mmGameMode?: number | undefined;
                mapid?: number | undefined;
                bStartingCt?: boolean | undefined;
                matchOutcome?: number | undefined;
                roundsWon?: number | undefined;
                roundsLost?: number | undefined;
                statScore?: number | undefined;
                statDeaths?: number | undefined;
                statMvps?: number | undefined;
                enemyKills?: number | undefined;
                enemyHeadshots?: number | undefined;
                enemy2ks?: number | undefined;
                enemy3ks?: number | undefined;
                enemy4ks?: number | undefined;
                totalDamage?: number | undefined;
                engagementsEntryCount?: number | undefined;
                engagementsEntryWins?: number | undefined;
                engagements1v1Count?: number | undefined;
                engagements1v1Wins?: number | undefined;
                engagements1v2Count?: number | undefined;
                engagements1v2Wins?: number | undefined;
                utilityCount?: number | undefined;
                utilitySuccess?: number | undefined;
                flashCount?: number | undefined;
                flashSuccess?: number | undefined;
                mates?: number[] | undefined;
            } | undefined;
            events?: {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                eventId?: number | undefined;
                eventType?: number | undefined;
                bPlayingCt?: boolean | undefined;
                userPosX?: number | undefined;
                userPosY?: number | undefined;
                userPosZ?: number | undefined;
                userDefidx?: number | undefined;
                otherPosX?: number | undefined;
                otherPosY?: number | undefined;
                otherPosZ?: number | undefined;
                otherDefidx?: number | undefined;
                eventData?: number | undefined;
            }[] | undefined;
        } & {
            player?: ({
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                mmGameMode?: number | undefined;
                mapid?: number | undefined;
                bStartingCt?: boolean | undefined;
                matchOutcome?: number | undefined;
                roundsWon?: number | undefined;
                roundsLost?: number | undefined;
                statScore?: number | undefined;
                statDeaths?: number | undefined;
                statMvps?: number | undefined;
                enemyKills?: number | undefined;
                enemyHeadshots?: number | undefined;
                enemy2ks?: number | undefined;
                enemy3ks?: number | undefined;
                enemy4ks?: number | undefined;
                totalDamage?: number | undefined;
                engagementsEntryCount?: number | undefined;
                engagementsEntryWins?: number | undefined;
                engagements1v1Count?: number | undefined;
                engagements1v1Wins?: number | undefined;
                engagements1v2Count?: number | undefined;
                engagements1v2Wins?: number | undefined;
                utilityCount?: number | undefined;
                utilitySuccess?: number | undefined;
                flashCount?: number | undefined;
                flashSuccess?: number | undefined;
                mates?: number[] | undefined;
            } & {
                accountid?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["player"]["matchId"], keyof Long.Long>, never>) | undefined;
                mmGameMode?: number | undefined;
                mapid?: number | undefined;
                bStartingCt?: boolean | undefined;
                matchOutcome?: number | undefined;
                roundsWon?: number | undefined;
                roundsLost?: number | undefined;
                statScore?: number | undefined;
                statDeaths?: number | undefined;
                statMvps?: number | undefined;
                enemyKills?: number | undefined;
                enemyHeadshots?: number | undefined;
                enemy2ks?: number | undefined;
                enemy3ks?: number | undefined;
                enemy4ks?: number | undefined;
                totalDamage?: number | undefined;
                engagementsEntryCount?: number | undefined;
                engagementsEntryWins?: number | undefined;
                engagements1v1Count?: number | undefined;
                engagements1v1Wins?: number | undefined;
                engagements1v2Count?: number | undefined;
                engagements1v2Wins?: number | undefined;
                utilityCount?: number | undefined;
                utilitySuccess?: number | undefined;
                flashCount?: number | undefined;
                flashSuccess?: number | undefined;
                mates?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["player"]["mates"], keyof number[]>, never>) | undefined;
            } & Record<Exclude<keyof I["matches"][number]["player"], keyof DeepPlayerStatsEntry>, never>) | undefined;
            events?: ({
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                eventId?: number | undefined;
                eventType?: number | undefined;
                bPlayingCt?: boolean | undefined;
                userPosX?: number | undefined;
                userPosY?: number | undefined;
                userPosZ?: number | undefined;
                userDefidx?: number | undefined;
                otherPosX?: number | undefined;
                otherPosY?: number | undefined;
                otherPosZ?: number | undefined;
                otherDefidx?: number | undefined;
                eventData?: number | undefined;
            }[] & ({
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                eventId?: number | undefined;
                eventType?: number | undefined;
                bPlayingCt?: boolean | undefined;
                userPosX?: number | undefined;
                userPosY?: number | undefined;
                userPosZ?: number | undefined;
                userDefidx?: number | undefined;
                otherPosX?: number | undefined;
                otherPosY?: number | undefined;
                otherPosZ?: number | undefined;
                otherDefidx?: number | undefined;
                eventData?: number | undefined;
            } & {
                accountid?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["events"][number]["matchId"], keyof Long.Long>, never>) | undefined;
                eventId?: number | undefined;
                eventType?: number | undefined;
                bPlayingCt?: boolean | undefined;
                userPosX?: number | undefined;
                userPosY?: number | undefined;
                userPosZ?: number | undefined;
                userDefidx?: number | undefined;
                otherPosX?: number | undefined;
                otherPosY?: number | undefined;
                otherPosZ?: number | undefined;
                otherDefidx?: number | undefined;
                eventData?: number | undefined;
            } & Record<Exclude<keyof I["matches"][number]["events"][number], keyof DeepPlayerMatchEvent>, never>)[] & Record<Exclude<keyof I["matches"][number]["events"], keyof {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                eventId?: number | undefined;
                eventType?: number | undefined;
                bPlayingCt?: boolean | undefined;
                userPosX?: number | undefined;
                userPosY?: number | undefined;
                userPosZ?: number | undefined;
                userDefidx?: number | undefined;
                otherPosX?: number | undefined;
                otherPosY?: number | undefined;
                otherPosZ?: number | undefined;
                otherDefidx?: number | undefined;
                eventData?: number | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["matches"][number], keyof CMsgGCCStrike15ClientDeepStats_DeepStatsMatch>, never>)[] & Record<Exclude<keyof I["matches"], keyof {
            player?: {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                mmGameMode?: number | undefined;
                mapid?: number | undefined;
                bStartingCt?: boolean | undefined;
                matchOutcome?: number | undefined;
                roundsWon?: number | undefined;
                roundsLost?: number | undefined;
                statScore?: number | undefined;
                statDeaths?: number | undefined;
                statMvps?: number | undefined;
                enemyKills?: number | undefined;
                enemyHeadshots?: number | undefined;
                enemy2ks?: number | undefined;
                enemy3ks?: number | undefined;
                enemy4ks?: number | undefined;
                totalDamage?: number | undefined;
                engagementsEntryCount?: number | undefined;
                engagementsEntryWins?: number | undefined;
                engagements1v1Count?: number | undefined;
                engagements1v1Wins?: number | undefined;
                engagements1v2Count?: number | undefined;
                engagements1v2Wins?: number | undefined;
                utilityCount?: number | undefined;
                utilitySuccess?: number | undefined;
                flashCount?: number | undefined;
                flashSuccess?: number | undefined;
                mates?: number[] | undefined;
            } | undefined;
            events?: {
                accountid?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                eventId?: number | undefined;
                eventType?: number | undefined;
                bPlayingCt?: boolean | undefined;
                userPosX?: number | undefined;
                userPosY?: number | undefined;
                userPosZ?: number | undefined;
                userDefidx?: number | undefined;
                otherPosX?: number | undefined;
                otherPosY?: number | undefined;
                otherPosZ?: number | undefined;
                otherDefidx?: number | undefined;
                eventData?: number | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15ClientDeepStats>, never>>(object: I): CMsgGCCStrike15ClientDeepStats;
};
export declare const CMsgGCCStrike15ClientDeepStats_DeepStatsRange: {
    encode(message: CMsgGCCStrike15ClientDeepStats_DeepStatsRange, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15ClientDeepStats_DeepStatsRange;
    fromPartial<I extends {
        begin?: number | undefined;
        end?: number | undefined;
        frozen?: boolean | undefined;
    } & {
        begin?: number | undefined;
        end?: number | undefined;
        frozen?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15ClientDeepStats_DeepStatsRange>, never>>(object: I): CMsgGCCStrike15ClientDeepStats_DeepStatsRange;
};
export declare const CMsgGCCStrike15ClientDeepStats_DeepStatsMatch: {
    encode(message: CMsgGCCStrike15ClientDeepStats_DeepStatsMatch, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15ClientDeepStats_DeepStatsMatch;
    fromPartial<I extends {
        player?: {
            accountid?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            mmGameMode?: number | undefined;
            mapid?: number | undefined;
            bStartingCt?: boolean | undefined;
            matchOutcome?: number | undefined;
            roundsWon?: number | undefined;
            roundsLost?: number | undefined;
            statScore?: number | undefined;
            statDeaths?: number | undefined;
            statMvps?: number | undefined;
            enemyKills?: number | undefined;
            enemyHeadshots?: number | undefined;
            enemy2ks?: number | undefined;
            enemy3ks?: number | undefined;
            enemy4ks?: number | undefined;
            totalDamage?: number | undefined;
            engagementsEntryCount?: number | undefined;
            engagementsEntryWins?: number | undefined;
            engagements1v1Count?: number | undefined;
            engagements1v1Wins?: number | undefined;
            engagements1v2Count?: number | undefined;
            engagements1v2Wins?: number | undefined;
            utilityCount?: number | undefined;
            utilitySuccess?: number | undefined;
            flashCount?: number | undefined;
            flashSuccess?: number | undefined;
            mates?: number[] | undefined;
        } | undefined;
        events?: {
            accountid?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            eventId?: number | undefined;
            eventType?: number | undefined;
            bPlayingCt?: boolean | undefined;
            userPosX?: number | undefined;
            userPosY?: number | undefined;
            userPosZ?: number | undefined;
            userDefidx?: number | undefined;
            otherPosX?: number | undefined;
            otherPosY?: number | undefined;
            otherPosZ?: number | undefined;
            otherDefidx?: number | undefined;
            eventData?: number | undefined;
        }[] | undefined;
    } & {
        player?: ({
            accountid?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            mmGameMode?: number | undefined;
            mapid?: number | undefined;
            bStartingCt?: boolean | undefined;
            matchOutcome?: number | undefined;
            roundsWon?: number | undefined;
            roundsLost?: number | undefined;
            statScore?: number | undefined;
            statDeaths?: number | undefined;
            statMvps?: number | undefined;
            enemyKills?: number | undefined;
            enemyHeadshots?: number | undefined;
            enemy2ks?: number | undefined;
            enemy3ks?: number | undefined;
            enemy4ks?: number | undefined;
            totalDamage?: number | undefined;
            engagementsEntryCount?: number | undefined;
            engagementsEntryWins?: number | undefined;
            engagements1v1Count?: number | undefined;
            engagements1v1Wins?: number | undefined;
            engagements1v2Count?: number | undefined;
            engagements1v2Wins?: number | undefined;
            utilityCount?: number | undefined;
            utilitySuccess?: number | undefined;
            flashCount?: number | undefined;
            flashSuccess?: number | undefined;
            mates?: number[] | undefined;
        } & {
            accountid?: number | undefined;
            matchId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["player"]["matchId"], keyof Long.Long>, never>) | undefined;
            mmGameMode?: number | undefined;
            mapid?: number | undefined;
            bStartingCt?: boolean | undefined;
            matchOutcome?: number | undefined;
            roundsWon?: number | undefined;
            roundsLost?: number | undefined;
            statScore?: number | undefined;
            statDeaths?: number | undefined;
            statMvps?: number | undefined;
            enemyKills?: number | undefined;
            enemyHeadshots?: number | undefined;
            enemy2ks?: number | undefined;
            enemy3ks?: number | undefined;
            enemy4ks?: number | undefined;
            totalDamage?: number | undefined;
            engagementsEntryCount?: number | undefined;
            engagementsEntryWins?: number | undefined;
            engagements1v1Count?: number | undefined;
            engagements1v1Wins?: number | undefined;
            engagements1v2Count?: number | undefined;
            engagements1v2Wins?: number | undefined;
            utilityCount?: number | undefined;
            utilitySuccess?: number | undefined;
            flashCount?: number | undefined;
            flashSuccess?: number | undefined;
            mates?: (number[] & number[] & Record<Exclude<keyof I["player"]["mates"], keyof number[]>, never>) | undefined;
        } & Record<Exclude<keyof I["player"], keyof DeepPlayerStatsEntry>, never>) | undefined;
        events?: ({
            accountid?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            eventId?: number | undefined;
            eventType?: number | undefined;
            bPlayingCt?: boolean | undefined;
            userPosX?: number | undefined;
            userPosY?: number | undefined;
            userPosZ?: number | undefined;
            userDefidx?: number | undefined;
            otherPosX?: number | undefined;
            otherPosY?: number | undefined;
            otherPosZ?: number | undefined;
            otherDefidx?: number | undefined;
            eventData?: number | undefined;
        }[] & ({
            accountid?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            eventId?: number | undefined;
            eventType?: number | undefined;
            bPlayingCt?: boolean | undefined;
            userPosX?: number | undefined;
            userPosY?: number | undefined;
            userPosZ?: number | undefined;
            userDefidx?: number | undefined;
            otherPosX?: number | undefined;
            otherPosY?: number | undefined;
            otherPosZ?: number | undefined;
            otherDefidx?: number | undefined;
            eventData?: number | undefined;
        } & {
            accountid?: number | undefined;
            matchId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["events"][number]["matchId"], keyof Long.Long>, never>) | undefined;
            eventId?: number | undefined;
            eventType?: number | undefined;
            bPlayingCt?: boolean | undefined;
            userPosX?: number | undefined;
            userPosY?: number | undefined;
            userPosZ?: number | undefined;
            userDefidx?: number | undefined;
            otherPosX?: number | undefined;
            otherPosY?: number | undefined;
            otherPosZ?: number | undefined;
            otherDefidx?: number | undefined;
            eventData?: number | undefined;
        } & Record<Exclude<keyof I["events"][number], keyof DeepPlayerMatchEvent>, never>)[] & Record<Exclude<keyof I["events"], keyof {
            accountid?: number | undefined;
            matchId?: string | number | Long.Long | undefined;
            eventId?: number | undefined;
            eventType?: number | undefined;
            bPlayingCt?: boolean | undefined;
            userPosX?: number | undefined;
            userPosY?: number | undefined;
            userPosZ?: number | undefined;
            userDefidx?: number | undefined;
            otherPosX?: number | undefined;
            otherPosY?: number | undefined;
            otherPosZ?: number | undefined;
            otherDefidx?: number | undefined;
            eventData?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15ClientDeepStats_DeepStatsMatch>, never>>(object: I): CMsgGCCStrike15ClientDeepStats_DeepStatsMatch;
};
export declare const CMsgGCCStrike15V2WatchInfoUsers: {
    encode(message: CMsgGCCStrike15V2WatchInfoUsers, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2WatchInfoUsers;
    fromPartial<I extends {
        requestId?: number | undefined;
        accountIds?: number[] | undefined;
        watchableMatchInfos?: {
            serverIp?: number | undefined;
            tvPort?: number | undefined;
            tvSpectators?: number | undefined;
            tvTime?: number | undefined;
            tvWatchPassword?: Uint8Array | undefined;
            clDecryptdataKey?: string | number | Long.Long | undefined;
            clDecryptdataKeyPub?: string | number | Long.Long | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            serverId?: string | number | Long.Long | undefined;
            matchId?: string | number | Long.Long | undefined;
            reservationId?: string | number | Long.Long | undefined;
        }[] | undefined;
        extendedTimeout?: number | undefined;
    } & {
        requestId?: number | undefined;
        accountIds?: (number[] & number[] & Record<Exclude<keyof I["accountIds"], keyof number[]>, never>) | undefined;
        watchableMatchInfos?: ({
            serverIp?: number | undefined;
            tvPort?: number | undefined;
            tvSpectators?: number | undefined;
            tvTime?: number | undefined;
            tvWatchPassword?: Uint8Array | undefined;
            clDecryptdataKey?: string | number | Long.Long | undefined;
            clDecryptdataKeyPub?: string | number | Long.Long | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            serverId?: string | number | Long.Long | undefined;
            matchId?: string | number | Long.Long | undefined;
            reservationId?: string | number | Long.Long | undefined;
        }[] & ({
            serverIp?: number | undefined;
            tvPort?: number | undefined;
            tvSpectators?: number | undefined;
            tvTime?: number | undefined;
            tvWatchPassword?: Uint8Array | undefined;
            clDecryptdataKey?: string | number | Long.Long | undefined;
            clDecryptdataKeyPub?: string | number | Long.Long | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            serverId?: string | number | Long.Long | undefined;
            matchId?: string | number | Long.Long | undefined;
            reservationId?: string | number | Long.Long | undefined;
        } & {
            serverIp?: number | undefined;
            tvPort?: number | undefined;
            tvSpectators?: number | undefined;
            tvTime?: number | undefined;
            tvWatchPassword?: Uint8Array | undefined;
            clDecryptdataKey?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchableMatchInfos"][number]["clDecryptdataKey"], keyof Long.Long>, never>) | undefined;
            clDecryptdataKeyPub?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchableMatchInfos"][number]["clDecryptdataKeyPub"], keyof Long.Long>, never>) | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            serverId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchableMatchInfos"][number]["serverId"], keyof Long.Long>, never>) | undefined;
            matchId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchableMatchInfos"][number]["matchId"], keyof Long.Long>, never>) | undefined;
            reservationId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchableMatchInfos"][number]["reservationId"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["watchableMatchInfos"][number], keyof WatchableMatchInfo>, never>)[] & Record<Exclude<keyof I["watchableMatchInfos"], keyof {
            serverIp?: number | undefined;
            tvPort?: number | undefined;
            tvSpectators?: number | undefined;
            tvTime?: number | undefined;
            tvWatchPassword?: Uint8Array | undefined;
            clDecryptdataKey?: string | number | Long.Long | undefined;
            clDecryptdataKeyPub?: string | number | Long.Long | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            serverId?: string | number | Long.Long | undefined;
            matchId?: string | number | Long.Long | undefined;
            reservationId?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        extendedTimeout?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2WatchInfoUsers>, never>>(object: I): CMsgGCCStrike15V2WatchInfoUsers;
};
export declare const CMsgGCCStrike15V2ClientRequestPlayersProfile: {
    encode(message: CMsgGCCStrike15V2ClientRequestPlayersProfile, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientRequestPlayersProfile;
    fromPartial<I extends {
        requestIdDeprecated?: number | undefined;
        accountIdsDeprecated?: number[] | undefined;
        accountId?: number | undefined;
        requestLevel?: number | undefined;
    } & {
        requestIdDeprecated?: number | undefined;
        accountIdsDeprecated?: (number[] & number[] & Record<Exclude<keyof I["accountIdsDeprecated"], keyof number[]>, never>) | undefined;
        accountId?: number | undefined;
        requestLevel?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientRequestPlayersProfile>, never>>(object: I): CMsgGCCStrike15V2ClientRequestPlayersProfile;
};
export declare const CMsgGCCStrike15V2PlayersProfile: {
    encode(message: CMsgGCCStrike15V2PlayersProfile, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PlayersProfile;
    fromPartial<I extends {
        requestId?: number | undefined;
        accountProfiles?: {
            accountId?: number | undefined;
            ongoingmatch?: {
                serverid?: string | number | Long.Long | undefined;
                directUdpIp?: number | undefined;
                directUdpPort?: number | undefined;
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                serverAddress?: string | undefined;
            } | undefined;
            globalStats?: {
                playersOnline?: number | undefined;
                serversOnline?: number | undefined;
                playersSearching?: number | undefined;
                serversAvailable?: number | undefined;
                ongoingMatches?: number | undefined;
                searchTimeAvg?: number | undefined;
                searchStatistics?: {
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                }[] | undefined;
                mainPostUrl?: string | undefined;
                requiredAppidVersion?: number | undefined;
                pricesheetVersion?: number | undefined;
                twitchStreamsVersion?: number | undefined;
                activeTournamentEventid?: number | undefined;
                activeSurveyId?: number | undefined;
                rtime32Cur?: number | undefined;
                rtime32EventStart?: number | undefined;
            } | undefined;
            penaltySeconds?: number | undefined;
            penaltyReason?: number | undefined;
            vacBanned?: number | undefined;
            ranking?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            commendation?: {
                cmdFriendly?: number | undefined;
                cmdTeaching?: number | undefined;
                cmdLeader?: number | undefined;
            } | undefined;
            medals?: {
                displayItemsDefidx?: number[] | undefined;
                featuredDisplayItemDefidx?: number | undefined;
            } | undefined;
            myCurrentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            myCurrentEventTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            myCurrentTeam?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } | undefined;
            myCurrentEventStages?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            }[] | undefined;
            surveyVote?: number | undefined;
            activity?: {
                activity?: number | undefined;
                mode?: number | undefined;
                map?: number | undefined;
                matchid?: string | number | Long.Long | undefined;
            } | undefined;
            playerLevel?: number | undefined;
            playerCurXp?: number | undefined;
            playerXpBonusFlags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        requestId?: number | undefined;
        accountProfiles?: ({
            accountId?: number | undefined;
            ongoingmatch?: {
                serverid?: string | number | Long.Long | undefined;
                directUdpIp?: number | undefined;
                directUdpPort?: number | undefined;
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                serverAddress?: string | undefined;
            } | undefined;
            globalStats?: {
                playersOnline?: number | undefined;
                serversOnline?: number | undefined;
                playersSearching?: number | undefined;
                serversAvailable?: number | undefined;
                ongoingMatches?: number | undefined;
                searchTimeAvg?: number | undefined;
                searchStatistics?: {
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                }[] | undefined;
                mainPostUrl?: string | undefined;
                requiredAppidVersion?: number | undefined;
                pricesheetVersion?: number | undefined;
                twitchStreamsVersion?: number | undefined;
                activeTournamentEventid?: number | undefined;
                activeSurveyId?: number | undefined;
                rtime32Cur?: number | undefined;
                rtime32EventStart?: number | undefined;
            } | undefined;
            penaltySeconds?: number | undefined;
            penaltyReason?: number | undefined;
            vacBanned?: number | undefined;
            ranking?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            commendation?: {
                cmdFriendly?: number | undefined;
                cmdTeaching?: number | undefined;
                cmdLeader?: number | undefined;
            } | undefined;
            medals?: {
                displayItemsDefidx?: number[] | undefined;
                featuredDisplayItemDefidx?: number | undefined;
            } | undefined;
            myCurrentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            myCurrentEventTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            myCurrentTeam?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } | undefined;
            myCurrentEventStages?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            }[] | undefined;
            surveyVote?: number | undefined;
            activity?: {
                activity?: number | undefined;
                mode?: number | undefined;
                map?: number | undefined;
                matchid?: string | number | Long.Long | undefined;
            } | undefined;
            playerLevel?: number | undefined;
            playerCurXp?: number | undefined;
            playerXpBonusFlags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
        }[] & ({
            accountId?: number | undefined;
            ongoingmatch?: {
                serverid?: string | number | Long.Long | undefined;
                directUdpIp?: number | undefined;
                directUdpPort?: number | undefined;
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                serverAddress?: string | undefined;
            } | undefined;
            globalStats?: {
                playersOnline?: number | undefined;
                serversOnline?: number | undefined;
                playersSearching?: number | undefined;
                serversAvailable?: number | undefined;
                ongoingMatches?: number | undefined;
                searchTimeAvg?: number | undefined;
                searchStatistics?: {
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                }[] | undefined;
                mainPostUrl?: string | undefined;
                requiredAppidVersion?: number | undefined;
                pricesheetVersion?: number | undefined;
                twitchStreamsVersion?: number | undefined;
                activeTournamentEventid?: number | undefined;
                activeSurveyId?: number | undefined;
                rtime32Cur?: number | undefined;
                rtime32EventStart?: number | undefined;
            } | undefined;
            penaltySeconds?: number | undefined;
            penaltyReason?: number | undefined;
            vacBanned?: number | undefined;
            ranking?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            commendation?: {
                cmdFriendly?: number | undefined;
                cmdTeaching?: number | undefined;
                cmdLeader?: number | undefined;
            } | undefined;
            medals?: {
                displayItemsDefidx?: number[] | undefined;
                featuredDisplayItemDefidx?: number | undefined;
            } | undefined;
            myCurrentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            myCurrentEventTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            myCurrentTeam?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } | undefined;
            myCurrentEventStages?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            }[] | undefined;
            surveyVote?: number | undefined;
            activity?: {
                activity?: number | undefined;
                mode?: number | undefined;
                map?: number | undefined;
                matchid?: string | number | Long.Long | undefined;
            } | undefined;
            playerLevel?: number | undefined;
            playerCurXp?: number | undefined;
            playerXpBonusFlags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
        } & {
            accountId?: number | undefined;
            ongoingmatch?: ({
                serverid?: string | number | Long.Long | undefined;
                directUdpIp?: number | undefined;
                directUdpPort?: number | undefined;
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                serverAddress?: string | undefined;
            } & {
                serverid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["serverid"], keyof Long.Long>, never>) | undefined;
                directUdpIp?: number | undefined;
                directUdpPort?: number | undefined;
                reservationid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservationid"], keyof Long.Long>, never>) | undefined;
                reservation?: ({
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountIds?: (number[] & number[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["rankings"], keyof {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[]>, never>) | undefined;
                    encryptionKey?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                    encryptionKeyPub?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                    partyIds?: (number[] & number[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                    whitelist?: ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] & ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["whitelist"], keyof {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[]>, never>) | undefined;
                    tvMasterSteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                    tournamentEvent?: ({
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                    tournamentTeams?: ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] & ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    } & {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] & ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["tournamentTeams"], keyof {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[]>, never>) | undefined;
                    tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                    tvRelaySteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                    preMatchData?: ({
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } & {
                        predictionsPct?: number | undefined;
                        draft?: ({
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } & {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] & ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                        stats?: ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] & ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        } & {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["preMatchData"]["stats"], keyof {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[]>, never>) | undefined;
                        wins?: (number[] & number[] & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
                map?: string | undefined;
                serverAddress?: string | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["ongoingmatch"], keyof CMsgGCCStrike15V2MatchmakingGC2ClientReserve>, never>) | undefined;
            globalStats?: ({
                playersOnline?: number | undefined;
                serversOnline?: number | undefined;
                playersSearching?: number | undefined;
                serversAvailable?: number | undefined;
                ongoingMatches?: number | undefined;
                searchTimeAvg?: number | undefined;
                searchStatistics?: {
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                }[] | undefined;
                mainPostUrl?: string | undefined;
                requiredAppidVersion?: number | undefined;
                pricesheetVersion?: number | undefined;
                twitchStreamsVersion?: number | undefined;
                activeTournamentEventid?: number | undefined;
                activeSurveyId?: number | undefined;
                rtime32Cur?: number | undefined;
                rtime32EventStart?: number | undefined;
            } & {
                playersOnline?: number | undefined;
                serversOnline?: number | undefined;
                playersSearching?: number | undefined;
                serversAvailable?: number | undefined;
                ongoingMatches?: number | undefined;
                searchTimeAvg?: number | undefined;
                searchStatistics?: ({
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                }[] & ({
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                } & {
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                } & Record<Exclude<keyof I["accountProfiles"][number]["globalStats"]["searchStatistics"][number], keyof DetailedSearchStatistic>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["globalStats"]["searchStatistics"], keyof {
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                }[]>, never>) | undefined;
                mainPostUrl?: string | undefined;
                requiredAppidVersion?: number | undefined;
                pricesheetVersion?: number | undefined;
                twitchStreamsVersion?: number | undefined;
                activeTournamentEventid?: number | undefined;
                activeSurveyId?: number | undefined;
                rtime32Cur?: number | undefined;
                rtime32EventStart?: number | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["globalStats"], keyof GlobalStatistics>, never>) | undefined;
            penaltySeconds?: number | undefined;
            penaltyReason?: number | undefined;
            vacBanned?: number | undefined;
            ranking?: ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["ranking"], keyof PlayerRankingInfo>, never>) | undefined;
            commendation?: ({
                cmdFriendly?: number | undefined;
                cmdTeaching?: number | undefined;
                cmdLeader?: number | undefined;
            } & {
                cmdFriendly?: number | undefined;
                cmdTeaching?: number | undefined;
                cmdLeader?: number | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["commendation"], keyof PlayerCommendationInfo>, never>) | undefined;
            medals?: ({
                displayItemsDefidx?: number[] | undefined;
                featuredDisplayItemDefidx?: number | undefined;
            } & {
                displayItemsDefidx?: (number[] & number[] & Record<Exclude<keyof I["accountProfiles"][number]["medals"]["displayItemsDefidx"], keyof number[]>, never>) | undefined;
                featuredDisplayItemDefidx?: number | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["medals"], keyof PlayerMedalsInfo>, never>) | undefined;
            myCurrentEvent?: ({
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentEvent"], keyof TournamentEvent>, never>) | undefined;
            myCurrentEventTeams?: ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] & ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } & {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentEventTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentEventTeams"][number]["players"], keyof {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentEventTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentEventTeams"], keyof {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            myCurrentTeam?: ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } & {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentTeam"]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentTeam"]["players"], keyof {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentTeam"], keyof TournamentTeam>, never>) | undefined;
            myCurrentEventStages?: ({
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            }[] & ({
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentEventStages"][number], keyof TournamentEvent>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["myCurrentEventStages"], keyof {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            }[]>, never>) | undefined;
            surveyVote?: number | undefined;
            activity?: ({
                activity?: number | undefined;
                mode?: number | undefined;
                map?: number | undefined;
                matchid?: string | number | Long.Long | undefined;
            } & {
                activity?: number | undefined;
                mode?: number | undefined;
                map?: number | undefined;
                matchid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["accountProfiles"][number]["activity"]["matchid"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["activity"], keyof AccountActivity>, never>) | undefined;
            playerLevel?: number | undefined;
            playerCurXp?: number | undefined;
            playerXpBonusFlags?: number | undefined;
            rankings?: ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] & ({
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["accountProfiles"][number]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["accountProfiles"][number]["rankings"], keyof {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["accountProfiles"][number], keyof CMsgGCCStrike15V2MatchmakingGC2ClientHello>, never>)[] & Record<Exclude<keyof I["accountProfiles"], keyof {
            accountId?: number | undefined;
            ongoingmatch?: {
                serverid?: string | number | Long.Long | undefined;
                directUdpIp?: number | undefined;
                directUdpPort?: number | undefined;
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                serverAddress?: string | undefined;
            } | undefined;
            globalStats?: {
                playersOnline?: number | undefined;
                serversOnline?: number | undefined;
                playersSearching?: number | undefined;
                serversAvailable?: number | undefined;
                ongoingMatches?: number | undefined;
                searchTimeAvg?: number | undefined;
                searchStatistics?: {
                    gameType?: number | undefined;
                    searchTimeAvg?: number | undefined;
                    playersSearching?: number | undefined;
                }[] | undefined;
                mainPostUrl?: string | undefined;
                requiredAppidVersion?: number | undefined;
                pricesheetVersion?: number | undefined;
                twitchStreamsVersion?: number | undefined;
                activeTournamentEventid?: number | undefined;
                activeSurveyId?: number | undefined;
                rtime32Cur?: number | undefined;
                rtime32EventStart?: number | undefined;
            } | undefined;
            penaltySeconds?: number | undefined;
            penaltyReason?: number | undefined;
            vacBanned?: number | undefined;
            ranking?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            commendation?: {
                cmdFriendly?: number | undefined;
                cmdTeaching?: number | undefined;
                cmdLeader?: number | undefined;
            } | undefined;
            medals?: {
                displayItemsDefidx?: number[] | undefined;
                featuredDisplayItemDefidx?: number | undefined;
            } | undefined;
            myCurrentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            myCurrentEventTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            myCurrentTeam?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } | undefined;
            myCurrentEventStages?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            }[] | undefined;
            surveyVote?: number | undefined;
            activity?: {
                activity?: number | undefined;
                mode?: number | undefined;
                map?: number | undefined;
                matchid?: string | number | Long.Long | undefined;
            } | undefined;
            playerLevel?: number | undefined;
            playerCurXp?: number | undefined;
            playerXpBonusFlags?: number | undefined;
            rankings?: {
                accountId?: number | undefined;
                rankId?: number | undefined;
                wins?: number | undefined;
                rankChange?: number | undefined;
                rankTypeId?: number | undefined;
                tvControl?: number | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2PlayersProfile>, never>>(object: I): CMsgGCCStrike15V2PlayersProfile;
};
export declare const CMsgGCCStrike15V2PlayerOverwatchCaseUpdate: {
    encode(message: CMsgGCCStrike15V2PlayerOverwatchCaseUpdate, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PlayerOverwatchCaseUpdate;
    fromPartial<I extends {
        caseid?: string | number | Long.Long | undefined;
        suspectid?: number | undefined;
        fractionid?: number | undefined;
        rptAimbot?: number | undefined;
        rptWallhack?: number | undefined;
        rptSpeedhack?: number | undefined;
        rptTeamharm?: number | undefined;
        reason?: number | undefined;
    } & {
        caseid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["caseid"], keyof Long.Long>, never>) | undefined;
        suspectid?: number | undefined;
        fractionid?: number | undefined;
        rptAimbot?: number | undefined;
        rptWallhack?: number | undefined;
        rptSpeedhack?: number | undefined;
        rptTeamharm?: number | undefined;
        reason?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2PlayerOverwatchCaseUpdate>, never>>(object: I): CMsgGCCStrike15V2PlayerOverwatchCaseUpdate;
};
export declare const CMsgGCCStrike15V2PlayerOverwatchCaseAssignment: {
    encode(message: CMsgGCCStrike15V2PlayerOverwatchCaseAssignment, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PlayerOverwatchCaseAssignment;
    fromPartial<I extends {
        caseid?: string | number | Long.Long | undefined;
        caseurl?: string | undefined;
        verdict?: number | undefined;
        timestamp?: number | undefined;
        throttleseconds?: number | undefined;
        suspectid?: number | undefined;
        fractionid?: number | undefined;
        numrounds?: number | undefined;
        fractionrounds?: number | undefined;
        streakconvictions?: number | undefined;
        reason?: number | undefined;
    } & {
        caseid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["caseid"], keyof Long.Long>, never>) | undefined;
        caseurl?: string | undefined;
        verdict?: number | undefined;
        timestamp?: number | undefined;
        throttleseconds?: number | undefined;
        suspectid?: number | undefined;
        fractionid?: number | undefined;
        numrounds?: number | undefined;
        fractionrounds?: number | undefined;
        streakconvictions?: number | undefined;
        reason?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2PlayerOverwatchCaseAssignment>, never>>(object: I): CMsgGCCStrike15V2PlayerOverwatchCaseAssignment;
};
export declare const CMsgGCCStrike15V2PlayerOverwatchCaseStatus: {
    encode(message: CMsgGCCStrike15V2PlayerOverwatchCaseStatus, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PlayerOverwatchCaseStatus;
    fromPartial<I extends {
        caseid?: string | number | Long.Long | undefined;
        statusid?: number | undefined;
    } & {
        caseid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["caseid"], keyof Long.Long>, never>) | undefined;
        statusid?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2PlayerOverwatchCaseStatus>, never>>(object: I): CMsgGCCStrike15V2PlayerOverwatchCaseStatus;
};
export declare const CClientHeaderOverwatchEvidence: {
    encode(message: CClientHeaderOverwatchEvidence, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CClientHeaderOverwatchEvidence;
    fromPartial<I extends {
        accountid?: number | undefined;
        caseid?: string | number | Long.Long | undefined;
    } & {
        accountid?: number | undefined;
        caseid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["caseid"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CClientHeaderOverwatchEvidence>, never>>(object: I): CClientHeaderOverwatchEvidence;
};
export declare const CMsgGCCStrike15V2GC2ClientTextMsg: {
    encode(message: CMsgGCCStrike15V2GC2ClientTextMsg, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GC2ClientTextMsg;
    fromPartial<I extends {
        id?: number | undefined;
        type?: number | undefined;
        payload?: Uint8Array | undefined;
    } & {
        id?: number | undefined;
        type?: number | undefined;
        payload?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GC2ClientTextMsg>, never>>(object: I): CMsgGCCStrike15V2GC2ClientTextMsg;
};
export declare const CMsgGCCStrike15V2Client2GCTextMsg: {
    encode(message: CMsgGCCStrike15V2Client2GCTextMsg, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Client2GCTextMsg;
    fromPartial<I extends {
        id?: number | undefined;
        args?: Uint8Array[] | undefined;
    } & {
        id?: number | undefined;
        args?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["args"], keyof Uint8Array[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Client2GCTextMsg>, never>>(object: I): CMsgGCCStrike15V2Client2GCTextMsg;
};
export declare const CMsgGCCStrike15V2MatchEndRunRewardDrops: {
    encode(message: CMsgGCCStrike15V2MatchEndRunRewardDrops, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchEndRunRewardDrops;
    fromPartial<I extends {
        serverinfo?: {
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            gcReservationSent?: string | number | Long.Long | undefined;
            serverVersion?: number | undefined;
            tvInfo?: {
                tvUdpPort?: number | undefined;
                tvWatchKey?: string | number | Long.Long | undefined;
                tvSlots?: number | undefined;
                tvClients?: number | undefined;
                tvProxies?: number | undefined;
                tvTime?: number | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tvLocalSlots?: number | undefined;
                tvLocalClients?: number | undefined;
                tvLocalProxies?: number | undefined;
                tvRelaySlots?: number | undefined;
                tvRelayClients?: number | undefined;
                tvRelayProxies?: number | undefined;
                tvRelayAddress?: number | undefined;
                tvRelayPort?: number | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                flags?: number | undefined;
            } | undefined;
            rewardPlayerAccounts?: number[] | undefined;
            idlePlayerAccounts?: number[] | undefined;
            rewardItemAttrDefIdx?: number | undefined;
            rewardItemAttrValue?: number | undefined;
            rewardItemAttrRewardIdx?: number | undefined;
            rewardDropList?: number | undefined;
            tournamentTag?: string | undefined;
            legacySteamdatagramPort?: number | undefined;
            steamdatagramRouting?: number | undefined;
            testToken?: number | undefined;
            flags?: number | undefined;
        } | undefined;
        matchEndQuestData?: {
            playerQuestData?: {
                questerAccountId?: number | undefined;
                questItemData?: {
                    questId?: string | number | Long.Long | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                }[] | undefined;
                xpProgressData?: {
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                }[] | undefined;
                timePlayed?: number | undefined;
                mmGameMode?: number | undefined;
                itemUpdates?: {
                    itemId?: string | number | Long.Long | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                }[] | undefined;
                operationPointsEligible?: boolean | undefined;
                userstatchanges?: {
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            binaryData?: Uint8Array | undefined;
            mmGameMode?: number | undefined;
            missionlbsdata?: {
                questId?: string | number | Long.Long | undefined;
                score?: number | undefined;
                accountentries?: {
                    accountid?: number | undefined;
                    entries?: {
                        tag?: number | undefined;
                        val?: number | undefined;
                    }[] | undefined;
                }[] | undefined;
                matchentries?: {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
    } & {
        serverinfo?: ({
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            gcReservationSent?: string | number | Long.Long | undefined;
            serverVersion?: number | undefined;
            tvInfo?: {
                tvUdpPort?: number | undefined;
                tvWatchKey?: string | number | Long.Long | undefined;
                tvSlots?: number | undefined;
                tvClients?: number | undefined;
                tvProxies?: number | undefined;
                tvTime?: number | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tvLocalSlots?: number | undefined;
                tvLocalClients?: number | undefined;
                tvLocalProxies?: number | undefined;
                tvRelaySlots?: number | undefined;
                tvRelayClients?: number | undefined;
                tvRelayProxies?: number | undefined;
                tvRelayAddress?: number | undefined;
                tvRelayPort?: number | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                flags?: number | undefined;
            } | undefined;
            rewardPlayerAccounts?: number[] | undefined;
            idlePlayerAccounts?: number[] | undefined;
            rewardItemAttrDefIdx?: number | undefined;
            rewardItemAttrValue?: number | undefined;
            rewardItemAttrRewardIdx?: number | undefined;
            rewardDropList?: number | undefined;
            tournamentTag?: string | undefined;
            legacySteamdatagramPort?: number | undefined;
            steamdatagramRouting?: number | undefined;
            testToken?: number | undefined;
            flags?: number | undefined;
        } & {
            reservationid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["serverinfo"]["reservationid"], keyof Long.Long>, never>) | undefined;
            reservation?: ({
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountIds?: (number[] & number[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                gameType?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["rankings"], keyof {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[]>, never>) | undefined;
                encryptionKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                encryptionKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                partyIds?: (number[] & number[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                whitelist?: ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] & ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["whitelist"], keyof {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[]>, never>) | undefined;
                tvMasterSteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                tournamentEvent?: ({
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                tournamentTeams?: ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] & ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                } & {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & Record<Exclude<keyof I["serverinfo"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["tournamentTeams"], keyof {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                tvRelaySteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                preMatchData?: ({
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } & {
                    predictionsPct?: number | undefined;
                    draft?: ({
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] & ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & Record<Exclude<keyof I["serverinfo"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["serverinfo"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                    stats?: ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] & ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    } & {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["serverinfo"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["preMatchData"]["stats"], keyof {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[]>, never>) | undefined;
                    wins?: (number[] & number[] & Record<Exclude<keyof I["serverinfo"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                } & Record<Exclude<keyof I["serverinfo"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["serverinfo"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
            map?: string | undefined;
            gcReservationSent?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["serverinfo"]["gcReservationSent"], keyof Long.Long>, never>) | undefined;
            serverVersion?: number | undefined;
            tvInfo?: ({
                tvUdpPort?: number | undefined;
                tvWatchKey?: string | number | Long.Long | undefined;
                tvSlots?: number | undefined;
                tvClients?: number | undefined;
                tvProxies?: number | undefined;
                tvTime?: number | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tvLocalSlots?: number | undefined;
                tvLocalClients?: number | undefined;
                tvLocalProxies?: number | undefined;
                tvRelaySlots?: number | undefined;
                tvRelayClients?: number | undefined;
                tvRelayProxies?: number | undefined;
                tvRelayAddress?: number | undefined;
                tvRelayPort?: number | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                flags?: number | undefined;
            } & {
                tvUdpPort?: number | undefined;
                tvWatchKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["serverinfo"]["tvInfo"]["tvWatchKey"], keyof Long.Long>, never>) | undefined;
                tvSlots?: number | undefined;
                tvClients?: number | undefined;
                tvProxies?: number | undefined;
                tvTime?: number | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                tvMasterSteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["serverinfo"]["tvInfo"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                tvLocalSlots?: number | undefined;
                tvLocalClients?: number | undefined;
                tvLocalProxies?: number | undefined;
                tvRelaySlots?: number | undefined;
                tvRelayClients?: number | undefined;
                tvRelayProxies?: number | undefined;
                tvRelayAddress?: number | undefined;
                tvRelayPort?: number | undefined;
                tvRelaySteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["serverinfo"]["tvInfo"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                flags?: number | undefined;
            } & Record<Exclude<keyof I["serverinfo"]["tvInfo"], keyof ServerHltvInfo>, never>) | undefined;
            rewardPlayerAccounts?: (number[] & number[] & Record<Exclude<keyof I["serverinfo"]["rewardPlayerAccounts"], keyof number[]>, never>) | undefined;
            idlePlayerAccounts?: (number[] & number[] & Record<Exclude<keyof I["serverinfo"]["idlePlayerAccounts"], keyof number[]>, never>) | undefined;
            rewardItemAttrDefIdx?: number | undefined;
            rewardItemAttrValue?: number | undefined;
            rewardItemAttrRewardIdx?: number | undefined;
            rewardDropList?: number | undefined;
            tournamentTag?: string | undefined;
            legacySteamdatagramPort?: number | undefined;
            steamdatagramRouting?: number | undefined;
            testToken?: number | undefined;
            flags?: number | undefined;
        } & Record<Exclude<keyof I["serverinfo"], keyof CMsgGCCStrike15V2MatchmakingServerReservationResponse>, never>) | undefined;
        matchEndQuestData?: ({
            playerQuestData?: {
                questerAccountId?: number | undefined;
                questItemData?: {
                    questId?: string | number | Long.Long | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                }[] | undefined;
                xpProgressData?: {
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                }[] | undefined;
                timePlayed?: number | undefined;
                mmGameMode?: number | undefined;
                itemUpdates?: {
                    itemId?: string | number | Long.Long | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                }[] | undefined;
                operationPointsEligible?: boolean | undefined;
                userstatchanges?: {
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            binaryData?: Uint8Array | undefined;
            mmGameMode?: number | undefined;
            missionlbsdata?: {
                questId?: string | number | Long.Long | undefined;
                score?: number | undefined;
                accountentries?: {
                    accountid?: number | undefined;
                    entries?: {
                        tag?: number | undefined;
                        val?: number | undefined;
                    }[] | undefined;
                }[] | undefined;
                matchentries?: {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            playerQuestData?: ({
                questerAccountId?: number | undefined;
                questItemData?: {
                    questId?: string | number | Long.Long | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                }[] | undefined;
                xpProgressData?: {
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                }[] | undefined;
                timePlayed?: number | undefined;
                mmGameMode?: number | undefined;
                itemUpdates?: {
                    itemId?: string | number | Long.Long | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                }[] | undefined;
                operationPointsEligible?: boolean | undefined;
                userstatchanges?: {
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                }[] | undefined;
            }[] & ({
                questerAccountId?: number | undefined;
                questItemData?: {
                    questId?: string | number | Long.Long | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                }[] | undefined;
                xpProgressData?: {
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                }[] | undefined;
                timePlayed?: number | undefined;
                mmGameMode?: number | undefined;
                itemUpdates?: {
                    itemId?: string | number | Long.Long | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                }[] | undefined;
                operationPointsEligible?: boolean | undefined;
                userstatchanges?: {
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                }[] | undefined;
            } & {
                questerAccountId?: number | undefined;
                questItemData?: ({
                    questId?: string | number | Long.Long | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                }[] & ({
                    questId?: string | number | Long.Long | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                } & {
                    questId?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["questItemData"][number]["questId"], keyof Long.Long>, never>) | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                } & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["questItemData"][number], keyof PlayerQuestData_QuestItemData>, never>)[] & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["questItemData"], keyof {
                    questId?: string | number | Long.Long | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                }[]>, never>) | undefined;
                xpProgressData?: ({
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                }[] & ({
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                } & {
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                } & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["xpProgressData"][number], keyof XpProgressData>, never>)[] & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["xpProgressData"], keyof {
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                }[]>, never>) | undefined;
                timePlayed?: number | undefined;
                mmGameMode?: number | undefined;
                itemUpdates?: ({
                    itemId?: string | number | Long.Long | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                }[] & ({
                    itemId?: string | number | Long.Long | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                } & {
                    itemId?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["itemUpdates"][number]["itemId"], keyof Long.Long>, never>) | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                } & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["itemUpdates"][number], keyof MatchEndItemUpdates>, never>)[] & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["itemUpdates"], keyof {
                    itemId?: string | number | Long.Long | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                }[]>, never>) | undefined;
                operationPointsEligible?: boolean | undefined;
                userstatchanges?: ({
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                }[] & ({
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                } & {
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                } & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["userstatchanges"][number], keyof CMsgCsgoSteamUserStatChange>, never>)[] & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number]["userstatchanges"], keyof {
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"][number], keyof PlayerQuestData>, never>)[] & Record<Exclude<keyof I["matchEndQuestData"]["playerQuestData"], keyof {
                questerAccountId?: number | undefined;
                questItemData?: {
                    questId?: string | number | Long.Long | undefined;
                    questNormalPointsEarned?: number | undefined;
                    questBonusPointsEarned?: number | undefined;
                }[] | undefined;
                xpProgressData?: {
                    xpPoints?: number | undefined;
                    xpCategory?: number | undefined;
                }[] | undefined;
                timePlayed?: number | undefined;
                mmGameMode?: number | undefined;
                itemUpdates?: {
                    itemId?: string | number | Long.Long | undefined;
                    itemAttrDefidx?: number | undefined;
                    itemAttrDeltaValue?: number | undefined;
                }[] | undefined;
                operationPointsEligible?: boolean | undefined;
                userstatchanges?: {
                    ecsgosteamuserstat?: number | undefined;
                    delta?: number | undefined;
                    absolute?: boolean | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            binaryData?: Uint8Array | undefined;
            mmGameMode?: number | undefined;
            missionlbsdata?: ({
                questId?: string | number | Long.Long | undefined;
                score?: number | undefined;
                accountentries?: {
                    accountid?: number | undefined;
                    entries?: {
                        tag?: number | undefined;
                        val?: number | undefined;
                    }[] | undefined;
                }[] | undefined;
                matchentries?: {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] | undefined;
            } & {
                questId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matchEndQuestData"]["missionlbsdata"]["questId"], keyof Long.Long>, never>) | undefined;
                score?: number | undefined;
                accountentries?: ({
                    accountid?: number | undefined;
                    entries?: {
                        tag?: number | undefined;
                        val?: number | undefined;
                    }[] | undefined;
                }[] & ({
                    accountid?: number | undefined;
                    entries?: {
                        tag?: number | undefined;
                        val?: number | undefined;
                    }[] | undefined;
                } & {
                    accountid?: number | undefined;
                    entries?: ({
                        tag?: number | undefined;
                        val?: number | undefined;
                    }[] & ({
                        tag?: number | undefined;
                        val?: number | undefined;
                    } & {
                        tag?: number | undefined;
                        val?: number | undefined;
                    } & Record<Exclude<keyof I["matchEndQuestData"]["missionlbsdata"]["accountentries"][number]["entries"][number], keyof ScoreLeaderboardData_Entry>, never>)[] & Record<Exclude<keyof I["matchEndQuestData"]["missionlbsdata"]["accountentries"][number]["entries"], keyof {
                        tag?: number | undefined;
                        val?: number | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["matchEndQuestData"]["missionlbsdata"]["accountentries"][number], keyof ScoreLeaderboardData_AccountEntries>, never>)[] & Record<Exclude<keyof I["matchEndQuestData"]["missionlbsdata"]["accountentries"], keyof {
                    accountid?: number | undefined;
                    entries?: {
                        tag?: number | undefined;
                        val?: number | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                matchentries?: ({
                    tag?: number | undefined;
                    val?: number | undefined;
                }[] & ({
                    tag?: number | undefined;
                    val?: number | undefined;
                } & {
                    tag?: number | undefined;
                    val?: number | undefined;
                } & Record<Exclude<keyof I["matchEndQuestData"]["missionlbsdata"]["matchentries"][number], keyof ScoreLeaderboardData_Entry>, never>)[] & Record<Exclude<keyof I["matchEndQuestData"]["missionlbsdata"]["matchentries"], keyof {
                    tag?: number | undefined;
                    val?: number | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["matchEndQuestData"]["missionlbsdata"], keyof ScoreLeaderboardData>, never>) | undefined;
        } & Record<Exclude<keyof I["matchEndQuestData"], keyof CMsgGCServerQuestUpdateData>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchEndRunRewardDrops>, never>>(object: I): CMsgGCCStrike15V2MatchEndRunRewardDrops;
};
export declare const CEconItemPreviewDataBlock: {
    encode(message: CEconItemPreviewDataBlock, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CEconItemPreviewDataBlock;
    fromPartial<I extends {
        accountid?: number | undefined;
        itemid?: string | number | Long.Long | undefined;
        defindex?: number | undefined;
        paintindex?: number | undefined;
        rarity?: number | undefined;
        quality?: number | undefined;
        paintwear?: number | undefined;
        paintseed?: number | undefined;
        killeaterscoretype?: number | undefined;
        killeatervalue?: number | undefined;
        customname?: string | undefined;
        stickers?: {
            slot?: number | undefined;
            stickerId?: number | undefined;
            wear?: number | undefined;
            scale?: number | undefined;
            rotation?: number | undefined;
            tintId?: number | undefined;
        }[] | undefined;
        inventory?: number | undefined;
        origin?: number | undefined;
        questid?: number | undefined;
        dropreason?: number | undefined;
        musicindex?: number | undefined;
        entindex?: number | undefined;
    } & {
        accountid?: number | undefined;
        itemid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["itemid"], keyof Long.Long>, never>) | undefined;
        defindex?: number | undefined;
        paintindex?: number | undefined;
        rarity?: number | undefined;
        quality?: number | undefined;
        paintwear?: number | undefined;
        paintseed?: number | undefined;
        killeaterscoretype?: number | undefined;
        killeatervalue?: number | undefined;
        customname?: string | undefined;
        stickers?: ({
            slot?: number | undefined;
            stickerId?: number | undefined;
            wear?: number | undefined;
            scale?: number | undefined;
            rotation?: number | undefined;
            tintId?: number | undefined;
        }[] & ({
            slot?: number | undefined;
            stickerId?: number | undefined;
            wear?: number | undefined;
            scale?: number | undefined;
            rotation?: number | undefined;
            tintId?: number | undefined;
        } & {
            slot?: number | undefined;
            stickerId?: number | undefined;
            wear?: number | undefined;
            scale?: number | undefined;
            rotation?: number | undefined;
            tintId?: number | undefined;
        } & Record<Exclude<keyof I["stickers"][number], keyof CEconItemPreviewDataBlock_Sticker>, never>)[] & Record<Exclude<keyof I["stickers"], keyof {
            slot?: number | undefined;
            stickerId?: number | undefined;
            wear?: number | undefined;
            scale?: number | undefined;
            rotation?: number | undefined;
            tintId?: number | undefined;
        }[]>, never>) | undefined;
        inventory?: number | undefined;
        origin?: number | undefined;
        questid?: number | undefined;
        dropreason?: number | undefined;
        musicindex?: number | undefined;
        entindex?: number | undefined;
    } & Record<Exclude<keyof I, keyof CEconItemPreviewDataBlock>, never>>(object: I): CEconItemPreviewDataBlock;
};
export declare const CEconItemPreviewDataBlock_Sticker: {
    encode(message: CEconItemPreviewDataBlock_Sticker, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CEconItemPreviewDataBlock_Sticker;
    fromPartial<I extends {
        slot?: number | undefined;
        stickerId?: number | undefined;
        wear?: number | undefined;
        scale?: number | undefined;
        rotation?: number | undefined;
        tintId?: number | undefined;
    } & {
        slot?: number | undefined;
        stickerId?: number | undefined;
        wear?: number | undefined;
        scale?: number | undefined;
        rotation?: number | undefined;
        tintId?: number | undefined;
    } & Record<Exclude<keyof I, keyof CEconItemPreviewDataBlock_Sticker>, never>>(object: I): CEconItemPreviewDataBlock_Sticker;
};
export declare const CMsgGCCStrike15V2MatchEndRewardDropsNotification: {
    encode(message: CMsgGCCStrike15V2MatchEndRewardDropsNotification, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchEndRewardDropsNotification;
    fromPartial<I extends {
        iteminfo?: {
            accountid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } | undefined;
    } & {
        iteminfo?: ({
            accountid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } & {
            accountid?: number | undefined;
            itemid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["iteminfo"]["itemid"], keyof Long.Long>, never>) | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: ({
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] & ({
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            } & {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            } & Record<Exclude<keyof I["iteminfo"]["stickers"][number], keyof CEconItemPreviewDataBlock_Sticker>, never>)[] & Record<Exclude<keyof I["iteminfo"]["stickers"], keyof {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[]>, never>) | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } & Record<Exclude<keyof I["iteminfo"], keyof CEconItemPreviewDataBlock>, never>) | undefined;
    } & Record<Exclude<keyof I, "iteminfo">, never>>(object: I): CMsgGCCStrike15V2MatchEndRewardDropsNotification;
};
export declare const CMsgItemAcknowledged: {
    encode(message: CMsgItemAcknowledged, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgItemAcknowledged;
    fromPartial<I extends {
        iteminfo?: {
            accountid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } | undefined;
    } & {
        iteminfo?: ({
            accountid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } & {
            accountid?: number | undefined;
            itemid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["iteminfo"]["itemid"], keyof Long.Long>, never>) | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: ({
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] & ({
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            } & {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            } & Record<Exclude<keyof I["iteminfo"]["stickers"][number], keyof CEconItemPreviewDataBlock_Sticker>, never>)[] & Record<Exclude<keyof I["iteminfo"]["stickers"], keyof {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[]>, never>) | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } & Record<Exclude<keyof I["iteminfo"], keyof CEconItemPreviewDataBlock>, never>) | undefined;
    } & Record<Exclude<keyof I, "iteminfo">, never>>(object: I): CMsgItemAcknowledged;
};
export declare const CMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequest: {
    encode(message: CMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequest;
    fromPartial<I extends {
        paramS?: string | number | Long.Long | undefined;
        paramA?: string | number | Long.Long | undefined;
        paramD?: string | number | Long.Long | undefined;
        paramM?: string | number | Long.Long | undefined;
    } & {
        paramS?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["paramS"], keyof Long.Long>, never>) | undefined;
        paramA?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["paramA"], keyof Long.Long>, never>) | undefined;
        paramD?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["paramD"], keyof Long.Long>, never>) | undefined;
        paramM?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["paramM"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequest>, never>>(object: I): CMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequest;
};
export declare const CMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponse: {
    encode(message: CMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponse;
    fromPartial<I extends {
        iteminfo?: {
            accountid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } | undefined;
    } & {
        iteminfo?: ({
            accountid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } & {
            accountid?: number | undefined;
            itemid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["iteminfo"]["itemid"], keyof Long.Long>, never>) | undefined;
            defindex?: number | undefined;
            paintindex?: number | undefined;
            rarity?: number | undefined;
            quality?: number | undefined;
            paintwear?: number | undefined;
            paintseed?: number | undefined;
            killeaterscoretype?: number | undefined;
            killeatervalue?: number | undefined;
            customname?: string | undefined;
            stickers?: ({
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[] & ({
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            } & {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            } & Record<Exclude<keyof I["iteminfo"]["stickers"][number], keyof CEconItemPreviewDataBlock_Sticker>, never>)[] & Record<Exclude<keyof I["iteminfo"]["stickers"], keyof {
                slot?: number | undefined;
                stickerId?: number | undefined;
                wear?: number | undefined;
                scale?: number | undefined;
                rotation?: number | undefined;
                tintId?: number | undefined;
            }[]>, never>) | undefined;
            inventory?: number | undefined;
            origin?: number | undefined;
            questid?: number | undefined;
            dropreason?: number | undefined;
            musicindex?: number | undefined;
            entindex?: number | undefined;
        } & Record<Exclude<keyof I["iteminfo"], keyof CEconItemPreviewDataBlock>, never>) | undefined;
    } & Record<Exclude<keyof I, "iteminfo">, never>>(object: I): CMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponse;
};
export declare const CMsgGCCStrike15V2MatchListRequestCurrentLiveGames: {
    encode(_: CMsgGCCStrike15V2MatchListRequestCurrentLiveGames, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchListRequestCurrentLiveGames;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): CMsgGCCStrike15V2MatchListRequestCurrentLiveGames;
};
export declare const CMsgGCCStrike15V2MatchListRequestLiveGameForUser: {
    encode(message: CMsgGCCStrike15V2MatchListRequestLiveGameForUser, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchListRequestLiveGameForUser;
    fromPartial<I extends {
        accountid?: number | undefined;
    } & {
        accountid?: number | undefined;
    } & Record<Exclude<keyof I, "accountid">, never>>(object: I): CMsgGCCStrike15V2MatchListRequestLiveGameForUser;
};
export declare const CMsgGCCStrike15V2MatchListRequestRecentUserGames: {
    encode(message: CMsgGCCStrike15V2MatchListRequestRecentUserGames, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchListRequestRecentUserGames;
    fromPartial<I extends {
        accountid?: number | undefined;
    } & {
        accountid?: number | undefined;
    } & Record<Exclude<keyof I, "accountid">, never>>(object: I): CMsgGCCStrike15V2MatchListRequestRecentUserGames;
};
export declare const CMsgGCCStrike15V2MatchListRequestTournamentGames: {
    encode(message: CMsgGCCStrike15V2MatchListRequestTournamentGames, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchListRequestTournamentGames;
    fromPartial<I extends {
        eventid?: number | undefined;
    } & {
        eventid?: number | undefined;
    } & Record<Exclude<keyof I, "eventid">, never>>(object: I): CMsgGCCStrike15V2MatchListRequestTournamentGames;
};
export declare const CMsgGCCStrike15V2MatchListRequestFullGameInfo: {
    encode(message: CMsgGCCStrike15V2MatchListRequestFullGameInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchListRequestFullGameInfo;
    fromPartial<I extends {
        matchid?: string | number | Long.Long | undefined;
        outcomeid?: string | number | Long.Long | undefined;
        token?: number | undefined;
    } & {
        matchid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchid"], keyof Long.Long>, never>) | undefined;
        outcomeid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["outcomeid"], keyof Long.Long>, never>) | undefined;
        token?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchListRequestFullGameInfo>, never>>(object: I): CMsgGCCStrike15V2MatchListRequestFullGameInfo;
};
export declare const CDataGCCStrike15V2MatchInfo: {
    encode(message: CDataGCCStrike15V2MatchInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CDataGCCStrike15V2MatchInfo;
    fromPartial<I extends {
        matchid?: string | number | Long.Long | undefined;
        matchtime?: number | undefined;
        watchablematchinfo?: {
            serverIp?: number | undefined;
            tvPort?: number | undefined;
            tvSpectators?: number | undefined;
            tvTime?: number | undefined;
            tvWatchPassword?: Uint8Array | undefined;
            clDecryptdataKey?: string | number | Long.Long | undefined;
            clDecryptdataKeyPub?: string | number | Long.Long | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            serverId?: string | number | Long.Long | undefined;
            matchId?: string | number | Long.Long | undefined;
            reservationId?: string | number | Long.Long | undefined;
        } | undefined;
        roundstatsLegacy?: {
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            round?: number | undefined;
            kills?: number[] | undefined;
            assists?: number[] | undefined;
            deaths?: number[] | undefined;
            scores?: number[] | undefined;
            pings?: number[] | undefined;
            roundResult?: number | undefined;
            matchResult?: number | undefined;
            teamScores?: number[] | undefined;
            confirm?: {
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | Long.Long | undefined;
            } | undefined;
            reservationStage?: number | undefined;
            matchDuration?: number | undefined;
            enemyKills?: number[] | undefined;
            enemyHeadshots?: number[] | undefined;
            enemy3ks?: number[] | undefined;
            enemy4ks?: number[] | undefined;
            enemy5ks?: number[] | undefined;
            mvps?: number[] | undefined;
            spectatorsCount?: number | undefined;
            spectatorsCountTv?: number | undefined;
            spectatorsCountLnk?: number | undefined;
            enemyKillsAgg?: number[] | undefined;
            dropInfo?: {
                accountMvp?: number | undefined;
            } | undefined;
            bSwitchedTeams?: boolean | undefined;
            enemy2ks?: number[] | undefined;
            playerSpawned?: number[] | undefined;
            teamSpawnCount?: number[] | undefined;
            maxRounds?: number | undefined;
        } | undefined;
        roundstatsall?: {
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            round?: number | undefined;
            kills?: number[] | undefined;
            assists?: number[] | undefined;
            deaths?: number[] | undefined;
            scores?: number[] | undefined;
            pings?: number[] | undefined;
            roundResult?: number | undefined;
            matchResult?: number | undefined;
            teamScores?: number[] | undefined;
            confirm?: {
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | Long.Long | undefined;
            } | undefined;
            reservationStage?: number | undefined;
            matchDuration?: number | undefined;
            enemyKills?: number[] | undefined;
            enemyHeadshots?: number[] | undefined;
            enemy3ks?: number[] | undefined;
            enemy4ks?: number[] | undefined;
            enemy5ks?: number[] | undefined;
            mvps?: number[] | undefined;
            spectatorsCount?: number | undefined;
            spectatorsCountTv?: number | undefined;
            spectatorsCountLnk?: number | undefined;
            enemyKillsAgg?: number[] | undefined;
            dropInfo?: {
                accountMvp?: number | undefined;
            } | undefined;
            bSwitchedTeams?: boolean | undefined;
            enemy2ks?: number[] | undefined;
            playerSpawned?: number[] | undefined;
            teamSpawnCount?: number[] | undefined;
            maxRounds?: number | undefined;
        }[] | undefined;
    } & {
        matchid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchid"], keyof Long.Long>, never>) | undefined;
        matchtime?: number | undefined;
        watchablematchinfo?: ({
            serverIp?: number | undefined;
            tvPort?: number | undefined;
            tvSpectators?: number | undefined;
            tvTime?: number | undefined;
            tvWatchPassword?: Uint8Array | undefined;
            clDecryptdataKey?: string | number | Long.Long | undefined;
            clDecryptdataKeyPub?: string | number | Long.Long | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            serverId?: string | number | Long.Long | undefined;
            matchId?: string | number | Long.Long | undefined;
            reservationId?: string | number | Long.Long | undefined;
        } & {
            serverIp?: number | undefined;
            tvPort?: number | undefined;
            tvSpectators?: number | undefined;
            tvTime?: number | undefined;
            tvWatchPassword?: Uint8Array | undefined;
            clDecryptdataKey?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchablematchinfo"]["clDecryptdataKey"], keyof Long.Long>, never>) | undefined;
            clDecryptdataKeyPub?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchablematchinfo"]["clDecryptdataKeyPub"], keyof Long.Long>, never>) | undefined;
            gameType?: number | undefined;
            gameMapgroup?: string | undefined;
            gameMap?: string | undefined;
            serverId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchablematchinfo"]["serverId"], keyof Long.Long>, never>) | undefined;
            matchId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchablematchinfo"]["matchId"], keyof Long.Long>, never>) | undefined;
            reservationId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["watchablematchinfo"]["reservationId"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["watchablematchinfo"], keyof WatchableMatchInfo>, never>) | undefined;
        roundstatsLegacy?: ({
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            round?: number | undefined;
            kills?: number[] | undefined;
            assists?: number[] | undefined;
            deaths?: number[] | undefined;
            scores?: number[] | undefined;
            pings?: number[] | undefined;
            roundResult?: number | undefined;
            matchResult?: number | undefined;
            teamScores?: number[] | undefined;
            confirm?: {
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | Long.Long | undefined;
            } | undefined;
            reservationStage?: number | undefined;
            matchDuration?: number | undefined;
            enemyKills?: number[] | undefined;
            enemyHeadshots?: number[] | undefined;
            enemy3ks?: number[] | undefined;
            enemy4ks?: number[] | undefined;
            enemy5ks?: number[] | undefined;
            mvps?: number[] | undefined;
            spectatorsCount?: number | undefined;
            spectatorsCountTv?: number | undefined;
            spectatorsCountLnk?: number | undefined;
            enemyKillsAgg?: number[] | undefined;
            dropInfo?: {
                accountMvp?: number | undefined;
            } | undefined;
            bSwitchedTeams?: boolean | undefined;
            enemy2ks?: number[] | undefined;
            playerSpawned?: number[] | undefined;
            teamSpawnCount?: number[] | undefined;
            maxRounds?: number | undefined;
        } & {
            reservationid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["roundstatsLegacy"]["reservationid"], keyof Long.Long>, never>) | undefined;
            reservation?: ({
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountIds?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                gameType?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["rankings"], keyof {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[]>, never>) | undefined;
                encryptionKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                encryptionKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                partyIds?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                whitelist?: ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] & ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["whitelist"], keyof {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[]>, never>) | undefined;
                tvMasterSteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                tournamentEvent?: ({
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                tournamentTeams?: ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] & ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                } & {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["tournamentTeams"], keyof {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                tvRelaySteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                preMatchData?: ({
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } & {
                    predictionsPct?: number | undefined;
                    draft?: ({
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] & ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                    stats?: ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] & ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    } & {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"], keyof {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[]>, never>) | undefined;
                    wins?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["roundstatsLegacy"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
            map?: string | undefined;
            round?: number | undefined;
            kills?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["kills"], keyof number[]>, never>) | undefined;
            assists?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["assists"], keyof number[]>, never>) | undefined;
            deaths?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["deaths"], keyof number[]>, never>) | undefined;
            scores?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["scores"], keyof number[]>, never>) | undefined;
            pings?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["pings"], keyof number[]>, never>) | undefined;
            roundResult?: number | undefined;
            matchResult?: number | undefined;
            teamScores?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["teamScores"], keyof number[]>, never>) | undefined;
            confirm?: ({
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | Long.Long | undefined;
            } & {
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsLegacy"]["confirm"]["exchange"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["roundstatsLegacy"]["confirm"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerConfirm>, never>) | undefined;
            reservationStage?: number | undefined;
            matchDuration?: number | undefined;
            enemyKills?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["enemyKills"], keyof number[]>, never>) | undefined;
            enemyHeadshots?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["enemyHeadshots"], keyof number[]>, never>) | undefined;
            enemy3ks?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["enemy3ks"], keyof number[]>, never>) | undefined;
            enemy4ks?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["enemy4ks"], keyof number[]>, never>) | undefined;
            enemy5ks?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["enemy5ks"], keyof number[]>, never>) | undefined;
            mvps?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["mvps"], keyof number[]>, never>) | undefined;
            spectatorsCount?: number | undefined;
            spectatorsCountTv?: number | undefined;
            spectatorsCountLnk?: number | undefined;
            enemyKillsAgg?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["enemyKillsAgg"], keyof number[]>, never>) | undefined;
            dropInfo?: ({
                accountMvp?: number | undefined;
            } & {
                accountMvp?: number | undefined;
            } & Record<Exclude<keyof I["roundstatsLegacy"]["dropInfo"], "accountMvp">, never>) | undefined;
            bSwitchedTeams?: boolean | undefined;
            enemy2ks?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["enemy2ks"], keyof number[]>, never>) | undefined;
            playerSpawned?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["playerSpawned"], keyof number[]>, never>) | undefined;
            teamSpawnCount?: (number[] & number[] & Record<Exclude<keyof I["roundstatsLegacy"]["teamSpawnCount"], keyof number[]>, never>) | undefined;
            maxRounds?: number | undefined;
        } & Record<Exclude<keyof I["roundstatsLegacy"], keyof CMsgGCCStrike15V2MatchmakingServerRoundStats>, never>) | undefined;
        roundstatsall?: ({
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            round?: number | undefined;
            kills?: number[] | undefined;
            assists?: number[] | undefined;
            deaths?: number[] | undefined;
            scores?: number[] | undefined;
            pings?: number[] | undefined;
            roundResult?: number | undefined;
            matchResult?: number | undefined;
            teamScores?: number[] | undefined;
            confirm?: {
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | Long.Long | undefined;
            } | undefined;
            reservationStage?: number | undefined;
            matchDuration?: number | undefined;
            enemyKills?: number[] | undefined;
            enemyHeadshots?: number[] | undefined;
            enemy3ks?: number[] | undefined;
            enemy4ks?: number[] | undefined;
            enemy5ks?: number[] | undefined;
            mvps?: number[] | undefined;
            spectatorsCount?: number | undefined;
            spectatorsCountTv?: number | undefined;
            spectatorsCountLnk?: number | undefined;
            enemyKillsAgg?: number[] | undefined;
            dropInfo?: {
                accountMvp?: number | undefined;
            } | undefined;
            bSwitchedTeams?: boolean | undefined;
            enemy2ks?: number[] | undefined;
            playerSpawned?: number[] | undefined;
            teamSpawnCount?: number[] | undefined;
            maxRounds?: number | undefined;
        }[] & ({
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            round?: number | undefined;
            kills?: number[] | undefined;
            assists?: number[] | undefined;
            deaths?: number[] | undefined;
            scores?: number[] | undefined;
            pings?: number[] | undefined;
            roundResult?: number | undefined;
            matchResult?: number | undefined;
            teamScores?: number[] | undefined;
            confirm?: {
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | Long.Long | undefined;
            } | undefined;
            reservationStage?: number | undefined;
            matchDuration?: number | undefined;
            enemyKills?: number[] | undefined;
            enemyHeadshots?: number[] | undefined;
            enemy3ks?: number[] | undefined;
            enemy4ks?: number[] | undefined;
            enemy5ks?: number[] | undefined;
            mvps?: number[] | undefined;
            spectatorsCount?: number | undefined;
            spectatorsCountTv?: number | undefined;
            spectatorsCountLnk?: number | undefined;
            enemyKillsAgg?: number[] | undefined;
            dropInfo?: {
                accountMvp?: number | undefined;
            } | undefined;
            bSwitchedTeams?: boolean | undefined;
            enemy2ks?: number[] | undefined;
            playerSpawned?: number[] | undefined;
            teamSpawnCount?: number[] | undefined;
            maxRounds?: number | undefined;
        } & {
            reservationid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["roundstatsall"][number]["reservationid"], keyof Long.Long>, never>) | undefined;
            reservation?: ({
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & {
                accountIds?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                gameType?: number | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["rankings"], keyof {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[]>, never>) | undefined;
                encryptionKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                encryptionKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                partyIds?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                whitelist?: ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] & ({
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["whitelist"], keyof {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[]>, never>) | undefined;
                tvMasterSteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                tournamentEvent?: ({
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                tournamentTeams?: ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] & ({
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                } & {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["tournamentTeams"][number]["players"], keyof {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["tournamentTeams"], keyof {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
                tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                tvRelaySteamid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                preMatchData?: ({
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } & {
                    predictionsPct?: number | undefined;
                    draft?: ({
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] & ({
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                    stats?: ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] & ({
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    } & {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["preMatchData"]["stats"], keyof {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[]>, never>) | undefined;
                    wins?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } & Record<Exclude<keyof I["roundstatsall"][number]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
            map?: string | undefined;
            round?: number | undefined;
            kills?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["kills"], keyof number[]>, never>) | undefined;
            assists?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["assists"], keyof number[]>, never>) | undefined;
            deaths?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["deaths"], keyof number[]>, never>) | undefined;
            scores?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["scores"], keyof number[]>, never>) | undefined;
            pings?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["pings"], keyof number[]>, never>) | undefined;
            roundResult?: number | undefined;
            matchResult?: number | undefined;
            teamScores?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["teamScores"], keyof number[]>, never>) | undefined;
            confirm?: ({
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | Long.Long | undefined;
            } & {
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["roundstatsall"][number]["confirm"]["exchange"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["roundstatsall"][number]["confirm"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerConfirm>, never>) | undefined;
            reservationStage?: number | undefined;
            matchDuration?: number | undefined;
            enemyKills?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["enemyKills"], keyof number[]>, never>) | undefined;
            enemyHeadshots?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["enemyHeadshots"], keyof number[]>, never>) | undefined;
            enemy3ks?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["enemy3ks"], keyof number[]>, never>) | undefined;
            enemy4ks?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["enemy4ks"], keyof number[]>, never>) | undefined;
            enemy5ks?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["enemy5ks"], keyof number[]>, never>) | undefined;
            mvps?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["mvps"], keyof number[]>, never>) | undefined;
            spectatorsCount?: number | undefined;
            spectatorsCountTv?: number | undefined;
            spectatorsCountLnk?: number | undefined;
            enemyKillsAgg?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["enemyKillsAgg"], keyof number[]>, never>) | undefined;
            dropInfo?: ({
                accountMvp?: number | undefined;
            } & {
                accountMvp?: number | undefined;
            } & Record<Exclude<keyof I["roundstatsall"][number]["dropInfo"], "accountMvp">, never>) | undefined;
            bSwitchedTeams?: boolean | undefined;
            enemy2ks?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["enemy2ks"], keyof number[]>, never>) | undefined;
            playerSpawned?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["playerSpawned"], keyof number[]>, never>) | undefined;
            teamSpawnCount?: (number[] & number[] & Record<Exclude<keyof I["roundstatsall"][number]["teamSpawnCount"], keyof number[]>, never>) | undefined;
            maxRounds?: number | undefined;
        } & Record<Exclude<keyof I["roundstatsall"][number], keyof CMsgGCCStrike15V2MatchmakingServerRoundStats>, never>)[] & Record<Exclude<keyof I["roundstatsall"], keyof {
            reservationid?: string | number | Long.Long | undefined;
            reservation?: {
                accountIds?: number[] | undefined;
                gameType?: number | undefined;
                matchId?: string | number | Long.Long | undefined;
                serverVersion?: number | undefined;
                flags?: number | undefined;
                rankings?: {
                    accountId?: number | undefined;
                    rankId?: number | undefined;
                    wins?: number | undefined;
                    rankChange?: number | undefined;
                    rankTypeId?: number | undefined;
                    tvControl?: number | undefined;
                }[] | undefined;
                encryptionKey?: string | number | Long.Long | undefined;
                encryptionKeyPub?: string | number | Long.Long | undefined;
                partyIds?: number[] | undefined;
                whitelist?: {
                    a?: number | undefined;
                    b?: number | undefined;
                    c?: number | undefined;
                    d?: number | undefined;
                    bits?: number | undefined;
                    token?: number | undefined;
                }[] | undefined;
                tvMasterSteamid?: string | number | Long.Long | undefined;
                tournamentEvent?: {
                    eventId?: number | undefined;
                    eventTag?: string | undefined;
                    eventName?: string | undefined;
                    eventTimeStart?: number | undefined;
                    eventTimeEnd?: number | undefined;
                    eventPublic?: number | undefined;
                    eventStageId?: number | undefined;
                    eventStageName?: string | undefined;
                    activeSectionId?: number | undefined;
                } | undefined;
                tournamentTeams?: {
                    teamId?: number | undefined;
                    teamTag?: string | undefined;
                    teamFlag?: string | undefined;
                    teamName?: string | undefined;
                    players?: {
                        accountId?: number | undefined;
                        playerNick?: string | undefined;
                        playerName?: string | undefined;
                        playerDob?: number | undefined;
                        playerFlag?: string | undefined;
                        playerLocation?: string | undefined;
                        playerDesc?: string | undefined;
                    }[] | undefined;
                }[] | undefined;
                tournamentCastersAccountIds?: number[] | undefined;
                tvRelaySteamid?: string | number | Long.Long | undefined;
                preMatchData?: {
                    predictionsPct?: number | undefined;
                    draft?: {
                        eventId?: number | undefined;
                        eventStageId?: number | undefined;
                        teamId0?: number | undefined;
                        teamId1?: number | undefined;
                        mapsCount?: number | undefined;
                        mapsCurrent?: number | undefined;
                        teamIdStart?: number | undefined;
                        teamIdVeto1?: number | undefined;
                        teamIdPickn?: number | undefined;
                        drafts?: {
                            mapid?: number | undefined;
                            teamIdCt?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    stats?: {
                        matchInfoIdxtxt?: number | undefined;
                        matchInfoTxt?: string | undefined;
                        matchInfoTeams?: string[] | undefined;
                    }[] | undefined;
                    wins?: number[] | undefined;
                } | undefined;
                rtime32EventStart?: number | undefined;
                tvControl?: number | undefined;
            } | undefined;
            map?: string | undefined;
            round?: number | undefined;
            kills?: number[] | undefined;
            assists?: number[] | undefined;
            deaths?: number[] | undefined;
            scores?: number[] | undefined;
            pings?: number[] | undefined;
            roundResult?: number | undefined;
            matchResult?: number | undefined;
            teamScores?: number[] | undefined;
            confirm?: {
                token?: number | undefined;
                stamp?: number | undefined;
                exchange?: string | number | Long.Long | undefined;
            } | undefined;
            reservationStage?: number | undefined;
            matchDuration?: number | undefined;
            enemyKills?: number[] | undefined;
            enemyHeadshots?: number[] | undefined;
            enemy3ks?: number[] | undefined;
            enemy4ks?: number[] | undefined;
            enemy5ks?: number[] | undefined;
            mvps?: number[] | undefined;
            spectatorsCount?: number | undefined;
            spectatorsCountTv?: number | undefined;
            spectatorsCountLnk?: number | undefined;
            enemyKillsAgg?: number[] | undefined;
            dropInfo?: {
                accountMvp?: number | undefined;
            } | undefined;
            bSwitchedTeams?: boolean | undefined;
            enemy2ks?: number[] | undefined;
            playerSpawned?: number[] | undefined;
            teamSpawnCount?: number[] | undefined;
            maxRounds?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CDataGCCStrike15V2MatchInfo>, never>>(object: I): CDataGCCStrike15V2MatchInfo;
};
export declare const CDataGCCStrike15V2TournamentGroupTeam: {
    encode(message: CDataGCCStrike15V2TournamentGroupTeam, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CDataGCCStrike15V2TournamentGroupTeam;
    fromPartial<I extends {
        teamId?: number | undefined;
        score?: number | undefined;
        correctpick?: boolean | undefined;
    } & {
        teamId?: number | undefined;
        score?: number | undefined;
        correctpick?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CDataGCCStrike15V2TournamentGroupTeam>, never>>(object: I): CDataGCCStrike15V2TournamentGroupTeam;
};
export declare const CDataGCCStrike15V2TournamentGroup: {
    encode(message: CDataGCCStrike15V2TournamentGroup, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CDataGCCStrike15V2TournamentGroup;
    fromPartial<I extends {
        groupid?: number | undefined;
        name?: string | undefined;
        desc?: string | undefined;
        picksDeprecated?: number | undefined;
        teams?: {
            teamId?: number | undefined;
            score?: number | undefined;
            correctpick?: boolean | undefined;
        }[] | undefined;
        stageIds?: number[] | undefined;
        picklockuntiltime?: number | undefined;
        pickableteams?: number | undefined;
        pointsPerPick?: number | undefined;
        picks?: {
            pickids?: number[] | undefined;
        }[] | undefined;
    } & {
        groupid?: number | undefined;
        name?: string | undefined;
        desc?: string | undefined;
        picksDeprecated?: number | undefined;
        teams?: ({
            teamId?: number | undefined;
            score?: number | undefined;
            correctpick?: boolean | undefined;
        }[] & ({
            teamId?: number | undefined;
            score?: number | undefined;
            correctpick?: boolean | undefined;
        } & {
            teamId?: number | undefined;
            score?: number | undefined;
            correctpick?: boolean | undefined;
        } & Record<Exclude<keyof I["teams"][number], keyof CDataGCCStrike15V2TournamentGroupTeam>, never>)[] & Record<Exclude<keyof I["teams"], keyof {
            teamId?: number | undefined;
            score?: number | undefined;
            correctpick?: boolean | undefined;
        }[]>, never>) | undefined;
        stageIds?: (number[] & number[] & Record<Exclude<keyof I["stageIds"], keyof number[]>, never>) | undefined;
        picklockuntiltime?: number | undefined;
        pickableteams?: number | undefined;
        pointsPerPick?: number | undefined;
        picks?: ({
            pickids?: number[] | undefined;
        }[] & ({
            pickids?: number[] | undefined;
        } & {
            pickids?: (number[] & number[] & Record<Exclude<keyof I["picks"][number]["pickids"], keyof number[]>, never>) | undefined;
        } & Record<Exclude<keyof I["picks"][number], "pickids">, never>)[] & Record<Exclude<keyof I["picks"], keyof {
            pickids?: number[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CDataGCCStrike15V2TournamentGroup>, never>>(object: I): CDataGCCStrike15V2TournamentGroup;
};
export declare const CDataGCCStrike15V2TournamentGroup_Picks: {
    encode(message: CDataGCCStrike15V2TournamentGroup_Picks, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CDataGCCStrike15V2TournamentGroup_Picks;
    fromPartial<I extends {
        pickids?: number[] | undefined;
    } & {
        pickids?: (number[] & number[] & Record<Exclude<keyof I["pickids"], keyof number[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "pickids">, never>>(object: I): CDataGCCStrike15V2TournamentGroup_Picks;
};
export declare const CDataGCCStrike15V2TournamentSection: {
    encode(message: CDataGCCStrike15V2TournamentSection, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CDataGCCStrike15V2TournamentSection;
    fromPartial<I extends {
        sectionid?: number | undefined;
        name?: string | undefined;
        desc?: string | undefined;
        groups?: {
            groupid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            picksDeprecated?: number | undefined;
            teams?: {
                teamId?: number | undefined;
                score?: number | undefined;
                correctpick?: boolean | undefined;
            }[] | undefined;
            stageIds?: number[] | undefined;
            picklockuntiltime?: number | undefined;
            pickableteams?: number | undefined;
            pointsPerPick?: number | undefined;
            picks?: {
                pickids?: number[] | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        sectionid?: number | undefined;
        name?: string | undefined;
        desc?: string | undefined;
        groups?: ({
            groupid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            picksDeprecated?: number | undefined;
            teams?: {
                teamId?: number | undefined;
                score?: number | undefined;
                correctpick?: boolean | undefined;
            }[] | undefined;
            stageIds?: number[] | undefined;
            picklockuntiltime?: number | undefined;
            pickableteams?: number | undefined;
            pointsPerPick?: number | undefined;
            picks?: {
                pickids?: number[] | undefined;
            }[] | undefined;
        }[] & ({
            groupid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            picksDeprecated?: number | undefined;
            teams?: {
                teamId?: number | undefined;
                score?: number | undefined;
                correctpick?: boolean | undefined;
            }[] | undefined;
            stageIds?: number[] | undefined;
            picklockuntiltime?: number | undefined;
            pickableteams?: number | undefined;
            pointsPerPick?: number | undefined;
            picks?: {
                pickids?: number[] | undefined;
            }[] | undefined;
        } & {
            groupid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            picksDeprecated?: number | undefined;
            teams?: ({
                teamId?: number | undefined;
                score?: number | undefined;
                correctpick?: boolean | undefined;
            }[] & ({
                teamId?: number | undefined;
                score?: number | undefined;
                correctpick?: boolean | undefined;
            } & {
                teamId?: number | undefined;
                score?: number | undefined;
                correctpick?: boolean | undefined;
            } & Record<Exclude<keyof I["groups"][number]["teams"][number], keyof CDataGCCStrike15V2TournamentGroupTeam>, never>)[] & Record<Exclude<keyof I["groups"][number]["teams"], keyof {
                teamId?: number | undefined;
                score?: number | undefined;
                correctpick?: boolean | undefined;
            }[]>, never>) | undefined;
            stageIds?: (number[] & number[] & Record<Exclude<keyof I["groups"][number]["stageIds"], keyof number[]>, never>) | undefined;
            picklockuntiltime?: number | undefined;
            pickableteams?: number | undefined;
            pointsPerPick?: number | undefined;
            picks?: ({
                pickids?: number[] | undefined;
            }[] & ({
                pickids?: number[] | undefined;
            } & {
                pickids?: (number[] & number[] & Record<Exclude<keyof I["groups"][number]["picks"][number]["pickids"], keyof number[]>, never>) | undefined;
            } & Record<Exclude<keyof I["groups"][number]["picks"][number], "pickids">, never>)[] & Record<Exclude<keyof I["groups"][number]["picks"], keyof {
                pickids?: number[] | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["groups"][number], keyof CDataGCCStrike15V2TournamentGroup>, never>)[] & Record<Exclude<keyof I["groups"], keyof {
            groupid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            picksDeprecated?: number | undefined;
            teams?: {
                teamId?: number | undefined;
                score?: number | undefined;
                correctpick?: boolean | undefined;
            }[] | undefined;
            stageIds?: number[] | undefined;
            picklockuntiltime?: number | undefined;
            pickableteams?: number | undefined;
            pointsPerPick?: number | undefined;
            picks?: {
                pickids?: number[] | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CDataGCCStrike15V2TournamentSection>, never>>(object: I): CDataGCCStrike15V2TournamentSection;
};
export declare const CDataGCCStrike15V2TournamentInfo: {
    encode(message: CDataGCCStrike15V2TournamentInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CDataGCCStrike15V2TournamentInfo;
    fromPartial<I extends {
        sections?: {
            sectionid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            groups?: {
                groupid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                picksDeprecated?: number | undefined;
                teams?: {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[] | undefined;
                stageIds?: number[] | undefined;
                picklockuntiltime?: number | undefined;
                pickableteams?: number | undefined;
                pointsPerPick?: number | undefined;
                picks?: {
                    pickids?: number[] | undefined;
                }[] | undefined;
            }[] | undefined;
        }[] | undefined;
        tournamentEvent?: {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } | undefined;
        tournamentTeams?: {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        sections?: ({
            sectionid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            groups?: {
                groupid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                picksDeprecated?: number | undefined;
                teams?: {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[] | undefined;
                stageIds?: number[] | undefined;
                picklockuntiltime?: number | undefined;
                pickableteams?: number | undefined;
                pointsPerPick?: number | undefined;
                picks?: {
                    pickids?: number[] | undefined;
                }[] | undefined;
            }[] | undefined;
        }[] & ({
            sectionid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            groups?: {
                groupid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                picksDeprecated?: number | undefined;
                teams?: {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[] | undefined;
                stageIds?: number[] | undefined;
                picklockuntiltime?: number | undefined;
                pickableteams?: number | undefined;
                pointsPerPick?: number | undefined;
                picks?: {
                    pickids?: number[] | undefined;
                }[] | undefined;
            }[] | undefined;
        } & {
            sectionid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            groups?: ({
                groupid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                picksDeprecated?: number | undefined;
                teams?: {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[] | undefined;
                stageIds?: number[] | undefined;
                picklockuntiltime?: number | undefined;
                pickableteams?: number | undefined;
                pointsPerPick?: number | undefined;
                picks?: {
                    pickids?: number[] | undefined;
                }[] | undefined;
            }[] & ({
                groupid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                picksDeprecated?: number | undefined;
                teams?: {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[] | undefined;
                stageIds?: number[] | undefined;
                picklockuntiltime?: number | undefined;
                pickableteams?: number | undefined;
                pointsPerPick?: number | undefined;
                picks?: {
                    pickids?: number[] | undefined;
                }[] | undefined;
            } & {
                groupid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                picksDeprecated?: number | undefined;
                teams?: ({
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[] & ({
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                } & {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                } & Record<Exclude<keyof I["sections"][number]["groups"][number]["teams"][number], keyof CDataGCCStrike15V2TournamentGroupTeam>, never>)[] & Record<Exclude<keyof I["sections"][number]["groups"][number]["teams"], keyof {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[]>, never>) | undefined;
                stageIds?: (number[] & number[] & Record<Exclude<keyof I["sections"][number]["groups"][number]["stageIds"], keyof number[]>, never>) | undefined;
                picklockuntiltime?: number | undefined;
                pickableteams?: number | undefined;
                pointsPerPick?: number | undefined;
                picks?: ({
                    pickids?: number[] | undefined;
                }[] & ({
                    pickids?: number[] | undefined;
                } & {
                    pickids?: (number[] & number[] & Record<Exclude<keyof I["sections"][number]["groups"][number]["picks"][number]["pickids"], keyof number[]>, never>) | undefined;
                } & Record<Exclude<keyof I["sections"][number]["groups"][number]["picks"][number], "pickids">, never>)[] & Record<Exclude<keyof I["sections"][number]["groups"][number]["picks"], keyof {
                    pickids?: number[] | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["sections"][number]["groups"][number], keyof CDataGCCStrike15V2TournamentGroup>, never>)[] & Record<Exclude<keyof I["sections"][number]["groups"], keyof {
                groupid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                picksDeprecated?: number | undefined;
                teams?: {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[] | undefined;
                stageIds?: number[] | undefined;
                picklockuntiltime?: number | undefined;
                pickableteams?: number | undefined;
                pointsPerPick?: number | undefined;
                picks?: {
                    pickids?: number[] | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["sections"][number], keyof CDataGCCStrike15V2TournamentSection>, never>)[] & Record<Exclude<keyof I["sections"], keyof {
            sectionid?: number | undefined;
            name?: string | undefined;
            desc?: string | undefined;
            groups?: {
                groupid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                picksDeprecated?: number | undefined;
                teams?: {
                    teamId?: number | undefined;
                    score?: number | undefined;
                    correctpick?: boolean | undefined;
                }[] | undefined;
                stageIds?: number[] | undefined;
                picklockuntiltime?: number | undefined;
                pickableteams?: number | undefined;
                pointsPerPick?: number | undefined;
                picks?: {
                    pickids?: number[] | undefined;
                }[] | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        tournamentEvent?: ({
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } & {
            eventId?: number | undefined;
            eventTag?: string | undefined;
            eventName?: string | undefined;
            eventTimeStart?: number | undefined;
            eventTimeEnd?: number | undefined;
            eventPublic?: number | undefined;
            eventStageId?: number | undefined;
            eventStageName?: string | undefined;
            activeSectionId?: number | undefined;
        } & Record<Exclude<keyof I["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
        tournamentTeams?: ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[] & ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        } & {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] & ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & Record<Exclude<keyof I["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["tournamentTeams"][number]["players"], keyof {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["tournamentTeams"], keyof {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CDataGCCStrike15V2TournamentInfo>, never>>(object: I): CDataGCCStrike15V2TournamentInfo;
};
export declare const CMsgGCCStrike15V2MatchList: {
    encode(message: CMsgGCCStrike15V2MatchList, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchList;
    fromPartial<I extends {
        msgrequestid?: number | undefined;
        accountid?: number | undefined;
        servertime?: number | undefined;
        matches?: {
            matchid?: string | number | Long.Long | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } | undefined;
            roundstatsLegacy?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } | undefined;
            roundstatsall?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] | undefined;
        }[] | undefined;
        streams?: {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        tournamentinfo?: {
            sections?: {
                sectionid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                groups?: {
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] | undefined;
                    stageIds?: number[] | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: {
                        pickids?: number[] | undefined;
                    }[] | undefined;
                }[] | undefined;
            }[] | undefined;
            tournamentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            tournamentTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        msgrequestid?: number | undefined;
        accountid?: number | undefined;
        servertime?: number | undefined;
        matches?: ({
            matchid?: string | number | Long.Long | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } | undefined;
            roundstatsLegacy?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } | undefined;
            roundstatsall?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] | undefined;
        }[] & ({
            matchid?: string | number | Long.Long | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } | undefined;
            roundstatsLegacy?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } | undefined;
            roundstatsall?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] | undefined;
        } & {
            matchid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["matches"][number]["matchid"], keyof Long.Long>, never>) | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: ({
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } & {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["clDecryptdataKey"], keyof Long.Long>, never>) | undefined;
                clDecryptdataKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["clDecryptdataKeyPub"], keyof Long.Long>, never>) | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["serverId"], keyof Long.Long>, never>) | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["matchId"], keyof Long.Long>, never>) | undefined;
                reservationId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["reservationId"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"], keyof WatchableMatchInfo>, never>) | undefined;
            roundstatsLegacy?: ({
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } & {
                reservationid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservationid"], keyof Long.Long>, never>) | undefined;
                reservation?: ({
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["rankings"], keyof {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[]>, never>) | undefined;
                    encryptionKey?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                    encryptionKeyPub?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                    partyIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                    whitelist?: ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] & ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["whitelist"], keyof {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[]>, never>) | undefined;
                    tvMasterSteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                    tournamentEvent?: ({
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                    tournamentTeams?: ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] & ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    } & {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] & ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentTeams"], keyof {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[]>, never>) | undefined;
                    tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                    tvRelaySteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                    preMatchData?: ({
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } & {
                        predictionsPct?: number | undefined;
                        draft?: ({
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } & {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] & ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                        stats?: ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] & ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        } & {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"], keyof {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[]>, never>) | undefined;
                        wins?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["kills"], keyof number[]>, never>) | undefined;
                assists?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["assists"], keyof number[]>, never>) | undefined;
                deaths?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["deaths"], keyof number[]>, never>) | undefined;
                scores?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["scores"], keyof number[]>, never>) | undefined;
                pings?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["pings"], keyof number[]>, never>) | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["teamScores"], keyof number[]>, never>) | undefined;
                confirm?: ({
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } & {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["confirm"]["exchange"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["confirm"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerConfirm>, never>) | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemyKills"], keyof number[]>, never>) | undefined;
                enemyHeadshots?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemyHeadshots"], keyof number[]>, never>) | undefined;
                enemy3ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemy3ks"], keyof number[]>, never>) | undefined;
                enemy4ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemy4ks"], keyof number[]>, never>) | undefined;
                enemy5ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemy5ks"], keyof number[]>, never>) | undefined;
                mvps?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["mvps"], keyof number[]>, never>) | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemyKillsAgg"], keyof number[]>, never>) | undefined;
                dropInfo?: ({
                    accountMvp?: number | undefined;
                } & {
                    accountMvp?: number | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["dropInfo"], "accountMvp">, never>) | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemy2ks"], keyof number[]>, never>) | undefined;
                playerSpawned?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["playerSpawned"], keyof number[]>, never>) | undefined;
                teamSpawnCount?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["teamSpawnCount"], keyof number[]>, never>) | undefined;
                maxRounds?: number | undefined;
            } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"], keyof CMsgGCCStrike15V2MatchmakingServerRoundStats>, never>) | undefined;
            roundstatsall?: ({
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] & ({
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } & {
                reservationid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservationid"], keyof Long.Long>, never>) | undefined;
                reservation?: ({
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["rankings"], keyof {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[]>, never>) | undefined;
                    encryptionKey?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                    encryptionKeyPub?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                    partyIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                    whitelist?: ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] & ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["whitelist"], keyof {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[]>, never>) | undefined;
                    tvMasterSteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                    tournamentEvent?: ({
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                    tournamentTeams?: ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] & ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    } & {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] & ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentTeams"][number]["players"], keyof {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentTeams"], keyof {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[]>, never>) | undefined;
                    tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                    tvRelaySteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                    preMatchData?: ({
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } & {
                        predictionsPct?: number | undefined;
                        draft?: ({
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } & {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] & ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                        stats?: ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] & ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        } & {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["stats"], keyof {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[]>, never>) | undefined;
                        wins?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["kills"], keyof number[]>, never>) | undefined;
                assists?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["assists"], keyof number[]>, never>) | undefined;
                deaths?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["deaths"], keyof number[]>, never>) | undefined;
                scores?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["scores"], keyof number[]>, never>) | undefined;
                pings?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["pings"], keyof number[]>, never>) | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["teamScores"], keyof number[]>, never>) | undefined;
                confirm?: ({
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } & {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["confirm"]["exchange"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["confirm"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerConfirm>, never>) | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemyKills"], keyof number[]>, never>) | undefined;
                enemyHeadshots?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemyHeadshots"], keyof number[]>, never>) | undefined;
                enemy3ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemy3ks"], keyof number[]>, never>) | undefined;
                enemy4ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemy4ks"], keyof number[]>, never>) | undefined;
                enemy5ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemy5ks"], keyof number[]>, never>) | undefined;
                mvps?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["mvps"], keyof number[]>, never>) | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemyKillsAgg"], keyof number[]>, never>) | undefined;
                dropInfo?: ({
                    accountMvp?: number | undefined;
                } & {
                    accountMvp?: number | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["dropInfo"], "accountMvp">, never>) | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemy2ks"], keyof number[]>, never>) | undefined;
                playerSpawned?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["playerSpawned"], keyof number[]>, never>) | undefined;
                teamSpawnCount?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["teamSpawnCount"], keyof number[]>, never>) | undefined;
                maxRounds?: number | undefined;
            } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number], keyof CMsgGCCStrike15V2MatchmakingServerRoundStats>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"], keyof {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["matches"][number], keyof CDataGCCStrike15V2MatchInfo>, never>)[] & Record<Exclude<keyof I["matches"], keyof {
            matchid?: string | number | Long.Long | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } | undefined;
            roundstatsLegacy?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } | undefined;
            roundstatsall?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        streams?: ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[] & ({
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        } & {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] & ({
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            } & Record<Exclude<keyof I["streams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["streams"][number]["players"], keyof {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["streams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["streams"], keyof {
            teamId?: number | undefined;
            teamTag?: string | undefined;
            teamFlag?: string | undefined;
            teamName?: string | undefined;
            players?: {
                accountId?: number | undefined;
                playerNick?: string | undefined;
                playerName?: string | undefined;
                playerDob?: number | undefined;
                playerFlag?: string | undefined;
                playerLocation?: string | undefined;
                playerDesc?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        tournamentinfo?: ({
            sections?: {
                sectionid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                groups?: {
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] | undefined;
                    stageIds?: number[] | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: {
                        pickids?: number[] | undefined;
                    }[] | undefined;
                }[] | undefined;
            }[] | undefined;
            tournamentEvent?: {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } | undefined;
            tournamentTeams?: {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] | undefined;
        } & {
            sections?: ({
                sectionid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                groups?: {
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] | undefined;
                    stageIds?: number[] | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: {
                        pickids?: number[] | undefined;
                    }[] | undefined;
                }[] | undefined;
            }[] & ({
                sectionid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                groups?: {
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] | undefined;
                    stageIds?: number[] | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: {
                        pickids?: number[] | undefined;
                    }[] | undefined;
                }[] | undefined;
            } & {
                sectionid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                groups?: ({
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] | undefined;
                    stageIds?: number[] | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: {
                        pickids?: number[] | undefined;
                    }[] | undefined;
                }[] & ({
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] | undefined;
                    stageIds?: number[] | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: {
                        pickids?: number[] | undefined;
                    }[] | undefined;
                } & {
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: ({
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] & ({
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    } & {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    } & Record<Exclude<keyof I["tournamentinfo"]["sections"][number]["groups"][number]["teams"][number], keyof CDataGCCStrike15V2TournamentGroupTeam>, never>)[] & Record<Exclude<keyof I["tournamentinfo"]["sections"][number]["groups"][number]["teams"], keyof {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[]>, never>) | undefined;
                    stageIds?: (number[] & number[] & Record<Exclude<keyof I["tournamentinfo"]["sections"][number]["groups"][number]["stageIds"], keyof number[]>, never>) | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: ({
                        pickids?: number[] | undefined;
                    }[] & ({
                        pickids?: number[] | undefined;
                    } & {
                        pickids?: (number[] & number[] & Record<Exclude<keyof I["tournamentinfo"]["sections"][number]["groups"][number]["picks"][number]["pickids"], keyof number[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["tournamentinfo"]["sections"][number]["groups"][number]["picks"][number], "pickids">, never>)[] & Record<Exclude<keyof I["tournamentinfo"]["sections"][number]["groups"][number]["picks"], keyof {
                        pickids?: number[] | undefined;
                    }[]>, never>) | undefined;
                } & Record<Exclude<keyof I["tournamentinfo"]["sections"][number]["groups"][number], keyof CDataGCCStrike15V2TournamentGroup>, never>)[] & Record<Exclude<keyof I["tournamentinfo"]["sections"][number]["groups"], keyof {
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] | undefined;
                    stageIds?: number[] | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: {
                        pickids?: number[] | undefined;
                    }[] | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["tournamentinfo"]["sections"][number], keyof CDataGCCStrike15V2TournamentSection>, never>)[] & Record<Exclude<keyof I["tournamentinfo"]["sections"], keyof {
                sectionid?: number | undefined;
                name?: string | undefined;
                desc?: string | undefined;
                groups?: {
                    groupid?: number | undefined;
                    name?: string | undefined;
                    desc?: string | undefined;
                    picksDeprecated?: number | undefined;
                    teams?: {
                        teamId?: number | undefined;
                        score?: number | undefined;
                        correctpick?: boolean | undefined;
                    }[] | undefined;
                    stageIds?: number[] | undefined;
                    picklockuntiltime?: number | undefined;
                    pickableteams?: number | undefined;
                    pointsPerPick?: number | undefined;
                    picks?: {
                        pickids?: number[] | undefined;
                    }[] | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
            tournamentEvent?: ({
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & {
                eventId?: number | undefined;
                eventTag?: string | undefined;
                eventName?: string | undefined;
                eventTimeStart?: number | undefined;
                eventTimeEnd?: number | undefined;
                eventPublic?: number | undefined;
                eventStageId?: number | undefined;
                eventStageName?: string | undefined;
                activeSectionId?: number | undefined;
            } & Record<Exclude<keyof I["tournamentinfo"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
            tournamentTeams?: ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[] & ({
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            } & {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] & ({
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                } & Record<Exclude<keyof I["tournamentinfo"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["tournamentinfo"]["tournamentTeams"][number]["players"], keyof {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["tournamentinfo"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["tournamentinfo"]["tournamentTeams"], keyof {
                teamId?: number | undefined;
                teamTag?: string | undefined;
                teamFlag?: string | undefined;
                teamName?: string | undefined;
                players?: {
                    accountId?: number | undefined;
                    playerNick?: string | undefined;
                    playerName?: string | undefined;
                    playerDob?: number | undefined;
                    playerFlag?: string | undefined;
                    playerLocation?: string | undefined;
                    playerDesc?: string | undefined;
                }[] | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["tournamentinfo"], keyof CDataGCCStrike15V2TournamentInfo>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchList>, never>>(object: I): CMsgGCCStrike15V2MatchList;
};
export declare const CMsgGCCStrike15V2MatchListTournamentOperatorMgmt: {
    encode(message: CMsgGCCStrike15V2MatchListTournamentOperatorMgmt, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2MatchListTournamentOperatorMgmt;
    fromPartial<I extends {
        eventid?: number | undefined;
        matches?: {
            matchid?: string | number | Long.Long | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } | undefined;
            roundstatsLegacy?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } | undefined;
            roundstatsall?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        eventid?: number | undefined;
        matches?: ({
            matchid?: string | number | Long.Long | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } | undefined;
            roundstatsLegacy?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } | undefined;
            roundstatsall?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] | undefined;
        }[] & ({
            matchid?: string | number | Long.Long | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } | undefined;
            roundstatsLegacy?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } | undefined;
            roundstatsall?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] | undefined;
        } & {
            matchid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["matches"][number]["matchid"], keyof Long.Long>, never>) | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: ({
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } & {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["clDecryptdataKey"], keyof Long.Long>, never>) | undefined;
                clDecryptdataKeyPub?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["clDecryptdataKeyPub"], keyof Long.Long>, never>) | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["serverId"], keyof Long.Long>, never>) | undefined;
                matchId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["matchId"], keyof Long.Long>, never>) | undefined;
                reservationId?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"]["reservationId"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["matches"][number]["watchablematchinfo"], keyof WatchableMatchInfo>, never>) | undefined;
            roundstatsLegacy?: ({
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } & {
                reservationid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservationid"], keyof Long.Long>, never>) | undefined;
                reservation?: ({
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["rankings"], keyof {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[]>, never>) | undefined;
                    encryptionKey?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                    encryptionKeyPub?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                    partyIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                    whitelist?: ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] & ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["whitelist"], keyof {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[]>, never>) | undefined;
                    tvMasterSteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                    tournamentEvent?: ({
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                    tournamentTeams?: ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] & ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    } & {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] & ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentTeams"][number]["players"], keyof {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentTeams"], keyof {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[]>, never>) | undefined;
                    tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                    tvRelaySteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                    preMatchData?: ({
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } & {
                        predictionsPct?: number | undefined;
                        draft?: ({
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } & {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] & ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                        stats?: ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] & ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        } & {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["stats"], keyof {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[]>, never>) | undefined;
                        wins?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["kills"], keyof number[]>, never>) | undefined;
                assists?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["assists"], keyof number[]>, never>) | undefined;
                deaths?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["deaths"], keyof number[]>, never>) | undefined;
                scores?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["scores"], keyof number[]>, never>) | undefined;
                pings?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["pings"], keyof number[]>, never>) | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["teamScores"], keyof number[]>, never>) | undefined;
                confirm?: ({
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } & {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["confirm"]["exchange"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["confirm"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerConfirm>, never>) | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemyKills"], keyof number[]>, never>) | undefined;
                enemyHeadshots?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemyHeadshots"], keyof number[]>, never>) | undefined;
                enemy3ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemy3ks"], keyof number[]>, never>) | undefined;
                enemy4ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemy4ks"], keyof number[]>, never>) | undefined;
                enemy5ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemy5ks"], keyof number[]>, never>) | undefined;
                mvps?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["mvps"], keyof number[]>, never>) | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemyKillsAgg"], keyof number[]>, never>) | undefined;
                dropInfo?: ({
                    accountMvp?: number | undefined;
                } & {
                    accountMvp?: number | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["dropInfo"], "accountMvp">, never>) | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["enemy2ks"], keyof number[]>, never>) | undefined;
                playerSpawned?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["playerSpawned"], keyof number[]>, never>) | undefined;
                teamSpawnCount?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"]["teamSpawnCount"], keyof number[]>, never>) | undefined;
                maxRounds?: number | undefined;
            } & Record<Exclude<keyof I["matches"][number]["roundstatsLegacy"], keyof CMsgGCCStrike15V2MatchmakingServerRoundStats>, never>) | undefined;
            roundstatsall?: ({
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] & ({
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } & {
                reservationid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservationid"], keyof Long.Long>, never>) | undefined;
                reservation?: ({
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & {
                    accountIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["accountIds"], keyof number[]>, never>) | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["matchId"], keyof Long.Long>, never>) | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] & ({
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["rankings"][number], keyof PlayerRankingInfo>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["rankings"], keyof {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[]>, never>) | undefined;
                    encryptionKey?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["encryptionKey"], keyof Long.Long>, never>) | undefined;
                    encryptionKeyPub?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["encryptionKeyPub"], keyof Long.Long>, never>) | undefined;
                    partyIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["partyIds"], keyof number[]>, never>) | undefined;
                    whitelist?: ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] & ({
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["whitelist"][number], keyof IpAddressMask>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["whitelist"], keyof {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[]>, never>) | undefined;
                    tvMasterSteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tvMasterSteamid"], keyof Long.Long>, never>) | undefined;
                    tournamentEvent?: ({
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentEvent"], keyof TournamentEvent>, never>) | undefined;
                    tournamentTeams?: ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] & ({
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    } & {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] & ({
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentTeams"][number]["players"][number], keyof TournamentPlayer>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentTeams"][number]["players"], keyof {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentTeams"][number], keyof TournamentTeam>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentTeams"], keyof {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[]>, never>) | undefined;
                    tournamentCastersAccountIds?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tournamentCastersAccountIds"], keyof number[]>, never>) | undefined;
                    tvRelaySteamid?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["tvRelaySteamid"], keyof Long.Long>, never>) | undefined;
                    preMatchData?: ({
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } & {
                        predictionsPct?: number | undefined;
                        draft?: ({
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } & {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] & ({
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["draft"]["drafts"][number], keyof CDataGCCStrike15V2TournamentMatchDraft_Entry>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["draft"]["drafts"], keyof {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["draft"], keyof CDataGCCStrike15V2TournamentMatchDraft>, never>) | undefined;
                        stats?: ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] & ({
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        } & {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: (string[] & string[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["stats"][number]["matchInfoTeams"], keyof string[]>, never>) | undefined;
                        } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["stats"][number], keyof CPreMatchInfoData_TeamStats>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["stats"], keyof {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[]>, never>) | undefined;
                        wins?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"]["wins"], keyof number[]>, never>) | undefined;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"]["preMatchData"], keyof CPreMatchInfoData>, never>) | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["reservation"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerReserve>, never>) | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["kills"], keyof number[]>, never>) | undefined;
                assists?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["assists"], keyof number[]>, never>) | undefined;
                deaths?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["deaths"], keyof number[]>, never>) | undefined;
                scores?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["scores"], keyof number[]>, never>) | undefined;
                pings?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["pings"], keyof number[]>, never>) | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["teamScores"], keyof number[]>, never>) | undefined;
                confirm?: ({
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } & {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["confirm"]["exchange"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["confirm"], keyof CMsgGCCStrike15V2MatchmakingGC2ServerConfirm>, never>) | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemyKills"], keyof number[]>, never>) | undefined;
                enemyHeadshots?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemyHeadshots"], keyof number[]>, never>) | undefined;
                enemy3ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemy3ks"], keyof number[]>, never>) | undefined;
                enemy4ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemy4ks"], keyof number[]>, never>) | undefined;
                enemy5ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemy5ks"], keyof number[]>, never>) | undefined;
                mvps?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["mvps"], keyof number[]>, never>) | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemyKillsAgg"], keyof number[]>, never>) | undefined;
                dropInfo?: ({
                    accountMvp?: number | undefined;
                } & {
                    accountMvp?: number | undefined;
                } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["dropInfo"], "accountMvp">, never>) | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["enemy2ks"], keyof number[]>, never>) | undefined;
                playerSpawned?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["playerSpawned"], keyof number[]>, never>) | undefined;
                teamSpawnCount?: (number[] & number[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number]["teamSpawnCount"], keyof number[]>, never>) | undefined;
                maxRounds?: number | undefined;
            } & Record<Exclude<keyof I["matches"][number]["roundstatsall"][number], keyof CMsgGCCStrike15V2MatchmakingServerRoundStats>, never>)[] & Record<Exclude<keyof I["matches"][number]["roundstatsall"], keyof {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["matches"][number], keyof CDataGCCStrike15V2MatchInfo>, never>)[] & Record<Exclude<keyof I["matches"], keyof {
            matchid?: string | number | Long.Long | undefined;
            matchtime?: number | undefined;
            watchablematchinfo?: {
                serverIp?: number | undefined;
                tvPort?: number | undefined;
                tvSpectators?: number | undefined;
                tvTime?: number | undefined;
                tvWatchPassword?: Uint8Array | undefined;
                clDecryptdataKey?: string | number | Long.Long | undefined;
                clDecryptdataKeyPub?: string | number | Long.Long | undefined;
                gameType?: number | undefined;
                gameMapgroup?: string | undefined;
                gameMap?: string | undefined;
                serverId?: string | number | Long.Long | undefined;
                matchId?: string | number | Long.Long | undefined;
                reservationId?: string | number | Long.Long | undefined;
            } | undefined;
            roundstatsLegacy?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            } | undefined;
            roundstatsall?: {
                reservationid?: string | number | Long.Long | undefined;
                reservation?: {
                    accountIds?: number[] | undefined;
                    gameType?: number | undefined;
                    matchId?: string | number | Long.Long | undefined;
                    serverVersion?: number | undefined;
                    flags?: number | undefined;
                    rankings?: {
                        accountId?: number | undefined;
                        rankId?: number | undefined;
                        wins?: number | undefined;
                        rankChange?: number | undefined;
                        rankTypeId?: number | undefined;
                        tvControl?: number | undefined;
                    }[] | undefined;
                    encryptionKey?: string | number | Long.Long | undefined;
                    encryptionKeyPub?: string | number | Long.Long | undefined;
                    partyIds?: number[] | undefined;
                    whitelist?: {
                        a?: number | undefined;
                        b?: number | undefined;
                        c?: number | undefined;
                        d?: number | undefined;
                        bits?: number | undefined;
                        token?: number | undefined;
                    }[] | undefined;
                    tvMasterSteamid?: string | number | Long.Long | undefined;
                    tournamentEvent?: {
                        eventId?: number | undefined;
                        eventTag?: string | undefined;
                        eventName?: string | undefined;
                        eventTimeStart?: number | undefined;
                        eventTimeEnd?: number | undefined;
                        eventPublic?: number | undefined;
                        eventStageId?: number | undefined;
                        eventStageName?: string | undefined;
                        activeSectionId?: number | undefined;
                    } | undefined;
                    tournamentTeams?: {
                        teamId?: number | undefined;
                        teamTag?: string | undefined;
                        teamFlag?: string | undefined;
                        teamName?: string | undefined;
                        players?: {
                            accountId?: number | undefined;
                            playerNick?: string | undefined;
                            playerName?: string | undefined;
                            playerDob?: number | undefined;
                            playerFlag?: string | undefined;
                            playerLocation?: string | undefined;
                            playerDesc?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    tournamentCastersAccountIds?: number[] | undefined;
                    tvRelaySteamid?: string | number | Long.Long | undefined;
                    preMatchData?: {
                        predictionsPct?: number | undefined;
                        draft?: {
                            eventId?: number | undefined;
                            eventStageId?: number | undefined;
                            teamId0?: number | undefined;
                            teamId1?: number | undefined;
                            mapsCount?: number | undefined;
                            mapsCurrent?: number | undefined;
                            teamIdStart?: number | undefined;
                            teamIdVeto1?: number | undefined;
                            teamIdPickn?: number | undefined;
                            drafts?: {
                                mapid?: number | undefined;
                                teamIdCt?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                        stats?: {
                            matchInfoIdxtxt?: number | undefined;
                            matchInfoTxt?: string | undefined;
                            matchInfoTeams?: string[] | undefined;
                        }[] | undefined;
                        wins?: number[] | undefined;
                    } | undefined;
                    rtime32EventStart?: number | undefined;
                    tvControl?: number | undefined;
                } | undefined;
                map?: string | undefined;
                round?: number | undefined;
                kills?: number[] | undefined;
                assists?: number[] | undefined;
                deaths?: number[] | undefined;
                scores?: number[] | undefined;
                pings?: number[] | undefined;
                roundResult?: number | undefined;
                matchResult?: number | undefined;
                teamScores?: number[] | undefined;
                confirm?: {
                    token?: number | undefined;
                    stamp?: number | undefined;
                    exchange?: string | number | Long.Long | undefined;
                } | undefined;
                reservationStage?: number | undefined;
                matchDuration?: number | undefined;
                enemyKills?: number[] | undefined;
                enemyHeadshots?: number[] | undefined;
                enemy3ks?: number[] | undefined;
                enemy4ks?: number[] | undefined;
                enemy5ks?: number[] | undefined;
                mvps?: number[] | undefined;
                spectatorsCount?: number | undefined;
                spectatorsCountTv?: number | undefined;
                spectatorsCountLnk?: number | undefined;
                enemyKillsAgg?: number[] | undefined;
                dropInfo?: {
                    accountMvp?: number | undefined;
                } | undefined;
                bSwitchedTeams?: boolean | undefined;
                enemy2ks?: number[] | undefined;
                playerSpawned?: number[] | undefined;
                teamSpawnCount?: number[] | undefined;
                maxRounds?: number | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2MatchListTournamentOperatorMgmt>, never>>(object: I): CMsgGCCStrike15V2MatchListTournamentOperatorMgmt;
};
export declare const CMsgGCCStrike15V2Predictions: {
    encode(message: CMsgGCCStrike15V2Predictions, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Predictions;
    fromPartial<I extends {
        eventId?: number | undefined;
        groupMatchTeamPicks?: {
            sectionid?: number | undefined;
            groupid?: number | undefined;
            index?: number | undefined;
            teamid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
        }[] | undefined;
    } & {
        eventId?: number | undefined;
        groupMatchTeamPicks?: ({
            sectionid?: number | undefined;
            groupid?: number | undefined;
            index?: number | undefined;
            teamid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
        }[] & ({
            sectionid?: number | undefined;
            groupid?: number | undefined;
            index?: number | undefined;
            teamid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
        } & {
            sectionid?: number | undefined;
            groupid?: number | undefined;
            index?: number | undefined;
            teamid?: number | undefined;
            itemid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["groupMatchTeamPicks"][number]["itemid"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["groupMatchTeamPicks"][number], keyof CMsgGCCStrike15V2Predictions_GroupMatchTeamPick>, never>)[] & Record<Exclude<keyof I["groupMatchTeamPicks"], keyof {
            sectionid?: number | undefined;
            groupid?: number | undefined;
            index?: number | undefined;
            teamid?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Predictions>, never>>(object: I): CMsgGCCStrike15V2Predictions;
};
export declare const CMsgGCCStrike15V2Predictions_GroupMatchTeamPick: {
    encode(message: CMsgGCCStrike15V2Predictions_GroupMatchTeamPick, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Predictions_GroupMatchTeamPick;
    fromPartial<I extends {
        sectionid?: number | undefined;
        groupid?: number | undefined;
        index?: number | undefined;
        teamid?: number | undefined;
        itemid?: string | number | Long.Long | undefined;
    } & {
        sectionid?: number | undefined;
        groupid?: number | undefined;
        index?: number | undefined;
        teamid?: number | undefined;
        itemid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["itemid"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Predictions_GroupMatchTeamPick>, never>>(object: I): CMsgGCCStrike15V2Predictions_GroupMatchTeamPick;
};
export declare const CMsgGCCStrike15V2Fantasy: {
    encode(message: CMsgGCCStrike15V2Fantasy, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Fantasy;
    fromPartial<I extends {
        eventId?: number | undefined;
        teams?: {
            sectionid?: number | undefined;
            slots?: {
                type?: number | undefined;
                pick?: number | undefined;
                itemid?: string | number | Long.Long | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        eventId?: number | undefined;
        teams?: ({
            sectionid?: number | undefined;
            slots?: {
                type?: number | undefined;
                pick?: number | undefined;
                itemid?: string | number | Long.Long | undefined;
            }[] | undefined;
        }[] & ({
            sectionid?: number | undefined;
            slots?: {
                type?: number | undefined;
                pick?: number | undefined;
                itemid?: string | number | Long.Long | undefined;
            }[] | undefined;
        } & {
            sectionid?: number | undefined;
            slots?: ({
                type?: number | undefined;
                pick?: number | undefined;
                itemid?: string | number | Long.Long | undefined;
            }[] & ({
                type?: number | undefined;
                pick?: number | undefined;
                itemid?: string | number | Long.Long | undefined;
            } & {
                type?: number | undefined;
                pick?: number | undefined;
                itemid?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["teams"][number]["slots"][number]["itemid"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["teams"][number]["slots"][number], keyof CMsgGCCStrike15V2Fantasy_FantasySlot>, never>)[] & Record<Exclude<keyof I["teams"][number]["slots"], keyof {
                type?: number | undefined;
                pick?: number | undefined;
                itemid?: string | number | Long.Long | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["teams"][number], keyof CMsgGCCStrike15V2Fantasy_FantasyTeam>, never>)[] & Record<Exclude<keyof I["teams"], keyof {
            sectionid?: number | undefined;
            slots?: {
                type?: number | undefined;
                pick?: number | undefined;
                itemid?: string | number | Long.Long | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Fantasy>, never>>(object: I): CMsgGCCStrike15V2Fantasy;
};
export declare const CMsgGCCStrike15V2Fantasy_FantasySlot: {
    encode(message: CMsgGCCStrike15V2Fantasy_FantasySlot, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Fantasy_FantasySlot;
    fromPartial<I extends {
        type?: number | undefined;
        pick?: number | undefined;
        itemid?: string | number | Long.Long | undefined;
    } & {
        type?: number | undefined;
        pick?: number | undefined;
        itemid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["itemid"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Fantasy_FantasySlot>, never>>(object: I): CMsgGCCStrike15V2Fantasy_FantasySlot;
};
export declare const CMsgGCCStrike15V2Fantasy_FantasyTeam: {
    encode(message: CMsgGCCStrike15V2Fantasy_FantasyTeam, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Fantasy_FantasyTeam;
    fromPartial<I extends {
        sectionid?: number | undefined;
        slots?: {
            type?: number | undefined;
            pick?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
        }[] | undefined;
    } & {
        sectionid?: number | undefined;
        slots?: ({
            type?: number | undefined;
            pick?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
        }[] & ({
            type?: number | undefined;
            pick?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
        } & {
            type?: number | undefined;
            pick?: number | undefined;
            itemid?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["slots"][number]["itemid"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["slots"][number], keyof CMsgGCCStrike15V2Fantasy_FantasySlot>, never>)[] & Record<Exclude<keyof I["slots"], keyof {
            type?: number | undefined;
            pick?: number | undefined;
            itemid?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Fantasy_FantasyTeam>, never>>(object: I): CMsgGCCStrike15V2Fantasy_FantasyTeam;
};
export declare const CAttributeString: {
    encode(message: CAttributeString, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CAttributeString;
    fromPartial<I extends {
        value?: string | undefined;
    } & {
        value?: string | undefined;
    } & Record<Exclude<keyof I, "value">, never>>(object: I): CAttributeString;
};
export declare const CMsgCStrike15Welcome: {
    encode(message: CMsgCStrike15Welcome, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgCStrike15Welcome;
    fromPartial<I extends {
        storeItemHash?: number | undefined;
        timeplayedconsecutively?: number | undefined;
        timeFirstPlayed?: number | undefined;
        lastTimePlayed?: number | undefined;
        lastIpAddress?: number | undefined;
        gscookieid?: string | number | Long.Long | undefined;
        uniqueid?: string | number | Long.Long | undefined;
    } & {
        storeItemHash?: number | undefined;
        timeplayedconsecutively?: number | undefined;
        timeFirstPlayed?: number | undefined;
        lastTimePlayed?: number | undefined;
        lastIpAddress?: number | undefined;
        gscookieid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["gscookieid"], keyof Long.Long>, never>) | undefined;
        uniqueid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["uniqueid"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgCStrike15Welcome>, never>>(object: I): CMsgCStrike15Welcome;
};
export declare const CMsgGCCStrike15V2ClientVarValueNotificationInfo: {
    encode(message: CMsgGCCStrike15V2ClientVarValueNotificationInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientVarValueNotificationInfo;
    fromPartial<I extends {
        valueName?: string | undefined;
        valueInt?: number | undefined;
        serverAddr?: number | undefined;
        serverPort?: number | undefined;
        chokedBlocks?: string[] | undefined;
    } & {
        valueName?: string | undefined;
        valueInt?: number | undefined;
        serverAddr?: number | undefined;
        serverPort?: number | undefined;
        chokedBlocks?: (string[] & string[] & Record<Exclude<keyof I["chokedBlocks"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientVarValueNotificationInfo>, never>>(object: I): CMsgGCCStrike15V2ClientVarValueNotificationInfo;
};
export declare const CMsgGCCStrike15V2ServerVarValueNotificationInfo: {
    encode(message: CMsgGCCStrike15V2ServerVarValueNotificationInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ServerVarValueNotificationInfo;
    fromPartial<I extends {
        accountid?: number | undefined;
        viewangles?: number[] | undefined;
        type?: number | undefined;
        userdata?: number[] | undefined;
    } & {
        accountid?: number | undefined;
        viewangles?: (number[] & number[] & Record<Exclude<keyof I["viewangles"], keyof number[]>, never>) | undefined;
        type?: number | undefined;
        userdata?: (number[] & number[] & Record<Exclude<keyof I["userdata"], keyof number[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ServerVarValueNotificationInfo>, never>>(object: I): CMsgGCCStrike15V2ServerVarValueNotificationInfo;
};
export declare const CMsgGCCStrike15V2GiftsLeaderboardRequest: {
    encode(_: CMsgGCCStrike15V2GiftsLeaderboardRequest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GiftsLeaderboardRequest;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): CMsgGCCStrike15V2GiftsLeaderboardRequest;
};
export declare const CMsgGCCStrike15V2GiftsLeaderboardResponse: {
    encode(message: CMsgGCCStrike15V2GiftsLeaderboardResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GiftsLeaderboardResponse;
    fromPartial<I extends {
        servertime?: number | undefined;
        timePeriodSeconds?: number | undefined;
        totalGiftsGiven?: number | undefined;
        totalGivers?: number | undefined;
        entries?: {
            accountid?: number | undefined;
            gifts?: number | undefined;
        }[] | undefined;
    } & {
        servertime?: number | undefined;
        timePeriodSeconds?: number | undefined;
        totalGiftsGiven?: number | undefined;
        totalGivers?: number | undefined;
        entries?: ({
            accountid?: number | undefined;
            gifts?: number | undefined;
        }[] & ({
            accountid?: number | undefined;
            gifts?: number | undefined;
        } & {
            accountid?: number | undefined;
            gifts?: number | undefined;
        } & Record<Exclude<keyof I["entries"][number], keyof CMsgGCCStrike15V2GiftsLeaderboardResponse_GiftLeaderboardEntry>, never>)[] & Record<Exclude<keyof I["entries"], keyof {
            accountid?: number | undefined;
            gifts?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GiftsLeaderboardResponse>, never>>(object: I): CMsgGCCStrike15V2GiftsLeaderboardResponse;
};
export declare const CMsgGCCStrike15V2GiftsLeaderboardResponse_GiftLeaderboardEntry: {
    encode(message: CMsgGCCStrike15V2GiftsLeaderboardResponse_GiftLeaderboardEntry, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GiftsLeaderboardResponse_GiftLeaderboardEntry;
    fromPartial<I extends {
        accountid?: number | undefined;
        gifts?: number | undefined;
    } & {
        accountid?: number | undefined;
        gifts?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GiftsLeaderboardResponse_GiftLeaderboardEntry>, never>>(object: I): CMsgGCCStrike15V2GiftsLeaderboardResponse_GiftLeaderboardEntry;
};
export declare const CMsgGCCStrike15V2ClientSubmitSurveyVote: {
    encode(message: CMsgGCCStrike15V2ClientSubmitSurveyVote, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientSubmitSurveyVote;
    fromPartial<I extends {
        surveyId?: number | undefined;
        vote?: number | undefined;
    } & {
        surveyId?: number | undefined;
        vote?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientSubmitSurveyVote>, never>>(object: I): CMsgGCCStrike15V2ClientSubmitSurveyVote;
};
export declare const CMsgGCCStrike15V2Server2GCClientValidate: {
    encode(message: CMsgGCCStrike15V2Server2GCClientValidate, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Server2GCClientValidate;
    fromPartial<I extends {
        accountid?: number | undefined;
    } & {
        accountid?: number | undefined;
    } & Record<Exclude<keyof I, "accountid">, never>>(object: I): CMsgGCCStrike15V2Server2GCClientValidate;
};
export declare const CMsgGCCStrike15V2GC2ClientTournamentInfo: {
    encode(message: CMsgGCCStrike15V2GC2ClientTournamentInfo, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GC2ClientTournamentInfo;
    fromPartial<I extends {
        eventid?: number | undefined;
        stageid?: number | undefined;
        gameType?: number | undefined;
        teamids?: number[] | undefined;
    } & {
        eventid?: number | undefined;
        stageid?: number | undefined;
        gameType?: number | undefined;
        teamids?: (number[] & number[] & Record<Exclude<keyof I["teamids"], keyof number[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GC2ClientTournamentInfo>, never>>(object: I): CMsgGCCStrike15V2GC2ClientTournamentInfo;
};
export declare const CSOEconCoupon: {
    encode(message: CSOEconCoupon, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CSOEconCoupon;
    fromPartial<I extends {
        entryid?: number | undefined;
        defidx?: number | undefined;
        expirationDate?: number | undefined;
    } & {
        entryid?: number | undefined;
        defidx?: number | undefined;
        expirationDate?: number | undefined;
    } & Record<Exclude<keyof I, keyof CSOEconCoupon>, never>>(object: I): CSOEconCoupon;
};
export declare const CSOQuestProgress: {
    encode(message: CSOQuestProgress, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CSOQuestProgress;
    fromPartial<I extends {
        questid?: number | undefined;
        pointsRemaining?: number | undefined;
        bonusPoints?: number | undefined;
    } & {
        questid?: number | undefined;
        pointsRemaining?: number | undefined;
        bonusPoints?: number | undefined;
    } & Record<Exclude<keyof I, keyof CSOQuestProgress>, never>>(object: I): CSOQuestProgress;
};
export declare const CSOAccountSeasonalOperation: {
    encode(message: CSOAccountSeasonalOperation, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CSOAccountSeasonalOperation;
    fromPartial<I extends {
        seasonValue?: number | undefined;
        tierUnlocked?: number | undefined;
        premiumTiers?: number | undefined;
        missionId?: number | undefined;
        missionsCompleted?: number | undefined;
        redeemableBalance?: number | undefined;
        seasonPassTime?: number | undefined;
    } & {
        seasonValue?: number | undefined;
        tierUnlocked?: number | undefined;
        premiumTiers?: number | undefined;
        missionId?: number | undefined;
        missionsCompleted?: number | undefined;
        redeemableBalance?: number | undefined;
        seasonPassTime?: number | undefined;
    } & Record<Exclude<keyof I, keyof CSOAccountSeasonalOperation>, never>>(object: I): CSOAccountSeasonalOperation;
};
export declare const CSOAccountRecurringSubscription: {
    encode(message: CSOAccountRecurringSubscription, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CSOAccountRecurringSubscription;
    fromPartial<I extends {
        timeNextCycle?: number | undefined;
        timeInitiated?: number | undefined;
    } & {
        timeNextCycle?: number | undefined;
        timeInitiated?: number | undefined;
    } & Record<Exclude<keyof I, keyof CSOAccountRecurringSubscription>, never>>(object: I): CSOAccountRecurringSubscription;
};
export declare const CSOPersonaDataPublic: {
    encode(message: CSOPersonaDataPublic, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CSOPersonaDataPublic;
    fromPartial<I extends {
        playerLevel?: number | undefined;
        commendation?: {
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } | undefined;
        elevatedState?: boolean | undefined;
    } & {
        playerLevel?: number | undefined;
        commendation?: ({
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } & {
            cmdFriendly?: number | undefined;
            cmdTeaching?: number | undefined;
            cmdLeader?: number | undefined;
        } & Record<Exclude<keyof I["commendation"], keyof PlayerCommendationInfo>, never>) | undefined;
        elevatedState?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CSOPersonaDataPublic>, never>>(object: I): CSOPersonaDataPublic;
};
export declare const CMsgGCGlobalGameSubscribe: {
    encode(message: CMsgGCGlobalGameSubscribe, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCGlobalGameSubscribe;
    fromPartial<I extends {
        ticket?: string | number | Long.Long | undefined;
    } & {
        ticket?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["ticket"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, "ticket">, never>>(object: I): CMsgGCGlobalGameSubscribe;
};
export declare const CMsgGCGlobalGameUnsubscribe: {
    encode(message: CMsgGCGlobalGameUnsubscribe, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCGlobalGameUnsubscribe;
    fromPartial<I extends {
        timeleft?: number | undefined;
    } & {
        timeleft?: number | undefined;
    } & Record<Exclude<keyof I, "timeleft">, never>>(object: I): CMsgGCGlobalGameUnsubscribe;
};
export declare const CMsgGCGlobalGamePlay: {
    encode(message: CMsgGCGlobalGamePlay, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCGlobalGamePlay;
    fromPartial<I extends {
        ticket?: string | number | Long.Long | undefined;
        gametimems?: number | undefined;
        msperpoint?: number | undefined;
    } & {
        ticket?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["ticket"], keyof Long.Long>, never>) | undefined;
        gametimems?: number | undefined;
        msperpoint?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCGlobalGamePlay>, never>>(object: I): CMsgGCGlobalGamePlay;
};
export declare const CMsgGCCStrike15V2AcknowledgePenalty: {
    encode(message: CMsgGCCStrike15V2AcknowledgePenalty, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2AcknowledgePenalty;
    fromPartial<I extends {
        acknowledged?: number | undefined;
    } & {
        acknowledged?: number | undefined;
    } & Record<Exclude<keyof I, "acknowledged">, never>>(object: I): CMsgGCCStrike15V2AcknowledgePenalty;
};
export declare const CMsgGCCStrike15V2Client2GCRequestPrestigeCoin: {
    encode(message: CMsgGCCStrike15V2Client2GCRequestPrestigeCoin, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Client2GCRequestPrestigeCoin;
    fromPartial<I extends {
        defindex?: number | undefined;
        upgradeid?: string | number | Long.Long | undefined;
        hours?: number | undefined;
        prestigetime?: number | undefined;
    } & {
        defindex?: number | undefined;
        upgradeid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["upgradeid"], keyof Long.Long>, never>) | undefined;
        hours?: number | undefined;
        prestigetime?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Client2GCRequestPrestigeCoin>, never>>(object: I): CMsgGCCStrike15V2Client2GCRequestPrestigeCoin;
};
export declare const CMsgGCCStrike15V2Client2GCStreamUnlock: {
    encode(message: CMsgGCCStrike15V2Client2GCStreamUnlock, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2Client2GCStreamUnlock;
    fromPartial<I extends {
        ticket?: string | number | Long.Long | undefined;
        os?: number | undefined;
    } & {
        ticket?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["ticket"], keyof Long.Long>, never>) | undefined;
        os?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2Client2GCStreamUnlock>, never>>(object: I): CMsgGCCStrike15V2Client2GCStreamUnlock;
};
export declare const CMsgGCCStrike15V2ClientToGCRequestElevate: {
    encode(message: CMsgGCCStrike15V2ClientToGCRequestElevate, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientToGCRequestElevate;
    fromPartial<I extends {
        stage?: number | undefined;
    } & {
        stage?: number | undefined;
    } & Record<Exclude<keyof I, "stage">, never>>(object: I): CMsgGCCStrike15V2ClientToGCRequestElevate;
};
export declare const CMsgGCCStrike15V2ClientToGCChat: {
    encode(message: CMsgGCCStrike15V2ClientToGCChat, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientToGCChat;
    fromPartial<I extends {
        matchId?: string | number | Long.Long | undefined;
        text?: string | undefined;
    } & {
        matchId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchId"], keyof Long.Long>, never>) | undefined;
        text?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientToGCChat>, never>>(object: I): CMsgGCCStrike15V2ClientToGCChat;
};
export declare const CMsgGCCStrike15V2GCToClientChat: {
    encode(message: CMsgGCCStrike15V2GCToClientChat, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GCToClientChat;
    fromPartial<I extends {
        accountId?: number | undefined;
        text?: string | undefined;
    } & {
        accountId?: number | undefined;
        text?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GCToClientChat>, never>>(object: I): CMsgGCCStrike15V2GCToClientChat;
};
export declare const CMsgGCCStrike15V2ClientAuthKeyCode: {
    encode(message: CMsgGCCStrike15V2ClientAuthKeyCode, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientAuthKeyCode;
    fromPartial<I extends {
        eventid?: number | undefined;
        code?: string | undefined;
    } & {
        eventid?: number | undefined;
        code?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientAuthKeyCode>, never>>(object: I): CMsgGCCStrike15V2ClientAuthKeyCode;
};
export declare const CMsgGCCStrike15GotvSyncPacket: {
    encode(message: CMsgGCCStrike15GotvSyncPacket, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15GotvSyncPacket;
    fromPartial<I extends {
        data?: {
            matchId?: string | number | Long.Long | undefined;
            instanceId?: number | undefined;
            signupfragment?: number | undefined;
            currentfragment?: number | undefined;
            tickrate?: number | undefined;
            tick?: number | undefined;
            rtdelay?: number | undefined;
            rcvage?: number | undefined;
            keyframeInterval?: number | undefined;
            cdndelay?: number | undefined;
        } | undefined;
    } & {
        data?: ({
            matchId?: string | number | Long.Long | undefined;
            instanceId?: number | undefined;
            signupfragment?: number | undefined;
            currentfragment?: number | undefined;
            tickrate?: number | undefined;
            tick?: number | undefined;
            rtdelay?: number | undefined;
            rcvage?: number | undefined;
            keyframeInterval?: number | undefined;
            cdndelay?: number | undefined;
        } & {
            matchId?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["data"]["matchId"], keyof Long.Long>, never>) | undefined;
            instanceId?: number | undefined;
            signupfragment?: number | undefined;
            currentfragment?: number | undefined;
            tickrate?: number | undefined;
            tick?: number | undefined;
            rtdelay?: number | undefined;
            rcvage?: number | undefined;
            keyframeInterval?: number | undefined;
            cdndelay?: number | undefined;
        } & Record<Exclude<keyof I["data"], keyof CEngineGotvSyncPacket>, never>) | undefined;
    } & Record<Exclude<keyof I, "data">, never>>(object: I): CMsgGCCStrike15GotvSyncPacket;
};
export declare const PlayerDecalDigitalSignature: {
    encode(message: PlayerDecalDigitalSignature, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): PlayerDecalDigitalSignature;
    fromPartial<I extends {
        signature?: Uint8Array | undefined;
        accountid?: number | undefined;
        rtime?: number | undefined;
        endpos?: number[] | undefined;
        startpos?: number[] | undefined;
        right?: number[] | undefined;
        txDefidx?: number | undefined;
        entindex?: number | undefined;
        hitbox?: number | undefined;
        creationtime?: number | undefined;
        equipslot?: number | undefined;
        traceId?: number | undefined;
        normal?: number[] | undefined;
        tintId?: number | undefined;
    } & {
        signature?: Uint8Array | undefined;
        accountid?: number | undefined;
        rtime?: number | undefined;
        endpos?: (number[] & number[] & Record<Exclude<keyof I["endpos"], keyof number[]>, never>) | undefined;
        startpos?: (number[] & number[] & Record<Exclude<keyof I["startpos"], keyof number[]>, never>) | undefined;
        right?: (number[] & number[] & Record<Exclude<keyof I["right"], keyof number[]>, never>) | undefined;
        txDefidx?: number | undefined;
        entindex?: number | undefined;
        hitbox?: number | undefined;
        creationtime?: number | undefined;
        equipslot?: number | undefined;
        traceId?: number | undefined;
        normal?: (number[] & number[] & Record<Exclude<keyof I["normal"], keyof number[]>, never>) | undefined;
        tintId?: number | undefined;
    } & Record<Exclude<keyof I, keyof PlayerDecalDigitalSignature>, never>>(object: I): PlayerDecalDigitalSignature;
};
export declare const CMsgGCCStrike15V2ClientPlayerDecalSign: {
    encode(message: CMsgGCCStrike15V2ClientPlayerDecalSign, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientPlayerDecalSign;
    fromPartial<I extends {
        data?: {
            signature?: Uint8Array | undefined;
            accountid?: number | undefined;
            rtime?: number | undefined;
            endpos?: number[] | undefined;
            startpos?: number[] | undefined;
            right?: number[] | undefined;
            txDefidx?: number | undefined;
            entindex?: number | undefined;
            hitbox?: number | undefined;
            creationtime?: number | undefined;
            equipslot?: number | undefined;
            traceId?: number | undefined;
            normal?: number[] | undefined;
            tintId?: number | undefined;
        } | undefined;
        itemid?: string | number | Long.Long | undefined;
    } & {
        data?: ({
            signature?: Uint8Array | undefined;
            accountid?: number | undefined;
            rtime?: number | undefined;
            endpos?: number[] | undefined;
            startpos?: number[] | undefined;
            right?: number[] | undefined;
            txDefidx?: number | undefined;
            entindex?: number | undefined;
            hitbox?: number | undefined;
            creationtime?: number | undefined;
            equipslot?: number | undefined;
            traceId?: number | undefined;
            normal?: number[] | undefined;
            tintId?: number | undefined;
        } & {
            signature?: Uint8Array | undefined;
            accountid?: number | undefined;
            rtime?: number | undefined;
            endpos?: (number[] & number[] & Record<Exclude<keyof I["data"]["endpos"], keyof number[]>, never>) | undefined;
            startpos?: (number[] & number[] & Record<Exclude<keyof I["data"]["startpos"], keyof number[]>, never>) | undefined;
            right?: (number[] & number[] & Record<Exclude<keyof I["data"]["right"], keyof number[]>, never>) | undefined;
            txDefidx?: number | undefined;
            entindex?: number | undefined;
            hitbox?: number | undefined;
            creationtime?: number | undefined;
            equipslot?: number | undefined;
            traceId?: number | undefined;
            normal?: (number[] & number[] & Record<Exclude<keyof I["data"]["normal"], keyof number[]>, never>) | undefined;
            tintId?: number | undefined;
        } & Record<Exclude<keyof I["data"], keyof PlayerDecalDigitalSignature>, never>) | undefined;
        itemid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["itemid"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientPlayerDecalSign>, never>>(object: I): CMsgGCCStrike15V2ClientPlayerDecalSign;
};
export declare const CMsgGCCStrike15V2ClientLogonFatalError: {
    encode(message: CMsgGCCStrike15V2ClientLogonFatalError, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientLogonFatalError;
    fromPartial<I extends {
        errorcode?: number | undefined;
        message?: string | undefined;
        country?: string | undefined;
    } & {
        errorcode?: number | undefined;
        message?: string | undefined;
        country?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientLogonFatalError>, never>>(object: I): CMsgGCCStrike15V2ClientLogonFatalError;
};
export declare const CMsgGCCStrike15V2ClientPollState: {
    encode(message: CMsgGCCStrike15V2ClientPollState, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientPollState;
    fromPartial<I extends {
        pollid?: number | undefined;
        names?: string[] | undefined;
        values?: number[] | undefined;
    } & {
        pollid?: number | undefined;
        names?: (string[] & string[] & Record<Exclude<keyof I["names"], keyof string[]>, never>) | undefined;
        values?: (number[] & number[] & Record<Exclude<keyof I["values"], keyof number[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientPollState>, never>>(object: I): CMsgGCCStrike15V2ClientPollState;
};
export declare const CMsgGCCStrike15V2PartyRegister: {
    encode(message: CMsgGCCStrike15V2PartyRegister, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PartyRegister;
    fromPartial<I extends {
        id?: number | undefined;
        ver?: number | undefined;
        apr?: number | undefined;
        ark?: number | undefined;
        nby?: number | undefined;
        grp?: number | undefined;
        slots?: number | undefined;
        launcher?: number | undefined;
        gameType?: number | undefined;
    } & {
        id?: number | undefined;
        ver?: number | undefined;
        apr?: number | undefined;
        ark?: number | undefined;
        nby?: number | undefined;
        grp?: number | undefined;
        slots?: number | undefined;
        launcher?: number | undefined;
        gameType?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2PartyRegister>, never>>(object: I): CMsgGCCStrike15V2PartyRegister;
};
export declare const CMsgGCCStrike15V2PartySearch: {
    encode(message: CMsgGCCStrike15V2PartySearch, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PartySearch;
    fromPartial<I extends {
        ver?: number | undefined;
        apr?: number | undefined;
        ark?: number | undefined;
        grps?: number[] | undefined;
        launcher?: number | undefined;
        gameType?: number | undefined;
    } & {
        ver?: number | undefined;
        apr?: number | undefined;
        ark?: number | undefined;
        grps?: (number[] & number[] & Record<Exclude<keyof I["grps"], keyof number[]>, never>) | undefined;
        launcher?: number | undefined;
        gameType?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2PartySearch>, never>>(object: I): CMsgGCCStrike15V2PartySearch;
};
export declare const CMsgGCCStrike15V2PartySearchResults: {
    encode(message: CMsgGCCStrike15V2PartySearchResults, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PartySearchResults;
    fromPartial<I extends {
        entries?: {
            id?: number | undefined;
            grp?: number | undefined;
            gameType?: number | undefined;
            apr?: number | undefined;
            ark?: number | undefined;
            loc?: number | undefined;
            accountid?: number | undefined;
        }[] | undefined;
    } & {
        entries?: ({
            id?: number | undefined;
            grp?: number | undefined;
            gameType?: number | undefined;
            apr?: number | undefined;
            ark?: number | undefined;
            loc?: number | undefined;
            accountid?: number | undefined;
        }[] & ({
            id?: number | undefined;
            grp?: number | undefined;
            gameType?: number | undefined;
            apr?: number | undefined;
            ark?: number | undefined;
            loc?: number | undefined;
            accountid?: number | undefined;
        } & {
            id?: number | undefined;
            grp?: number | undefined;
            gameType?: number | undefined;
            apr?: number | undefined;
            ark?: number | undefined;
            loc?: number | undefined;
            accountid?: number | undefined;
        } & Record<Exclude<keyof I["entries"][number], keyof CMsgGCCStrike15V2PartySearchResults_Entry>, never>)[] & Record<Exclude<keyof I["entries"], keyof {
            id?: number | undefined;
            grp?: number | undefined;
            gameType?: number | undefined;
            apr?: number | undefined;
            ark?: number | undefined;
            loc?: number | undefined;
            accountid?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "entries">, never>>(object: I): CMsgGCCStrike15V2PartySearchResults;
};
export declare const CMsgGCCStrike15V2PartySearchResults_Entry: {
    encode(message: CMsgGCCStrike15V2PartySearchResults_Entry, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PartySearchResults_Entry;
    fromPartial<I extends {
        id?: number | undefined;
        grp?: number | undefined;
        gameType?: number | undefined;
        apr?: number | undefined;
        ark?: number | undefined;
        loc?: number | undefined;
        accountid?: number | undefined;
    } & {
        id?: number | undefined;
        grp?: number | undefined;
        gameType?: number | undefined;
        apr?: number | undefined;
        ark?: number | undefined;
        loc?: number | undefined;
        accountid?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2PartySearchResults_Entry>, never>>(object: I): CMsgGCCStrike15V2PartySearchResults_Entry;
};
export declare const CMsgGCCStrike15V2PartyInvite: {
    encode(message: CMsgGCCStrike15V2PartyInvite, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2PartyInvite;
    fromPartial<I extends {
        accountid?: number | undefined;
        lobbyid?: number | undefined;
    } & {
        accountid?: number | undefined;
        lobbyid?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2PartyInvite>, never>>(object: I): CMsgGCCStrike15V2PartyInvite;
};
export declare const CMsgGCCStrike15V2AccountRequestCoPlays: {
    encode(message: CMsgGCCStrike15V2AccountRequestCoPlays, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2AccountRequestCoPlays;
    fromPartial<I extends {
        players?: {
            accountid?: number | undefined;
            rtcoplay?: number | undefined;
            online?: boolean | undefined;
        }[] | undefined;
        servertime?: number | undefined;
    } & {
        players?: ({
            accountid?: number | undefined;
            rtcoplay?: number | undefined;
            online?: boolean | undefined;
        }[] & ({
            accountid?: number | undefined;
            rtcoplay?: number | undefined;
            online?: boolean | undefined;
        } & {
            accountid?: number | undefined;
            rtcoplay?: number | undefined;
            online?: boolean | undefined;
        } & Record<Exclude<keyof I["players"][number], keyof CMsgGCCStrike15V2AccountRequestCoPlays_Player>, never>)[] & Record<Exclude<keyof I["players"], keyof {
            accountid?: number | undefined;
            rtcoplay?: number | undefined;
            online?: boolean | undefined;
        }[]>, never>) | undefined;
        servertime?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2AccountRequestCoPlays>, never>>(object: I): CMsgGCCStrike15V2AccountRequestCoPlays;
};
export declare const CMsgGCCStrike15V2AccountRequestCoPlays_Player: {
    encode(message: CMsgGCCStrike15V2AccountRequestCoPlays_Player, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2AccountRequestCoPlays_Player;
    fromPartial<I extends {
        accountid?: number | undefined;
        rtcoplay?: number | undefined;
        online?: boolean | undefined;
    } & {
        accountid?: number | undefined;
        rtcoplay?: number | undefined;
        online?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2AccountRequestCoPlays_Player>, never>>(object: I): CMsgGCCStrike15V2AccountRequestCoPlays_Player;
};
export declare const CMsgGCCStrike15V2ClientToGCRequestTicket: {
    encode(message: CMsgGCCStrike15V2ClientToGCRequestTicket, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientToGCRequestTicket;
    fromPartial<I extends {
        authorizedSteamId?: string | number | Long.Long | undefined;
        authorizedPublicIp?: number | undefined;
        gameserverSteamId?: string | number | Long.Long | undefined;
        gameserverSdrRouting?: string | undefined;
    } & {
        authorizedSteamId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["authorizedSteamId"], keyof Long.Long>, never>) | undefined;
        authorizedPublicIp?: number | undefined;
        gameserverSteamId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["gameserverSteamId"], keyof Long.Long>, never>) | undefined;
        gameserverSdrRouting?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientToGCRequestTicket>, never>>(object: I): CMsgGCCStrike15V2ClientToGCRequestTicket;
};
export declare const CMsgGCToClientSteamDatagramTicket: {
    encode(message: CMsgGCToClientSteamDatagramTicket, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCToClientSteamDatagramTicket;
    fromPartial<I extends {
        serializedTicket?: Uint8Array | undefined;
    } & {
        serializedTicket?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "serializedTicket">, never>>(object: I): CMsgGCToClientSteamDatagramTicket;
};
export declare const CMsgGCCStrike15V2ClientRequestOffers: {
    encode(_: CMsgGCCStrike15V2ClientRequestOffers, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientRequestOffers;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): CMsgGCCStrike15V2ClientRequestOffers;
};
export declare const CMsgGCCStrike15V2ClientRequestSouvenir: {
    encode(message: CMsgGCCStrike15V2ClientRequestSouvenir, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientRequestSouvenir;
    fromPartial<I extends {
        itemid?: string | number | Long.Long | undefined;
        matchid?: string | number | Long.Long | undefined;
        eventid?: number | undefined;
    } & {
        itemid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["itemid"], keyof Long.Long>, never>) | undefined;
        matchid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["matchid"], keyof Long.Long>, never>) | undefined;
        eventid?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientRequestSouvenir>, never>>(object: I): CMsgGCCStrike15V2ClientRequestSouvenir;
};
export declare const CMsgGCCStrike15V2ClientAccountBalance: {
    encode(message: CMsgGCCStrike15V2ClientAccountBalance, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientAccountBalance;
    fromPartial<I extends {
        amount?: string | number | Long.Long | undefined;
        url?: string | undefined;
    } & {
        amount?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["amount"], keyof Long.Long>, never>) | undefined;
        url?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientAccountBalance>, never>>(object: I): CMsgGCCStrike15V2ClientAccountBalance;
};
export declare const CMsgGCCStrike15V2ClientPartyJoinRelay: {
    encode(message: CMsgGCCStrike15V2ClientPartyJoinRelay, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientPartyJoinRelay;
    fromPartial<I extends {
        accountid?: number | undefined;
        lobbyid?: string | number | Long.Long | undefined;
    } & {
        accountid?: number | undefined;
        lobbyid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["lobbyid"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientPartyJoinRelay>, never>>(object: I): CMsgGCCStrike15V2ClientPartyJoinRelay;
};
export declare const CMsgGCCStrike15V2ClientPartyWarning: {
    encode(message: CMsgGCCStrike15V2ClientPartyWarning, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientPartyWarning;
    fromPartial<I extends {
        entries?: {
            accountid?: number | undefined;
            warntype?: number | undefined;
        }[] | undefined;
    } & {
        entries?: ({
            accountid?: number | undefined;
            warntype?: number | undefined;
        }[] & ({
            accountid?: number | undefined;
            warntype?: number | undefined;
        } & {
            accountid?: number | undefined;
            warntype?: number | undefined;
        } & Record<Exclude<keyof I["entries"][number], keyof CMsgGCCStrike15V2ClientPartyWarning_Entry>, never>)[] & Record<Exclude<keyof I["entries"], keyof {
            accountid?: number | undefined;
            warntype?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "entries">, never>>(object: I): CMsgGCCStrike15V2ClientPartyWarning;
};
export declare const CMsgGCCStrike15V2ClientPartyWarning_Entry: {
    encode(message: CMsgGCCStrike15V2ClientPartyWarning_Entry, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientPartyWarning_Entry;
    fromPartial<I extends {
        accountid?: number | undefined;
        warntype?: number | undefined;
    } & {
        accountid?: number | undefined;
        warntype?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientPartyWarning_Entry>, never>>(object: I): CMsgGCCStrike15V2ClientPartyWarning_Entry;
};
export declare const CMsgGCCStrike15V2SetEventFavorite: {
    encode(message: CMsgGCCStrike15V2SetEventFavorite, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2SetEventFavorite;
    fromPartial<I extends {
        eventid?: string | number | Long.Long | undefined;
        isFavorite?: boolean | undefined;
    } & {
        eventid?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["eventid"], keyof Long.Long>, never>) | undefined;
        isFavorite?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2SetEventFavorite>, never>>(object: I): CMsgGCCStrike15V2SetEventFavorite;
};
export declare const CMsgGCCStrike15V2GetEventFavoritesRequest: {
    encode(message: CMsgGCCStrike15V2GetEventFavoritesRequest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GetEventFavoritesRequest;
    fromPartial<I extends {
        allEvents?: boolean | undefined;
    } & {
        allEvents?: boolean | undefined;
    } & Record<Exclude<keyof I, "allEvents">, never>>(object: I): CMsgGCCStrike15V2GetEventFavoritesRequest;
};
export declare const CMsgGCCStrike15V2GetEventFavoritesResponse: {
    encode(message: CMsgGCCStrike15V2GetEventFavoritesResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GetEventFavoritesResponse;
    fromPartial<I extends {
        allEvents?: boolean | undefined;
        jsonFavorites?: string | undefined;
        jsonFeatured?: string | undefined;
    } & {
        allEvents?: boolean | undefined;
        jsonFavorites?: string | undefined;
        jsonFeatured?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GetEventFavoritesResponse>, never>>(object: I): CMsgGCCStrike15V2GetEventFavoritesResponse;
};
export declare const CMsgGCCStrike15V2ClientPerfReport: {
    encode(message: CMsgGCCStrike15V2ClientPerfReport, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientPerfReport;
    fromPartial<I extends {
        entries?: {
            perfcounter?: number | undefined;
            length?: number | undefined;
            reference?: Uint8Array | undefined;
            actual?: Uint8Array | undefined;
            sourceid?: number | undefined;
            status?: number | undefined;
        }[] | undefined;
    } & {
        entries?: ({
            perfcounter?: number | undefined;
            length?: number | undefined;
            reference?: Uint8Array | undefined;
            actual?: Uint8Array | undefined;
            sourceid?: number | undefined;
            status?: number | undefined;
        }[] & ({
            perfcounter?: number | undefined;
            length?: number | undefined;
            reference?: Uint8Array | undefined;
            actual?: Uint8Array | undefined;
            sourceid?: number | undefined;
            status?: number | undefined;
        } & {
            perfcounter?: number | undefined;
            length?: number | undefined;
            reference?: Uint8Array | undefined;
            actual?: Uint8Array | undefined;
            sourceid?: number | undefined;
            status?: number | undefined;
        } & Record<Exclude<keyof I["entries"][number], keyof CMsgGCCStrike15V2ClientPerfReport_Entry>, never>)[] & Record<Exclude<keyof I["entries"], keyof {
            perfcounter?: number | undefined;
            length?: number | undefined;
            reference?: Uint8Array | undefined;
            actual?: Uint8Array | undefined;
            sourceid?: number | undefined;
            status?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "entries">, never>>(object: I): CMsgGCCStrike15V2ClientPerfReport;
};
export declare const CMsgGCCStrike15V2ClientPerfReport_Entry: {
    encode(message: CMsgGCCStrike15V2ClientPerfReport_Entry, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientPerfReport_Entry;
    fromPartial<I extends {
        perfcounter?: number | undefined;
        length?: number | undefined;
        reference?: Uint8Array | undefined;
        actual?: Uint8Array | undefined;
        sourceid?: number | undefined;
        status?: number | undefined;
    } & {
        perfcounter?: number | undefined;
        length?: number | undefined;
        reference?: Uint8Array | undefined;
        actual?: Uint8Array | undefined;
        sourceid?: number | undefined;
        status?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientPerfReport_Entry>, never>>(object: I): CMsgGCCStrike15V2ClientPerfReport_Entry;
};
export declare const CVDiagnostic: {
    encode(message: CVDiagnostic, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CVDiagnostic;
    fromPartial<I extends {
        id?: number | undefined;
        extended?: number | undefined;
        value?: string | number | Long.Long | undefined;
        stringValue?: string | undefined;
    } & {
        id?: number | undefined;
        extended?: number | undefined;
        value?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["value"], keyof Long.Long>, never>) | undefined;
        stringValue?: string | undefined;
    } & Record<Exclude<keyof I, keyof CVDiagnostic>, never>>(object: I): CVDiagnostic;
};
export declare const CMsgGCCStrike15V2ClientReportValidation: {
    encode(message: CMsgGCCStrike15V2ClientReportValidation, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2ClientReportValidation;
    fromPartial<I extends {
        fileReport?: string | undefined;
        commandLine?: string | undefined;
        totalFiles?: number | undefined;
        internalError?: number | undefined;
        trustTime?: number | undefined;
        countPending?: number | undefined;
        countCompleted?: number | undefined;
        processId?: number | undefined;
        osversion?: number | undefined;
        clientreportversion?: number | undefined;
        statusId?: number | undefined;
        diagnostic1?: number | undefined;
        diagnostic2?: string | number | Long.Long | undefined;
        diagnostic3?: string | number | Long.Long | undefined;
        lastLaunchData?: string | undefined;
        reportCount?: number | undefined;
        clientTime?: string | number | Long.Long | undefined;
        diagnostic4?: string | number | Long.Long | undefined;
        diagnostic5?: string | number | Long.Long | undefined;
        diagnostics?: {
            id?: number | undefined;
            extended?: number | undefined;
            value?: string | number | Long.Long | undefined;
            stringValue?: string | undefined;
        }[] | undefined;
    } & {
        fileReport?: string | undefined;
        commandLine?: string | undefined;
        totalFiles?: number | undefined;
        internalError?: number | undefined;
        trustTime?: number | undefined;
        countPending?: number | undefined;
        countCompleted?: number | undefined;
        processId?: number | undefined;
        osversion?: number | undefined;
        clientreportversion?: number | undefined;
        statusId?: number | undefined;
        diagnostic1?: number | undefined;
        diagnostic2?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["diagnostic2"], keyof Long.Long>, never>) | undefined;
        diagnostic3?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["diagnostic3"], keyof Long.Long>, never>) | undefined;
        lastLaunchData?: string | undefined;
        reportCount?: number | undefined;
        clientTime?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["clientTime"], keyof Long.Long>, never>) | undefined;
        diagnostic4?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["diagnostic4"], keyof Long.Long>, never>) | undefined;
        diagnostic5?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["diagnostic5"], keyof Long.Long>, never>) | undefined;
        diagnostics?: ({
            id?: number | undefined;
            extended?: number | undefined;
            value?: string | number | Long.Long | undefined;
            stringValue?: string | undefined;
        }[] & ({
            id?: number | undefined;
            extended?: number | undefined;
            value?: string | number | Long.Long | undefined;
            stringValue?: string | undefined;
        } & {
            id?: number | undefined;
            extended?: number | undefined;
            value?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["diagnostics"][number]["value"], keyof Long.Long>, never>) | undefined;
            stringValue?: string | undefined;
        } & Record<Exclude<keyof I["diagnostics"][number], keyof CVDiagnostic>, never>)[] & Record<Exclude<keyof I["diagnostics"], keyof {
            id?: number | undefined;
            extended?: number | undefined;
            value?: string | number | Long.Long | undefined;
            stringValue?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2ClientReportValidation>, never>>(object: I): CMsgGCCStrike15V2ClientReportValidation;
};
export declare const CMsgGCCStrike15V2GC2ClientRefuseSecureMode: {
    encode(message: CMsgGCCStrike15V2GC2ClientRefuseSecureMode, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GC2ClientRefuseSecureMode;
    fromPartial<I extends {
        fileReport?: string | undefined;
        offerInsecureMode?: boolean | undefined;
        offerSecureMode?: boolean | undefined;
        showUnsignedUi?: boolean | undefined;
        kickUser?: boolean | undefined;
        showTrustedUi?: boolean | undefined;
        showWarningNotTrusted?: boolean | undefined;
        showWarningNotTrusted2?: boolean | undefined;
        filesPreventedTrusted?: string | undefined;
    } & {
        fileReport?: string | undefined;
        offerInsecureMode?: boolean | undefined;
        offerSecureMode?: boolean | undefined;
        showUnsignedUi?: boolean | undefined;
        kickUser?: boolean | undefined;
        showTrustedUi?: boolean | undefined;
        showWarningNotTrusted?: boolean | undefined;
        showWarningNotTrusted2?: boolean | undefined;
        filesPreventedTrusted?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GC2ClientRefuseSecureMode>, never>>(object: I): CMsgGCCStrike15V2GC2ClientRefuseSecureMode;
};
export declare const CMsgGCCStrike15V2GC2ClientRequestValidation: {
    encode(message: CMsgGCCStrike15V2GC2ClientRequestValidation, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GC2ClientRequestValidation;
    fromPartial<I extends {
        fullReport?: boolean | undefined;
        module?: string | undefined;
    } & {
        fullReport?: boolean | undefined;
        module?: string | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GC2ClientRequestValidation>, never>>(object: I): CMsgGCCStrike15V2GC2ClientRequestValidation;
};
export declare const CMsgGCCStrike15V2GC2ClientInitSystem: {
    encode(message: CMsgGCCStrike15V2GC2ClientInitSystem, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GC2ClientInitSystem;
    fromPartial<I extends {
        load?: boolean | undefined;
        name?: string | undefined;
        outputname?: string | undefined;
        keyData?: Uint8Array | undefined;
        shaHash?: Uint8Array | undefined;
        cookie?: number | undefined;
        manifest?: string | undefined;
        systemPackage?: Uint8Array | undefined;
        loadSystem?: boolean | undefined;
    } & {
        load?: boolean | undefined;
        name?: string | undefined;
        outputname?: string | undefined;
        keyData?: Uint8Array | undefined;
        shaHash?: Uint8Array | undefined;
        cookie?: number | undefined;
        manifest?: string | undefined;
        systemPackage?: Uint8Array | undefined;
        loadSystem?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GC2ClientInitSystem>, never>>(object: I): CMsgGCCStrike15V2GC2ClientInitSystem;
};
export declare const CMsgGCCStrike15V2GC2ClientInitSystemResponse: {
    encode(message: CMsgGCCStrike15V2GC2ClientInitSystemResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CMsgGCCStrike15V2GC2ClientInitSystemResponse;
    fromPartial<I extends {
        success?: boolean | undefined;
        diagnostic?: string | undefined;
        shaHash?: Uint8Array | undefined;
        response?: number | undefined;
        errorCode1?: number | undefined;
        errorCode2?: number | undefined;
        handle?: string | number | Long.Long | undefined;
        einitResult?: EInitSystemResult | undefined;
        auxSystem1?: number | undefined;
        auxSystem2?: number | undefined;
    } & {
        success?: boolean | undefined;
        diagnostic?: string | undefined;
        shaHash?: Uint8Array | undefined;
        response?: number | undefined;
        errorCode1?: number | undefined;
        errorCode2?: number | undefined;
        handle?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["handle"], keyof Long.Long>, never>) | undefined;
        einitResult?: EInitSystemResult | undefined;
        auxSystem1?: number | undefined;
        auxSystem2?: number | undefined;
    } & Record<Exclude<keyof I, keyof CMsgGCCStrike15V2GC2ClientInitSystemResponse>, never>>(object: I): CMsgGCCStrike15V2GC2ClientInitSystemResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
