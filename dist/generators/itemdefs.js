"use strict";
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
Object.defineProperty(exports, "__esModule", { value: true });
const vdf_1 = require("@node-steam/vdf");
const fs = require("fs");
const path = require("path");
const util_1 = require("util");
const readFileAsync = (0, util_1.promisify)(fs.readFile);
const fromEntries = (arr) => Object.assign({}, ...Array.from(arr, ([k, v]) => ({ [k]: v })));
async function parseItems(root) {
    const itemData = await readFileAsync(path.join(root, "scripts", "items", "items_game.txt"), "utf-8");
    const { items_game: items } = (0, vdf_1.parse)(itemData);
    const englishData = await readFileAsync(path.join(root, "resource", "csgo_english.txt"), "utf-8");
    const { lang } = (0, vdf_1.parse)(englishData);
    const tokens = new Map(Object.entries(lang.Tokens).map(([token, value]) => [
        token.toLowerCase(),
        value
    ]));
    const translate = (token) => token && token[0] === "#"
        ? tokens.get(token.substr(1).toLowerCase())
        : token;
    console.log("// DO NOT MODIFY!");
    console.log("// Auto-generated by ./generators/itemdefs.ts");
    console.log("");
    console.log(`export interface IItemDefinition {
  itemName: string;
  className: string;
}`);
    console.log("");
    console.log(`export const itemDefinitionIndexMap: {
  [itemIndex: string]: IItemDefinition | undefined;
} = ` +
        JSON.stringify(fromEntries(Object.entries(items.items)
            .filter(([_key, item]) => item.name.startsWith("weapon_"))
            .map(([key, item]) => [
            parseInt(key, 10),
            {
                className: item.name,
                itemName: translate(items.prefabs[item.prefab].item_name || item.item_name)
            }
        ])
            .filter(([_key, x]) => x.itemName)), null, 2));
    console.log("");
    console.log(`export interface IPaintKit {
  name: string;
  tag: string;
}`);
    console.log("");
    console.log(`export const paintKitIndexMap: {
  [paintKitIndex: string]: IPaintKit | undefined;
} = ` +
        JSON.stringify(fromEntries(Object.entries(items.paint_kits)
            .map(([key, item]) => [
            parseInt(key, 10),
            {
                name: item.name,
                tag: translate(item.description_tag)
            }
        ])
            .filter(([_key, x]) => x.tag)), null, 2));
}
if (process.argv.length == 3) {
    // argument should be path to csgo mod directory, e.g.:
    // ./GameTracking-CSGO/csgo
    parseItems(process.argv[2]).catch(err => console.error(err));
}
else {
    console.error("expected args: <path to csgo mod directory>");
    process.exitCode = 1;
}
//# sourceMappingURL=itemdefs.js.map